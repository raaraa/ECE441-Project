00003000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/30/2018 9:37:48 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Monitor Project
00000000                             3  * Written by : Raul Renteria
00000000                             4  * Date       :
00000000                             5  * Description: HELL on earth/Simplified version of TUTOR program
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =0000000D                  8  CR EQU $0D  ; Carrigage return
00000000  =0000000A                  9  LF EQU $0A  ; New Line
00002000                            10      ORG    $2000
00002000                            11      
00002000= 4D 4F 4E 49 54 4F ...     12  SHELL_PROMPT:  DC.B    'MONITOR441>',0
0000200C                            13  INPUT   DS.B 100         ;input buffer for commands
00002070= 00                        14          DC.B 0
00002071                            15          
00002071                            16  *Commands to compare input stings to*
00002071= 48 45 4C 50 00            17  HELPCOMMAND: DC.B 'HELP',0
00002076= 4D 44 53 50 00            18  MDSPCOMMAND DC.B 'MDSP',0
0000207B= 53 4F 52 54 57 00         19  SORTWCOMMAND DC.B 'SORTW',0
00002081= 4D 4D 00                  20  MMCOMMAND DC.B 'MM',0
00002084= 4D 53 00                  21  MSCOMMAND DC.B 'MS',0
00002087= 42 54 53 54 00            22  BTSTCOMMAND DC.B 'BTST',0
0000208C= 42 46 00                  23  BFCOMMAND DC.B 'BF',0
0000208F= 42 4D 4F 56 00            24  BMOVCOMMAND DC.B 'BMOV',0
00002094= 42 53 43 48 00            25  BSCHCOMMAND DC.B 'BSCH',0
00002099= 47 4F 00                  26  GOCOMMAND DC.B 'GO',0
0000209C= 44 46 00                  27  DFCOMMAND DC.B 'DF',0
0000209F= 45 58 49 54 00            28  EXITCOMMAND DC.B 'EXIT',0
000020A4= 43 52 43 00               29  CRCCOM DC.B 'CRC',0
000020A8= 46 4F 4E 54 00            30  FONT DC.B 'FONT',0
000020AD= 45 43 48 4F 00            31  ECHOCOMMAND DC.B 'ECHO',0
000020B2                            32      
000020B2                            33  **Help Display prompts**
000020B2= 54 48 49 53 20 49 ...     34  USERPROMPT DC.B 'THIS IS THE USER PROGRAM',0
000020CB= 4D 44 53 50 3A 20 ...     35  MDSPHELPPROMPT DC.B 'MDSP: Outputs Address and Memory contents',CR,LF,'MDSP <address1> <address2> eg: MDSP $908 $90A<CR>',CR,LF,0
0000212A= 53 4F 52 54 57 3A ...     36  SORTWHELPPROMPT DC.B 'SORTW: Sorts a block of memory. Default: Descending Order.',CR,LF,'A: Ascending order',CR,LF,'D: Descending order',CR,LF,'SORTW <address1> <address2> <order>',CR,LF,0
000021B5= 4D 4D 3A 20 44 69 ...     37  MMHELPPROMPT DC.B 'MM: Displays and optionally modifies contents of memory at the specified address',CR,LF,'MM <size> <address>',CR,LF,0
0000221D= 4D 53 3A 20 53 74 ...     38  MSHELPPROMPT DC.B 'MS: Stores an ASCII string into memory starting at ADDRESS',CR,LF,'MS <ADDRESS> <STRING>',CR,LF,0
00002271= 42 54 53 54 3A 20 ...     39  BTSTHELPPROMPT DC.B 'BTST: <address1> <address2>',CR,LF,0
0000228F= 42 4D 4F 56 3A 20 ...     40  BMOVHELPPROMPT DC.B 'BMOV: Moves bytes of memory from <address1> to <address2>',CR,LF,'BMOV <address1> <address2> <n>',CR,LF,0
000022EB= 42 46 3A 20 46 69 ...     41  BFHELPPROMPT DC.B 'BF: Fills memory from first address to second address with zero padded word data',CR,LF,'BF <address1> <address2> <data>',CR,LF,0
0000235F= 42 53 43 48 3A 20 ...     42  BSCHHELPPROMPT DC.B 'BSCH: Searches for literal <string>  between <address1> and <address2>',CR,LF,'BSCH <address1> <address2> <string>',CR,LF,0
000023CD= 47 4F 3A 20 42 65 ...     43  GOHELPPROMPT DC.B 'GO: Begin execution of program at address',CR,LF,'GO <address>',CR,LF,0
00002407= 44 46 3A 20 44 69 ...     44  DFHELPPROMPT DC.B 'DF: Displays register contents',CR,LF,0 
00002428= 45 58 49 54 3A 20 ...     45  EXITHELPPROMPT DC.B 'EXIT: Stops Program',CR,LF,0
0000243E= 00                        46  NL: DC.B 0
0000243F                            47      
0000243F                            48  **Print out for registers**
0000243F= 41 30 3A 20 00            49  A0REG: DC.B 'A0: ',0
00002444= 41 31 3A 00               50  A1REG: DC.B 'A1:',0
00002448= 41 32 3A 20 00            51  A2REG: DC.B 'A2: ',0
0000244D= 41 33 3A 20 00            52  A3REG: DC.B 'A3: ',0
00002452= 41 34 3A 20 00            53  A4REG: DC.B 'A4: ',0
00002457= 41 35 3A 20 00            54  A5REG: DC.B 'A5: ',0
0000245C= 41 36 3A 00               55  A6REG: DC.B 'A6:',0
00002460= 41 37 2F 53 53 50 ...     56  A7REG: DC.B 'A7/SSP:',0
00002468= 44 30 3A 20 00            57  D0REG: DC.B 'D0: ',0
0000246D= 44 31 3A 20 00            58  D1REG: DC.B 'D1: ',0
00002472= 44 32 3A 20 00            59  D2REG: DC.B 'D2: ',0
00002477= 44 33 3A 20 00            60  D3REG: DC.B 'D3: ',0
0000247C= 44 34 3A 20 00            61  D4REG: DC.B 'D4: ',0
00002481= 44 35 3A 20 00            62  D5REG: DC.B 'D5: ',0
00002486= 44 36 3A 20 00            63  D6REG: DC.B 'D6: ',0
0000248B= 44 37 3A 20 00            64  D7REG: DC.B 'D7: ',0
00002490= 55 53 50 3A 20 00         65  USPREG: DC.B 'USP: ',0
00002496= 53 52 3A 20 00            66  SRREG: DC.B 'SR: ',0
0000249B= 50 43 3A 20 00            67  PCREG: DC.B 'PC: ',0
000024A0                            68  
000024A0                            69  **exception prompts**
000024A0                            70  ** GO $6010 - LINE F
000024A0                            71  ** GO $6020 - LINE A
000024A0                            72  ** GO $6030 - ILLEGAL INSTUCTION
000024A0                            73  ** GO $6040 - Divide by Zero
000024A0                            74  ** GO $6050 - Check
000024A0                            75  ** GO $6060 - Privalege
000024A0= 41 64 64 72 65 73 ...     76  ADDRESS_ER: DC.B 'Address Trap Error ',0
000024B4= 49 6C 6C 65 67 61 ...     77  ILLEGAL_ER: DC.B 'Illegal Instruction Trap Error',0
000024D3= 50 72 69 76 65 6C ...     78  PRIVALAGE_ER: DC.B 'Privelage Violation Exception',0
000024F1= 44 69 76 69 64 65 ...     79  DIVIDE_Z_ER: DC.B 'Divide by 0 error',0
00002503= 43 68 65 63 6B 20 ...     80  CHECK_ER: DC.B 'Check instruction error',0
0000251B= 4C 69 6E 65 20 41 ...     81  LINEA_ER: DC.B 'Line A Emulator exception',0
00002535= 4C 69 6E 65 20 46 ...     82  LINEF_ER: DC.B 'Line F Emulator exception',0 
0000254F                            83  
0000254F                            84  *Strings to print out
0000254F= 47 4F 20 41 44 44 ...     85  GO_ADDRESS: DC.B 'GO ADDRESS: ',0
0000255C= 44 69 64 6E 74 20 ...     86  NO_STRING_MATCH DC.B 'Didnt find string',0
0000256E= 46 6F 75 6E 64 20 ...     87  STRING_MATCH DC.B 'Found the String!!',0
00002581= 41 44 44 52 45 53 ...     88  ADDRESS: DC.B 'ADDRESS ',0
0000258A= 20 3A 20 00               89  COLON: DC.B ' : ',0
0000258E                            90  
0000258E                            91  *Storage loction for PC, SSR, 
0000258E                            92  PC_STORE DS.L 1
00002592                            93  REGNUM DS.B 1
00002594                            94  REG_STORE DS.L 1
00002598                            95    
00002598                            96        
00003000                            97      ORG    $3000
00003000                            98  START:
00003000                            99  
00003000                           100      **exception vectors**
00003000  21FC 0000357A 000C       101      MOVE.L #ADDRESS_ERRORV,$C
00003008  21FC 000035B0 0010       102      MOVE.L #ILLEGAL_INSTRV,$10
00003010  21FC 000035F8 0014       103      MOVE.L #DIVIDE_ZEROV,$14
00003018  21FC 0000361C 0018       104      MOVE.L #CHECK_INSTRV,$18
00003020  21FC 000035D4 0020       105      MOVE.L #PRIVALEGEV,$20
00003028  21FC 00003640 0028       106      MOVE.L #LINEAV,$28
00003030  21FC 00003664 002C       107      MOVE.L #LINEFV,$2C
00003038  21FC 00003572 0084       108      MOVE.L #TRAPING_HOES,$84  
00003040                           109      
00003040                           110  INIT:
00003040  6000 0006                111      BRA SHELL
00003044                           112  SHELL_RESET:
00003044  4CDF 7FFF                113      MOVEM.L (SP)+, A0-A6/D0-D7
00003048                           114  SHELL:
00003048  48E7 FFFE                115      MOVEM.L A0-A6/D0-D7, -(SP)
0000304C  43F8 2000                116      LEA SHELL_PROMPT,A1       ; will print out MONITOR441>
00003050  103C 000E                117      MOVE.B #14,D0
00003054  4E4F                     118      TRAP #15
00003056  43F8 200C                119      LEA INPUT,A1
0000305A  103C 0002                120      MOVE.B #2,D0        ; parse cmd and read input
0000305E  4E4F                     121      TRAP #15
00003060  3C01                     122      MOVE.W D1,D6        ; keep length of string for comparisons
00003062  B27C 0000                123      CMP.W #0,D1         ; check if the input string is empty
00003066  67DC                     124      BEQ SHELL_RESET     ; if empty, restart prompt
00003068  4BF8 200C                125      LEA INPUT,A5        ; put into A5
0000306C  4DF8 2076                126      LEA MDSPCOMMAND,A6  ; load MDSP command into A6
00003070  303C 0004                127      MOVE.W #4,D0        ; since MDSP is 4 char long, put 4 into D0 for comp
00003074  6100 04D2                128      BSR CHECK_MATCH      ; compare the two stirngs
00003078  4A40                     129      TST.W D0            ; check if D0 == 0
0000307A  6600 005C                130      BNE MM_FUNC         ; if false, there is no match, so branch to test next instruction
0000307E                           131      
0000307E                           132      **Code to execute MDSP if the test above is true.
0000307E  2A49                     133      MOVE.L A1,A5
00003080  5A4D                     134      ADD #5,A5           ; Skip to address1
00003082  2C4D                     135      MOVE.L A5,A6
00003084  6100 04AC                136      BSR FIND_END        ; find the end of address1
00003088  6100 05FE                137      BSR COMMAND_PARSE         ; A5 has begining of address1 and A6 has end of this. parse this address.
0000308C  4A41                     138      TST D1              ; D0 will hold address1
0000308E  6600 003C                139      BNE MDSP_ERR        ; wring type of address
00003092  2400                     140      MOVE.L D0,D2
00003094  528E                     141      ADD.L #1,A6         ; go to address2
00003096  2A4E                     142      MOVE.L A6,A5         
00003098  6100 0498                143      BSR FIND_END        ; find end of address2
0000309C  D3C6                     144      ADD.L D6,A1         ; increment A1 to end of command
0000309E  BDC9                     145      CMP.L A1,A6         ; compare contents of A1 to A6 to ensure address2 is correct
000030A0  6700 0010                146      BEQ MDSP_2_ARGS     ; two addresses were given
000030A4  2A42                     147      MOVE.L D2,A5        ; A5= address1, A6=address2
000030A6  2C42                     148      MOVE.L D2,A6
000030A8  DDFC 00000010            149      ADD.L #16,A6        ; add 16 to address1 since only 1 address was given
000030AE  6000 0010                150      BRA MDSP_EX
000030B2                           151      
000030B2                           152  MDSP_2_ARGS:             
000030B2  6100 05D4                153      BSR COMMAND_PARSE         
000030B6  4A41                     154      TST D1
000030B8  6600 0012                155      BNE MDSP_ERR
000030BC  2A42                     156      MOVE.L D2,A5
000030BE  2C40                     157      MOVE.L D0,A6
000030C0                           158  MDSP_EX:
000030C0  6100 0634                159      BSR MDSP
000030C4  4CDF 7FFF                160      MOVEM.L (SP)+, A0-A6/D0-D7
000030C8  6000 FF7E                161      BRA SHELL
000030CC                           162      
000030CC                           163  MDSP_ERR:
000030CC  6100 03D8                164      BSR MDSPHELP      
000030D0  4CDF 7FFF                165      MOVEM.L (SP)+, A0-A6/D0-D7
000030D4  6000 FF72                166      BRA SHELL
000030D8                           167  
000030D8                           168  *Check for MM 
000030D8                           169  MM_FUNC:
000030D8  4DF8 2081                170      LEA MMCOMMAND,A6
000030DC  303C 0002                171      MOVE.W #2,D0    ; MM command size is 2
000030E0  6100 0466                172      BSR CHECK_MATCH ; check if input is MM
000030E4  4A40                     173      TST.W D0                   
000030E6  6600 0072                174      BNE SW_FUNC     ; Not MM? Go to SORTW
000030EA                           175      
000030EA                           176      **Code to execute MM
000030EA  5A8D                     177      ADD.L #5,A5     ; skip to size arg
000030EC  4DF8 200C                178      LEA INPUT,A6
000030F0  DDC6                     179      ADD.L D6,A6     ; PPOINT A6 to end of address
000030F2  6100 0594                180      BSR COMMAND_PARSE
000030F6  4A41                     181      TST D1
000030F8  6700 000E                182      BEQ MM_CHECK_SIZE
000030FC  6100 036C                183      BSR MMHELP      
00003100  4CDF 7FFF                184      MOVEM.L (SP)+, A0-A6/D0-D7
00003104  6000 FF42                185      BRA SHELL
00003108                           186      
00003108                           187  MM_CHECK_SIZE:
00003108  558D                     188      SUB.L #2,A5     ; decrement A5 by two to go back to the size
0000310A  2040                     189      MOVE.L D0,A0    ; put address to modify in D0 into A0
0000310C  0C15 0042                190      CMP.B #'B',(A5) ; check if the parsed arguement is B.
00003110  6700 001E                191      BEQ MM_B
00003114  0C15 0057                192      CMP.B #'W',(A5)
00003118  6700 0024                193      BEQ MM_W
0000311C  0C15 004C                194      CMP.B #'L',(A5)
00003120  6700 002A                195      BEQ MM_L
00003124  6100 0344                196      BSR MMHELP       ; if it's not either one of the three. There's an error.
00003128  4CDF 7FFF                197      MOVEM.L (SP)+, A0-A6/D0-D7
0000312C  6000 FF1A                198      BRA SHELL
00003130                           199  MM_B:           
00003130  4287                     200      CLR.L D7
00003132  6100 0614                201      BSR MM
00003136  4CDF 7FFF                202      MOVEM.L (SP)+, A0-A6/D0-D7
0000313A  6000 FF0C                203      BRA SHELL
0000313E                           204  MM_W:                 
0000313E  7E01                     205      MOVE.L #1, D7
00003140  6100 0606                206      BSR MM
00003144  4CDF 7FFF                207      MOVEM.L (SP)+, A0-A6/D0-D7
00003148  6000 FEFE                208      BRA SHELL
0000314C                           209  MM_L:             
0000314C  7E02                     210      MOVE.L #2, D7
0000314E  6100 05F8                211      BSR MM
00003152  4CDF 7FFF                212      MOVEM.L (SP)+, A0-A6/D0-D7
00003156  6000 FEF0                213      BRA SHELL 
0000315A                           214  
0000315A                           215  *Check for SORTW
0000315A                           216  SW_FUNC:
0000315A  4DF8 207B                217      LEA SORTWCOMMAND,A6 ; put sortw into A6     
0000315E  303C 0005                218      MOVE.W #5,D0
00003162  6100 03E4                219      BSR CHECK_MATCH
00003166  4A40                     220      TST.W D0            
00003168  6600 007E                221      BNE BMOV_FUNC
0000316C                           222      
0000316C  508D                     223      ADD.L #8,A5         ; this is the start of address1     
0000316E  2C4D                     224      MOVE.L A5,A6
00003170  6100 03C0                225      BSR FIND_END        ; find end
00003174  6100 0512                226      BSR COMMAND_PARSE         ; get inputs 
00003178  4A41                     227      TST D1
0000317A  6600 0060                228      BNE SORTW_ERR       ; incorrect arguemnts 
0000317E  2C00                     229      MOVE.L D0,D6        ; put address1 in D6
00003180  528E                     230      ADD.L #1,A6
00003182  2A4E                     231      MOVE.L A6,A5
00003184  6100 03AC                232      BSR FIND_END        ; getting second address
00003188  6100 04FE                233      BSR COMMAND_PARSE         
0000318C  4A41                     234      TST D1
0000318E  6600 004C                235      BNE SORTW_ERR       ; wrong arguments
00003192  4BF8 200C                236      LEA INPUT,A5
00003196  5C8D                     237      ADD.L #6,A5         ; get the letter. D or A
00003198  0C15 0041                238      CMP.B #'A',(A5)
0000319C  6700 002A                239      BEQ SORTA
000031A0  0C15 0044                240      CMP.B #'D',(A5)
000031A4  6700 000E                241      BEQ SORTD
000031A8  6100 02E8                242      BSR SORTWHELP        ; No letter, or incorrect letter. 
000031AC  4CDF 7FFF                243      MOVEM.L (SP)+, A0-A6/D0-D7
000031B0  6000 FE96                244      BRA SHELL
000031B4                           245      
000031B4                           246  * descending 
000031B4                           247  SORTD:
000031B4  2A46                     248      MOVE.L D6,A5
000031B6  2C40                     249      MOVE.L D0,A6
000031B8  103C 0001                250      MOVE.B #1,D0            
000031BC  6100 074E                251      BSR SORTW
000031C0  4CDF 7FFF                252      MOVEM.L (SP)+, A0-A6/D0-D7
000031C4  6000 FE82                253      BRA SHELL
000031C8                           254   *aascending  
000031C8                           255  SORTA:
000031C8  2A46                     256      MOVE.L D6,A5
000031CA  2C40                     257      MOVE.L D0,A6
000031CC  103C 0000                258      MOVE.B #0,D0
000031D0  6100 073A                259      BSR SORTW            
000031D4  4CDF 7FFF                260      MOVEM.L (SP)+, A0-A6/D0-D7
000031D8  6000 FE6E                261      BRA SHELL
000031DC                           262      
000031DC                           263  SORTW_ERR:
000031DC  6100 02B4                264      BSR SORTWHELP      ;PRINT HELP IF ERROR
000031E0  4CDF 7FFF                265      MOVEM.L (SP)+, A0-A6/D0-D7
000031E4  6000 FE62                266      BRA SHELL
000031E8                           267      
000031E8                           268      
000031E8                           269  BMOV_FUNC:
000031E8  4DF8 208F                270      LEA BMOVCOMMAND,A6  ;bmov into A6
000031EC  303C 0004                271      MOVE.W #4,D0
000031F0  6100 0356                272      BSR CHECK_MATCH
000031F4  4A40                     273      TST.W D0          
000031F6  6600 0058                274      BNE MS_FUNC         ; Not BMOV? go to MS
000031FA                           275      
000031FA                           276      
000031FA  5A8D                     277      ADD.L #5,A5         ; address1 in A5     
000031FC  2C4D                     278      MOVE.L A5,A6
000031FE  6100 0332                279      BSR FIND_END
00003202  6100 0484                280      BSR COMMAND_PARSE
00003206  4A41                     281      TST D1
00003208  6600 003A                282      BNE BMOV_ERR
0000320C  2A00                     283      MOVE.L D0,D5        ; address1 goes in d5
0000320E  528E                     284      ADD.L #1,A6
00003210  2A4E                     285      MOVE.L A6,A5
00003212  6100 031E                286      BSR FIND_END        ; getting address2
00003216  6100 0470                287      BSR COMMAND_PARSE         ; 
0000321A  2800                     288      MOVE.L D0,D4
0000321C  4A41                     289      TST D1
0000321E  6600 0024                290      BNE BMOV_ERR
00003222  528E                     291      ADD.L #1,A6
00003224  2A4E                     292      MOVE.L A6,A5
00003226  6100 030A                293      BSR FIND_END        ; getting number of bytes to move
0000322A  6100 045C                294      BSR COMMAND_PARSE         ; stored in D0
0000322E  4A41                     295      TST D1
00003230  6600 0012                296      BNE BMOV_ERR
00003234  2A45                     297      MOVE.L D5,A5
00003236  2C44                     298      MOVE.L D4,A6
00003238  6100 067C                299      BSR BMOV            ; call BMOV with A5=address1, A6=address2, D0=count
0000323C  4CDF 7FFF                300      MOVEM.L (SP)+, A0-A6/D0-D7
00003240  6000 FE06                301      BRA SHELL
00003244                           302      
00003244                           303  BMOV_ERR:
00003244  6100 0288                304      BSR BMOVHELP
00003248  4CDF 7FFF                305      MOVEM.L (SP)+, A0-A6/D0-D7
0000324C  6000 FDFA                306      BRA SHELL 
00003250                           307  
00003250                           308      
00003250                           309      
00003250                           310  MS_FUNC:
00003250  4DF8 2084                311      LEA MSCOMMAND,A6    ; put MS into A6
00003254  303C 0002                312      MOVE.W #2,D0
00003258  6100 02EE                313      BSR CHECK_MATCH
0000325C  4A40                     314      TST.W D0            
0000325E  6600 0040                315      BNE BF_FUNC         
00003262                           316      
00003262  568D                     317      ADD.L #3,A5         ; starting address    
00003264  2C4D                     318      MOVE.L A5,A6
00003266  6100 02CA                319      BSR FIND_END
0000326A  6100 041C                320      BSR COMMAND_PARSE
0000326E  4A41                     321      TST D1
00003270  6600 0022                322      BNE MS_ERR
00003274  2A00                     323      MOVE.L D0,D5        ; address1 goes in D5
00003276  528E                     324      ADD.L #1,A6         ; getting the data to store
00003278  2A4E                     325      MOVE.L A6,A5        
0000327A  4DF8 200C                326      LEA INPUT,A6
0000327E  DDC6                     327      ADDA.L D6,A6        
00003280  200E                     328      MOVE.L A6,D0
00003282  908D                     329      SUB.L  A5,D0        ; getting size of bytes to move for BMOV
00003284  5280                     330      ADDI.L #1,D0        
00003286  2C45                     331      MOVE.L D5,A6    
00003288  6100 062C                332      BSR BMOV            ; Call BMOV func for implementation 
0000328C  4CDF 7FFF                333      MOVEM.L (SP)+, A0-A6/D0-D7
00003290  6000 FDB6                334      BRA SHELL
00003294                           335      
00003294                           336  MS_ERR:
00003294  6100 01E8                337      BSR MSHELP
00003298  4CDF 7FFF                338      MOVEM.L (SP)+, A0-A6/D0-D7
0000329C  6000 FDAA                339      BRA SHELL    
000032A0                           340      
000032A0                           341      
000032A0                           342  BF_FUNC:
000032A0  4DF8 208C                343      LEA BFCOMMAND,A6        ; put BF into A6
000032A4  303C 0002                344      MOVE.W #2,D0
000032A8  6100 029E                345      BSR CHECK_MATCH
000032AC  4A40                     346      TST.W D0
000032AE  6000 0058                347      BRA BSCH_FUNC
000032B2                           348      
000032B2                           349      *implement bf
000032B2  568D                     350      ADD.L #3,A5         ; getting address1   
000032B4  2C4D                     351      MOVE.L A5,A6
000032B6  6100 027A                352      BSR FIND_END
000032BA  6100 03CC                353      BSR COMMAND_PARSE
000032BE  4A41                     354      TST D1
000032C0  6600 003A                355      BNE BF_ERR
000032C4  2A00                     356      MOVE.L D0,D5        ; D5 has address1
000032C6  528E                     357      ADD.L #1,A6
000032C8  2A4E                     358      MOVE.L A6,A5
000032CA  6100 0266                359      BSR FIND_END        ; getting address2
000032CE  6100 03B8                360      BSR COMMAND_PARSE         
000032D2  2800                     361      MOVE.L D0,D4        ; D4 has address2
000032D4  4A41                     362      TST D1
000032D6  6600 0024                363      BNE BF_ERR
000032DA  528E                     364      ADD.L #1,A6
000032DC  2A4E                     365      MOVE.L A6,A5        
000032DE  6100 0252                366      BSR FIND_END        ; getting data to fill blocks with
000032E2  6100 03A4                367      BSR COMMAND_PARSE        
000032E6  4A41                     368      TST D1
000032E8  6600 0012                369      BNE BF_ERR
000032EC  2A45                     370      MOVE.L D5,A5        ; address1
000032EE  2C44                     371      MOVE.L D4,A6        ; address2
000032F0  6100 05DA                372      BSR BF
000032F4  4CDF 7FFF                373      MOVEM.L (SP)+, A0-A6/D0-D7
000032F8  6000 FD4E                374      BRA SHELL
000032FC                           375      
000032FC                           376  BF_ERR:
000032FC  6100 01BC                377      BSR BFHELP
00003300  4CDF 7FFF                378      MOVEM.L (SP)+, A0-A6/D0-D7
00003304  6000 FD42                379      BRA SHELL   
00003308                           380  
00003308                           381  BSCH_FUNC:
00003308  4DF8 2094                382      LEA BSCHCOMMAND,A6  ; PUT bsch IN a6
0000330C  303C 0004                383      MOVE.W #4,D0
00003310  6100 0236                384      BSR CHECK_MATCH
00003314  4A40                     385      TST.W D0            
00003316  6600 0052                386      BNE GO_FUNC
0000331A                           387      
0000331A                           388      
0000331A  5A8D                     389      ADD.L #5,A5         ;Start address    
0000331C  2C4D                     390      MOVE.L A5,A6
0000331E  6100 0212                391      BSR FIND_END
00003322  6100 0364                392      BSR COMMAND_PARSE
00003326  4A41                     393      TST D1
00003328  6600 0034                394      BNE BSCH_ERR
0000332C  2040                     395      MOVE.L D0,A0        
0000332E  528E                     396      ADD.L #1,A6
00003330  2A4E                     397      MOVE.L A6,A5
00003332  6100 01FE                398      BSR FIND_END
00003336  6100 0350                399      BSR COMMAND_PARSE
0000333A  4A41                     400      TST D1
0000333C  6600 0020                401      BNE BSCH_ERR
00003340  2240                     402      MOVE.L D0,A1        ;second address
00003342  528E                     403      ADD.L #1,A6         ; getting stirng to find
00003344  2A4E                     404      MOVE.L A6,A5        
00003346  4DF8 200C                405      LEA INPUT,A6
0000334A  DDC6                     406      ADDA.L D6,A6        
0000334C  200E                     407      MOVE.L A6,D0
0000334E  908D                     408      SUB.L  A5,D0        
00003350  2600                     409      MOVE.L D0,D3        
00003352  6100 087E                410      BSR BSCH
00003356  4CDF 7FFF                411      MOVEM.L (SP)+, A0-A6/D0-D7
0000335A  6000 FCEC                412      BRA SHELL
0000335E                           413  BSCH_ERR:
0000335E  6100 0182                414      BSR BSCHHELP
00003362  4CDF 7FFF                415      MOVEM.L (SP)+, A0-A6/D0-D7
00003366  6000 FCE0                416      BRA SHELL
0000336A                           417      
0000336A                           418  GO_FUNC:
0000336A  4DF8 2099                419      LEA GOCOMMAND,A6    ; put go in A6
0000336E  303C 0002                420      MOVE.W #2,D0
00003372  6100 01D4                421      BSR CHECK_MATCH          
00003376  4A40                     422      TST.W D0
00003378  6600 002C                423      BNE DF_FUNC
0000337C                           424      
0000337C  568D                     425      ADD.L #3,A5         ; get start address     
0000337E  2C4D                     426      MOVE.L A5,A6
00003380  6100 01B0                427      BSR FIND_END
00003384  6100 0302                428      BSR COMMAND_PARSE
00003388  4A41                     429      TST D1
0000338A  6600 000E                430      BNE GO_ERR
0000338E  21C0 2594                431      MOVE.L D0,REG_STORE   ; put starting address of program in memory
00003392  4CDF 7FFF                432      MOVEM.L (SP)+, A0-A6/D0-D7
00003396  6000 0544                433      BRA GO
0000339A                           434      
0000339A                           435  GO_ERR:
0000339A  4CDF 7FFF                436      MOVEM.L (SP)+, A0-A6/D0-D7
0000339E  6100 0156                437      BSR GOHELP
000033A2  6000 FCA4                438      BRA SHELL
000033A6                           439      
000033A6                           440  DF_FUNC:
000033A6  4DF8 209C                441      LEA DFCOMMAND,A6    ; putting DF ni A6
000033AA  303C 0002                442      MOVE.W #2,D0
000033AE  6100 0198                443      BSR CHECK_MATCH
000033B2  4A40                     444      TST.W D0            
000033B4  6600 001A                445      BNE FONT_FUNC
000033B8                           446      
000033B8                           447  PC_VAL:
000033B8  21FC 000033B8 258E       448      MOVE.L #PC_VAL,PC_STORE ; put PC in storage location to print out later
000033C0  40F8 2594                449      MOVE.W SR,REG_STORE       ; get SR data 
000033C4  4CDF 7FFF                450      MOVEM.L (SP)+, A0-A6/D0-D7  
000033C8  6100 0574                451      BSR DF
000033CC  6000 FC7A                452      BRA SHELL
000033D0                           453      
000033D0                           454  FONT_FUNC:
000033D0  4DF8 20A8                455      LEA FONT,A6
000033D4  303C 0004                456      MOVE.W #4,D0
000033D8  6100 016E                457      BSR CHECK_MATCH          
000033DC  4A40                     458      TST.W D0
000033DE  6600 002C                459      BNE ECHO_FUNC
000033E2                           460      
000033E2  5A8D                     461      ADD.L #5,A5         ; address into A5     
000033E4  2C4D                     462      MOVE.L A5,A6
000033E6  6100 014A                463      BSR FIND_END
000033EA  6100 029C                464      BSR COMMAND_PARSE
000033EE  4A41                     465      TST D1
000033F0  6600 000E                466      BNE FONT_ERR
000033F4  2200                     467      MOVE.L D0,D1    ;value to change font color stored in D1
000033F6  103C 0015                468      MOVE.B #21,D0
000033FA  4E4F                     469      TRAP #15        ;change font color
000033FC  6000 FC4A                470      BRA SHELL
00003400                           471      
00003400                           472  FONT_ERR:
00003400  4CDF 7FFF                473      MOVEM.L (SP)+, A0-A6/D0-D7
00003404  6100 00F0                474      BSR GOHELP
00003408  6000 FC3E                475      BRA SHELL
0000340C                           476      
0000340C                           477      
0000340C                           478  ECHO_FUNC:
0000340C  4DF8 20AD                479      LEA ECHOCOMMAND,A6
00003410  303C 0004                480      MOVE.W #4,D0
00003414  6100 0132                481      BSR CHECK_MATCH          
00003418  4A40                     482      TST.W D0
0000341A  6600 002A                483      BNE EXIT_FUNC
0000341E                           484      
0000341E  5A8D                     485      ADD.L #5,A5         ; address into A5     
00003420  2C4D                     486      MOVE.L A5,A6
00003422  6100 010E                487      BSR FIND_END
00003426  6100 0260                488      BSR COMMAND_PARSE
0000342A  324D                     489      MOVE.W A5,A1
0000342C  9DCD                     490      SUB.L A5,A6
0000342E  320E                     491      MOVE.W A6,D1
00003430  303C 000D                492      MOVE.W #13,D0
00003434  4E4F                     493      TRAP #15        ; print out text
00003436  6000 FC10                494      BRA SHELL
0000343A                           495      
0000343A                           496  ECHO_ERR:
0000343A  4CDF 7FFF                497      MOVEM.L (SP)+, A0-A6/D0-D7
0000343E  6100 00B6                498      BSR GOHELP
00003442  6000 FC04                499      BRA SHELL
00003446                           500      
00003446                           501      
00003446                           502  
00003446                           503  EXIT_FUNC:
00003446  4DF8 209F                504      LEA EXITCOMMAND,A6
0000344A  303C 0004                505      MOVE.W #4,D0
0000344E  6100 00F8                506      BSR CHECK_MATCH
00003452  4A40                     507      TST.W D0           
00003454  6600 0008                508      BNE ERR 
00003458                           509      
00003458  303C 0009                510      MOVE.W #9,D0    ; 9 terminates the program
0000345C  4E4F                     511      TRAP #15   
0000345E                           512      
0000345E                           513  ERR:
0000345E  6100 00AA                514      BSR ALL_HELP_PROMPTS
00003462  4CDF 7FFF                515      MOVEM.L (SP)+, A0-A6/D0-D7
00003466  6000 FBE0                516      BRA SHELL
0000346A                           517  
0000346A                           518  MMHELP:
0000346A  48E7 8040                519      MOVEM.L D0/A1, -(SP)
0000346E  43F8 21B5                520      LEA MMHELPPROMPT, A1
00003472  103C 000D                521      MOVE.B #13,D0  
00003476  4E4F                     522      TRAP #15
00003478  4CDF 0201                523      MOVEM.L (SP)+, D0/A1
0000347C  4E75                     524      RTS
0000347E                           525      
0000347E                           526  MSHELP:
0000347E  48E7 8040                527      MOVEM.L D0/A1, -(SP)
00003482  43F8 221D                528      LEA MSHELPPROMPT, A1
00003486  103C 000D                529      MOVE.B #13,D0
0000348A  4E4F                     530      TRAP #15
0000348C  4CDF 0201                531      MOVEM.L (SP)+, D0/A1
00003490  4E75                     532      RTS
00003492                           533  
00003492                           534  SORTWHELP:
00003492  48E7 8040                535      MOVEM.L D0/A1, -(SP)
00003496  43F8 212A                536      LEA SORTWHELPPROMPT, A1
0000349A  103C 000D                537      MOVE.B #13,D0
0000349E  4E4F                     538      TRAP #15
000034A0  4CDF 0201                539      MOVEM.L (SP)+, D0/A1
000034A4  4E75                     540      RTS
000034A6                           541      
000034A6                           542  MDSPHELP:
000034A6  48E7 8040                543      MOVEM.L D0/A1, -(SP)
000034AA  43F8 20CB                544      LEA MDSPHELPPROMPT, A1
000034AE  103C 000D                545      MOVE.B #13,D0
000034B2  4E4F                     546      TRAP #15
000034B4  4CDF 0201                547      MOVEM.L (SP)+, D0/A1
000034B8  4E75                     548      RTS
000034BA                           549      
000034BA                           550  BFHELP:
000034BA  48E7 8040                551      MOVEM.L D0/A1, -(SP)
000034BE  43F8 22EB                552      LEA BFHELPPROMPT, A1
000034C2  103C 000D                553      MOVE.B #13,D0
000034C6  4E4F                     554      TRAP #15
000034C8  4CDF 0201                555      MOVEM.L (SP)+, D0/A1
000034CC  4E75                     556      RTS
000034CE                           557  
000034CE                           558  BMOVHELP:
000034CE  48E7 8040                559      MOVEM.L D0/A1, -(SP)
000034D2  43F8 228F                560      LEA BMOVHELPPROMPT, A1
000034D6  103C 000D                561      MOVE.B #13,D0
000034DA  4E4F                     562      TRAP #15
000034DC  4CDF 0201                563      MOVEM.L (SP)+, D0/A1
000034E0  4E75                     564      RTS
000034E2                           565      
000034E2                           566  BSCHHELP:
000034E2  48E7 8040                567      MOVEM.L D0/A1, -(SP)
000034E6  43F8 235F                568      LEA BSCHHELPPROMPT, A1
000034EA  103C 000D                569      MOVE.B #13,D0
000034EE  4E4F                     570      TRAP #15
000034F0  4CDF 0201                571      MOVEM.L (SP)+, D0/A1
000034F4  4E75                     572      RTS
000034F6                           573  
000034F6                           574  GOHELP:
000034F6  48E7 8040                575      MOVEM.L D0/A1, -(SP)
000034FA  43F8 23CD                576      LEA GOHELPPROMPT, A1
000034FE  103C 000D                577      MOVE.B #13,D0
00003502  4E4F                     578      TRAP #15
00003504  4CDF 0201                579      MOVEM.L (SP)+, D0/A1
00003508  4E75                     580      RTS
0000350A                           581  
0000350A                           582  
0000350A                           583  ALL_HELP_PROMPTS:
0000350A  6100 FF5E                584      BSR MMHELP
0000350E  6182                     585      BSR SORTWHELP
00003510  6194                     586      BSR MDSPHELP
00003512  6100 FF6A                587      BSR MSHELP
00003516  61A2                     588      BSR BFHELP
00003518  61B4                     589      BSR BMOVHELP
0000351A  61C6                     590      BSR BSCHHELP
0000351C  61D8                     591      BSR GOHELP
0000351E  48E7 8040                592      MOVEM.L D0/A1, -(SP)
00003522  43F8 2407                593      LEA DFHELPPROMPT, A1
00003526  103C 000D                594      MOVE.B #13,D0
0000352A  4E4F                     595      TRAP #15
0000352C  4CDF 0201                596      MOVEM.L (SP)+, D0/A1
00003530  4E75                     597      RTS
00003532                           598      
00003532                           599  *Finds end of string. Either char is a 0 or it's empty COLON
00003532                           600  FIND_END:    
00003532  0C16 0000                601      CMP.B #0,(A6)   ; check if we are at end
00003536  6700 000E                602      BEQ END_FOUND
0000353A  0C16 0020                603      CMP.B #' ',(A6) ; check if we are at end
0000353E  6700 0006                604      BEQ END_FOUND
00003542  528E                     605      ADDA.L #1,A6    ; keep searching 
00003544  60EC                     606      BRA FIND_END
00003546                           607      
00003546                           608  END_FOUND:
00003546  4E75                     609      RTS
00003548                           610      
00003548                           611   *compare strings
00003548                           612  CHECK_MATCH:     
00003548  48E7 0006                613      MOVEM.L A5/A6, -(SP) ;strings are in A5 and A6
0000354C  4A40                     614      TST D0          ; length of input string is in D0.
0000354E  6700 001A                615      BEQ NO_MATCH     ; if string length is 0 they're not equal
00003552  5380                     616      SUB.L #1,D0
00003554                           617  FOR_C_IN_STRING:
00003554  BD0D                     618      CMP.B (A5)+,(A6)+   ; compare characters byte by byte
00003556  6600 0012                619      BNE NO_MATCH        ; byte not equal? string is not equal
0000355A  4A40                     620      TST.W D0            ; compared all the characters in the string?
0000355C  57C8 FFF6                621      DBEQ.W D0,FOR_C_IN_STRING    ;  DO AT MOST D0 COMPARISONS
00003560  6000 0002                622      BRA MATCH            ; finshed comparing and strings are equal.
00003564                           623      
00003564                           624  MATCH:
00003564  4CDF 6000                625      MOVEM.L (SP)+, A5/A6  ;D0 will = 0, signifying a match
00003568  4E75                     626      RTS
0000356A                           627  NO_MATCH:
0000356A  7001                     628      MOVE.L #1,D0        ; return 1 to signify no match
0000356C  4CDF 6000                629      MOVEM.L (SP)+, A5/A6
00003570  4E75                     630      RTS
00003572                           631      
00003572                           632  
00003572                           633  TRAPING_HOES:
00003572  5C8F                     634      ADD.L #6,SP        
00003574  4CDF FFFF                635      MOVEM.L (A7)+,A0-A7/D0-D7
00003578  4E75                     636      RTS
0000357A                           637      
0000357A                           638      
0000357A                           639  ADDRESS_ERRORV:
0000357A  48E7 E040                640      MOVEM.L A1/D0-D2, -(SP)
0000357E  700E                     641      MOVE.L #14,D0
00003580  43F8 24A0                642      LEA ADDRESS_ER,A1  ;print ADDRESS:
00003584  4E4F                     643      TRAP #15
00003586                           644      
00003586  143C 0010                645      MOVE.B #16,D2
0000358A  700D                     646      MOVE.L #13,D0
0000358C  43F8 243E                647      LEA NL,A1
00003590  4E4F                     648      TRAP #15
00003592  21EF 001A 258E           649      MOVE.L (26,A7),PC_STORE
00003598  31EF 0018 2594           650      MOVE.W (24,A7),REG_STORE   ; get SR
0000359E  4CDF 0207                651      MOVEM.L (SP)+, A1/D0-D2
000035A2  6100 039A                652      BSR DF  ; Use Display registers to print out registers and content 
000035A6  DFFC 0000000E            653      ADD.L #14,SP     
000035AC  4EF8 3048                654      JMP SHELL
000035B0                           655  
000035B0                           656  ILLEGAL_INSTRV:
000035B0  48E7 8040                657      MOVEM.L A1/D0, -(SP)
000035B4  700D                     658      MOVE.L #13,D0
000035B6  43F8 24B4                659      LEA ILLEGAL_ER,A1   ; print iilegal instruction erorr
000035BA  4E4F                     660      TRAP #15
000035BC  4CDF 0201                661      MOVEM.L (SP)+, A1/D0
000035C0  31D7 2594                662      MOVE.W (A7),REG_STORE   ; put sr in regstore
000035C4  21EF 0002 258E           663      MOVE.L (2,A7),PC_STORE
000035CA  6100 0372                664      BSR DF          
000035CE  5C8F                     665      ADD.L #6,SP     
000035D0  4EF8 3048                666      JMP SHELL
000035D4                           667      
000035D4                           668  PRIVALEGEV:
000035D4  48E7 8040                669      MOVEM.L A1/D0, -(SP)
000035D8  700D                     670      MOVE.L #13,D0
000035DA  43F8 24D3                671      LEA PRIVALAGE_ER,A1
000035DE  4E4F                     672      TRAP #15
000035E0  4CDF 0201                673      MOVEM.L (SP)+, A1/D0
000035E4  31D7 2594                674      MOVE.W (A7),REG_STORE   
000035E8  21EF 0002 258E           675      MOVE.L (2,A7),PC_STORE
000035EE  6100 034E                676      BSR DF          
000035F2  5C8F                     677      ADD.L #6,SP     
000035F4  4EF8 3048                678      JMP SHELL
000035F8                           679  
000035F8                           680  DIVIDE_ZEROV:
000035F8  48E7 8040                681      MOVEM.L A1/D0, -(SP)
000035FC  700D                     682      MOVE.L #13,D0
000035FE  43F8 24F1                683      LEA DIVIDE_Z_ER,A1
00003602  4E4F                     684      TRAP #15
00003604  4CDF 0201                685      MOVEM.L (SP)+, A1/D0
00003608  31D7 2594                686      MOVE.W (A7),REG_STORE   
0000360C  21EF 0002 258E           687      MOVE.L (2,A7),PC_STORE
00003612  6100 032A                688      BSR DF          
00003616  5C8F                     689      ADD.L #6,SP     
00003618  4EF8 3048                690      JMP SHELL
0000361C                           691      
0000361C                           692  CHECK_INSTRV:
0000361C  48E7 8040                693      MOVEM.L A1/D0, -(SP)
00003620  700D                     694      MOVE.L #13,D0
00003622  43F8 2503                695      LEA CHECK_ER,A1
00003626  4E4F                     696      TRAP #15
00003628  4CDF 0201                697      MOVEM.L (SP)+, A1/D0
0000362C  31D7 2594                698      MOVE.W (A7),REG_STORE   
00003630  21EF 0002 258E           699      MOVE.L (2,A7),PC_STORE
00003636  6100 0306                700      BSR DF          
0000363A  5C8F                     701      ADD.L #6,SP     
0000363C  4EF8 3048                702      JMP SHELL
00003640                           703    
00003640                           704  LINEAV:
00003640  48E7 8040                705      MOVEM.L A1/D0, -(SP)
00003644  700D                     706      MOVE.L #13,D0
00003646  43F8 251B                707      LEA LINEA_ER,A1
0000364A  4E4F                     708      TRAP #15
0000364C  4CDF 0201                709      MOVEM.L (SP)+, A1/D0
00003650  31D7 2594                710      MOVE.W (A7),REG_STORE   
00003654  21EF 0002 258E           711      MOVE.L (2,A7),PC_STORE
0000365A  6100 02E2                712      BSR DF          
0000365E  5C8F                     713      ADD.L #6,SP     
00003660  4EF8 3048                714      JMP SHELL
00003664                           715      
00003664                           716  LINEFV:
00003664  48E7 8040                717      MOVEM.L A1/D0, -(SP)
00003668  700D                     718      MOVE.L #13,D0
0000366A  43F8 2535                719      LEA LINEF_ER,A1
0000366E  4E4F                     720      TRAP #15
00003670  4CDF 0201                721      MOVEM.L (SP)+, A1/D0
00003674  31D7 2594                722      MOVE.W (A7),REG_STORE   
00003678  21EF 0002 258E           723      MOVE.L (2,A7),PC_STORE
0000367E  6100 02BE                724      BSR DF          
00003682  5C8F                     725      ADD.L #6,SP     
00003684  4EF8 3048                726      JMP SHELL
00003688                           727  
00003688                           728      
00003688                           729      
00003688                           730  * Parses arguments for a valid command.
00003688                           731  COMMAND_PARSE:            
00003688  48E7 3F46                732      MOVEM.L A1/A5/A6/D2-D7, -(SP)  
0000368C  4280                     733      CLR.L D0
0000368E  4281                     734      CLR.L D1
00003690  7400                     735      MOVE.L #0, D2   
00003692  0C1D 0024                736      CMP.B #$24,(A5)+ ;checking for $
00003696  6600 0056                737      BNE PARSE_ERR
0000369A  224E                     738      MOVE.L A6,A1
0000369C  93CD                     739      SUB.L A5,A1
0000369E  B3FC 00000008            740      CMP.L #8,A1
000036A4  6E00 0048                741      BGT PARSE_ERR
000036A8                           742      
000036A8                           743  FOR_PARSE:
000036A8  BCCD                     744      CMP A5,A6       ; check if eat ennd of command
000036AA  6F00 0044                745      BLE PARSE_DONE
000036AE  4283                     746      CLR.L D3        ; use D3 to check
000036B0  1626                     747      MOVE.B -(A6),D3
000036B2  B63C 0046                748      CMP.B #'F',D3   ; bigger than 16 Hex?
000036B6  6E00 0036                749      BGT PARSE_ERR
000036BA  B63C 0030                750      CMP.B #'0',D3   ; negative
000036BE  6D00 002E                751      BLT PARSE_ERR
000036C2  B63C 0039                752      CMP.B #'9',D3
000036C6  6F00 000E                753      BLE NUM_CHECK   ; WITHIN 0-9 OR A-F?
000036CA  B63C 0041                754      CMP.B #'A',D3
000036CE  6C00 0012                755      BGE HEX_CHECK
000036D2  6000 001A                756      BRA PARSE_ERR
000036D6                           757      
000036D6                           758  NUM_CHECK:
000036D6  0403 0030                759      SUBI.B #$30,D3  
000036DA  E5AB                     760      LSL.L D2,D3
000036DC  8083                     761      OR.L D3,D0
000036DE  5802                     762      ADD.B #4,D2    
000036E0  60C6                     763      BRA FOR_PARSE
000036E2                           764      
000036E2                           765  HEX_CHECK:
000036E2  0403 0037                766      SUBI.B #55,D3 
000036E6  E5AB                     767      LSL.L D2,D3
000036E8  8083                     768      OR.L D3,D0
000036EA  5802                     769      ADD.B #4,D2     
000036EC  60BA                     770      BRA FOR_PARSE
000036EE                           771    
000036EE                           772  PARSE_ERR:
000036EE  5201                     773      ADDI.B #1,D1    
000036F0                           774  PARSE_DONE:
000036F0  4CDF 62FC                775      MOVEM.L (SP)+, A1/A5/A6/D2-D7
000036F4  4E75                     776      RTS
000036F6                           777      
000036F6                           778  MDSP:                    
000036F6  48E7 FFFE                779      MOVEM.L A0-A6/D0-D7,-(SP)
000036FA  BDFC 00000000            780      CMP.L #0, A6
00003700  6600 0008                781      BNE MD
00003704  DDFC 00000010            782      ADD.L #16, A6   ; if A6=0 add 16 to get the end address.
0000370A                           783  MD:
0000370A  143C 0010                784      MOVE.B #16,D2   ; base of number to display for trap function
0000370E  43F8 2581                785      LEA ADDRESS,A1  ; ADDRESS prompt to print
00003712  103C 000E                786      MOVE.B #14,D0
00003716  4E4F                     787      TRAP #15        ;Display the NULL terminated string pointed to by (A1).
00003718  220D                     788      MOVE.L A5,D1
0000371A  103C 000F                789      MOVE.B #15,D0   ;Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B. 
0000371E  4E4F                     790      TRAP #15        
00003720  43F8 258A                791      LEA COLON,A1    ; put a COLON
00003724  103C 000E                792      MOVE.B #14,D0
00003728  4E4F                     793      TRAP #15        ; 
0000372A  4281                     794      CLR.L D1
0000372C  121D                     795      MOVE.B (A5)+,D1 ; move contents pointed to by A5 to D1 to display 
0000372E  103C 000F                796      MOVE.B #15,D0
00003732  4E4F                     797      TRAP #15        ; display D1 contents (data)
00003734  43F8 243E                798      LEA NL,A1
00003738  103C 000D                799      MOVE.B #13,D0
0000373C  4E4F                     800      TRAP #15        ; print empty space for new input
0000373E  BCCD                     801      CMP A5,A6       ; are we at address2?
00003740  6CC8                     802      BGE MD          ; keep going if we're not
00003742  4CDF 7FFF                803      MOVEM.L (SP)+,A0-A6/D0-D7
00003746  4E75                     804      RTS
00003748                           805  
00003748                           806      
00003748                           807  MM:        
00003748  48E7 FFFE                808      MOVEM.L A0-A6/D0-D7,-(SP)
0000374C  BE7C 0001                809      CMP #1, D7
00003750  6700 007A                810      BEQ MM_WORD
00003754  BE7C 0002                811      CMP #2, D7
00003758  6700 00E2                812      BEQ MM_LONG
0000375C                           813      
0000375C                           814  MM_BYTE:        
0000375C  5388                     815      SUBA.L #1, A0    
0000375E                           816  BLOOP:    
0000375E  143C 0010                817      MOVE.B #16,D2   
00003762  5248                     818      ADDA #1, A0     ; increment to the next Bbyte 
00003764  43F8 2581                819      LEA ADDRESS,A1  
00003768  103C 000E                820      MOVE.B #14,D0   ; address
0000376C  4E4F                     821      TRAP #15
0000376E  2208                     822      MOVE.L A0,D1
00003770  103C 000F                823      MOVE.B #15,D0   
00003774  4E4F                     824      TRAP #15
00003776  43F8 258A                825      LEA COLON,A1
0000377A  103C 000E                826      MOVE.B #14,D0
0000377E  4E4F                     827      TRAP #15
00003780  4281                     828      CLR.L D1
00003782  1210                     829      MOVE.B (A0),D1  ; moving data to D1
00003784  103C 000F                830      MOVE.B #15,D0   ; printing data
00003788  4E4F                     831      TRAP #15        
0000378A  43F8 258A                832      LEA COLON,A1
0000378E  103C 000E                833      MOVE.B #14,D0   
00003792  4E4F                     834      TRAP #15
00003794  43F8 200C                835      LEA INPUT,A1
00003798  103C 0002                836      MOVE.B #2,D0    ; waiting for user input
0000379C  4E4F                     837      TRAP #15
0000379E  B27C 0000                838      CMP.W #0,D1     ; if enter was hit, and not input. Restart
000037A2  67BA                     839      BEQ BLOOP
000037A4  0C11 002E                840      CMP.B #$2E,(A1)   ; if we get a period, finish.
000037A8  6700 0106                841      BEQ MM_EXIT
000037AC  B27C 0003                842      CMP.W #3,D1          
000037B0  6600 00FA                843      BNE MMERR       ; print an error if we get incorret number of charcters
000037B4  4BF8 200C                844      LEA INPUT,A5
000037B8  4DF8 200C                845      LEA INPUT,A6
000037BC  DCC1                     846      ADDA D1,A6
000037BE  6100 FEC8                847      BSR COMMAND_PARSE
000037C2  4A41                     848      TST D1
000037C4  6600 00E6                849      BNE MMERR       
000037C8  1080                     850      MOVE.B D0,(A0)  
000037CA  6092                     851      BRA BLOOP
000037CC                           852      
000037CC                           853  MM_WORD:           
000037CC  5588                     854      SUBA.L #2, A0    
000037CE                           855  MMWLOOP:    
000037CE  143C 0010                856      MOVE.B #16,D2   ; setting base number to print from
000037D2  5448                     857      ADDA #2, A0     ; increment to the next wORD
000037D4  43F8 2581                858      LEA ADDRESS,A1  
000037D8  103C 000E                859      MOVE.B #14,D0   
000037DC  4E4F                     860      TRAP #15
000037DE  2208                     861      MOVE.L A0,D1
000037E0  103C 000F                862      MOVE.B #15,D0   
000037E4  4E4F                     863      TRAP #15        ; print address
000037E6  43F8 258A                864      LEA COLON,A1    
000037EA  103C 000E                865      MOVE.B #14,D0
000037EE  4E4F                     866      TRAP #15
000037F0  4281                     867      CLR.L D1
000037F2  3210                     868      MOVE.W (A0),D1  ; moving data pointed to by A1 to D1 for printing
000037F4  103C 000F                869      MOVE.B #15,D0
000037F8  4E4F                     870      TRAP #15        ; print current data at this address
000037FA  43F8 258A                871      LEA COLON,A1
000037FE  103C 000E                872      MOVE.B #14,D0   
00003802  4E4F                     873      TRAP #15
00003804  43F8 200C                874      LEA INPUT,A1
00003808  103C 0002                875      MOVE.B #2,D0    ; wait for input from user
0000380C  4E4F                     876      TRAP #15
0000380E  B27C 0000                877      CMP.W #0,D1     ; if enter was hit, and not input. Restart
00003812  67BA                     878      BEQ MMWLOOP
00003814  0C11 002E                879      CMP.B #$2E,(A1)   ; if we get a period, finish
00003818  6700 0096                880      BEQ MM_EXIT
0000381C  B27C 0005                881      CMP.W #5,D1       ; 4 character comparison   
00003820  6600 008A                882      BNE MMERR
00003824  4BF8 200C                883      LEA INPUT,A5
00003828  4DF8 200C                884      LEA INPUT,A6
0000382C  DCC1                     885      ADDA D1,A6
0000382E  6100 FE58                886      BSR COMMAND_PARSE
00003832  4A41                     887      TST D1
00003834  6600 0076                888      BNE MMERR      
00003838  3080                     889      MOVE.W D0,(A0)  ; Move data
0000383A  6092                     890      BRA MMWLOOP
0000383C                           891  
0000383C                           892  MM_LONG:             ;BYTE SIZE MM
0000383C  5988                     893      SUBA.L #4, A0     ; SUBTRACT JUST THE FIRST TIME
0000383E                           894  MMLLOOP:    
0000383E  143C 0010                895      MOVE.B #16,D2   
00003842  5848                     896      ADDA #4, A0     
00003844  43F8 2581                897      LEA ADDRESS,A1  
00003848  103C 000E                898      MOVE.B #14,D0   
0000384C  4E4F                     899      TRAP #15
0000384E  2208                     900      MOVE.L A0,D1
00003850  103C 000F                901      MOVE.B #15,D0   
00003854  4E4F                     902      TRAP #15
00003856  43F8 258A                903      LEA COLON,A1    
0000385A  103C 000E                904      MOVE.B #14,D0
0000385E  4E4F                     905      TRAP #15
00003860  4281                     906      CLR.L D1
00003862  2210                     907      MOVE.L (A0),D1  
00003864  103C 000F                908      MOVE.B #15,D0
00003868  4E4F                     909      TRAP #15        
0000386A  43F8 258A                910      LEA COLON,A1
0000386E  103C 000E                911      MOVE.B #14,D0   
00003872  4E4F                     912      TRAP #15
00003874  43F8 200C                913      LEA INPUT,A1
00003878  103C 0002                914      MOVE.B #2,D0    
0000387C  4E4F                     915      TRAP #15
0000387E  B27C 0000                916      CMP.W #0,D1     
00003882  67BA                     917      BEQ MMLLOOP
00003884  0C11 002E                918      CMP.B #$2E,(A1)   
00003888  6700 0026                919      BEQ MM_EXIT
0000388C  B27C 0009                920      CMP.W #9,D1         
00003890  6600 001A                921      BNE MMERR
00003894  4BF8 200C                922      LEA INPUT,A5
00003898  4DF8 200C                923      LEA INPUT,A6
0000389C  DCC1                     924      ADDA D1,A6
0000389E  6100 FDE8                925      BSR COMMAND_PARSE
000038A2  4A41                     926      TST D1
000038A4  6600 0006                927      BNE MMERR       
000038A8  2080                     928      MOVE.L D0,(A0)  
000038AA  6092                     929      BRA MMLLOOP
000038AC                           930  
000038AC                           931  MMERR:
000038AC  6100 FBBC                932     BSR MMHELP
000038B0                           933  MM_EXIT:
000038B0  4CDF 7FFF                934     MOVEM.L (SP)+, A0-A6/D0-D7
000038B4  4E75                     935     RTS
000038B6                           936  
000038B6                           937  
000038B6                           938  BMOV:                      
000038B6  48E7 8006                939     MOVEM.L A5/A6/D0,-(SP)
000038BA  5380                     940     SUBI.L #1,D0        ; D0 has count of data to move
000038BC                           941  BMOV_LOOP:  
000038BC  1CDD                     942     MOVE.B (A5)+,(A6)+  ; move contents from location in A5 to A6
000038BE  57C8 FFFC                943     DBEQ D0,BMOV_LOOP
000038C2  6000 0002                944     BRA BMOV_EXIT
000038C6                           945           
000038C6                           946  BMOV_EXIT:         
000038C6  4CDF 6001                947     MOVEM.L (SP)+,A5/A6/D0
000038CA  4E75                     948     RTS   
000038CC                           949          
000038CC                           950  
000038CC                           951      
000038CC                           952  BF:                      
000038CC  48E7 0004                953     MOVEM.L A5,-(SP)
000038D0                           954  BF_LOOP:  
000038D0  3AC0                     955     MOVE.W D0,(A5)+  ; fill memory location with data in D0
000038D2  BCCD                     956     CMP A5,A6        ; keep going until we hit address2
000038D4  6EFA                     957     BGT BF_LOOP
000038D6  4CDF 2000                958     MOVEM.L (SP)+,A5
000038DA  4E75                     959     RTS
000038DC                           960           
000038DC                           961  
000038DC                           962    
000038DC                           963             
000038DC                           964  GO:                     
000038DC  48E7 E040                965     MOVEM.L A1/D0-D2, -(SP) 
000038E0  43F8 254F                966     LEA GO_ADDRESS,A1       ; print address
000038E4  103C 000E                967     MOVE.B #14,D0
000038E8  4E4F                     968     TRAP #15
000038EA  103C 000F                969     MOVE.B #15,D0
000038EE  2238 2594                970     MOVE.L REG_STORE,D1
000038F2  143C 0010                971     MOVE.B #16,D2      ;convert to ascii
000038F6  4E4F                     972     TRAP #15
000038F8  43F8 243E                973     LEA NL,A1
000038FC  103C 000D                974     MOVE.B #13,D0
00003900  4E4F                     975     TRAP #15
00003902  4CDF 0207                976     MOVEM.L (SP)+, A1/D0-D2
00003906  2F38 2594                977     MOVE.L REG_STORE, -(SP) 
0000390A  4E75                     978     RTS                ; be able to retunrn after
0000390C                           979            
0000390C                           980  
0000390C                           981  *sorting algorithm. DO holds value for ascending or descending         
0000390C                           982  SORTW:
0000390C  48E7 4026                983     MOVEM.L A2/A5-A6/D1, -(SP)
00003910  244D                     984     MOVE.L A5,A2         ; address1
00003912                           985     
00003912                           986  ** for i in range(1,n):
00003912                           987  **      for j in range():
00003912                           988  SORTW_FOR_I:
00003912  2A4A                     989     MOVE.L A2,A5
00003914                           990  SORTW_FOR_J:
00003914  4A00                     991     TST.B D0             ;check for order first
00003916  6700 000A                992     BEQ DESC             
0000391A  BB4D                     993     CMP.W (A5)+,(A5)+    ; start compare of elements
0000391C  6212                     994     BHI.S SWAP           ; if the value is higher, branch to swap elements       
0000391E  6000 0006                995     BRA SORTW_NEXT
00003922                           996  DESC:
00003922  BB4D                     997     CMP.W (A5)+,(A5)+    ; Compare current and next elements
00003924  650A                     998     BLO.S SWAP          
00003926                           999  SORTW_NEXT:
00003926  558D                    1000     SUBQ.L #2,A5         
00003928  BDCD                    1001     CMP.L A5,A6
0000392A  66E8                    1002     BNE SORTW_FOR_J            ; Did we reach end of string? keep going if no
0000392C  6000 000A               1003     BRA SORTW_EXIT
00003930                          1004  SWAP:
00003930  2225                    1005     MOVE.L -(A5),D1      ; get back to start of comaparison and put the two values in D1. eg. D1=11112222
00003932  4841                    1006     SWAP.W D1            ; swap the word val. D1=22221111
00003934  2A81                    1007     MOVE.L D1,(A5)       ; move the values back into memory
00003936  60DA                    1008     BRA SORTW_FOR_I      ; restart for loop after a swap
00003938                          1009     
00003938                          1010  SORTW_EXIT:  
00003938  4CDF 6402               1011     MOVEM.L (SP)+, A2/A5-A6/D1
0000393C  4E75                    1012     RTS
0000393E                          1013     
0000393E                          1014     
0000393E                          1015  DF: 
0000393E                          1016                         
0000393E  48E7 FFFF               1017      MOVEM.L A0-A7/D0-D7,-(A7)
00003942  204F                    1018      MOVE.L A7,A0
00003944                          1019      
00003944                          1020      *DO*
00003944  43F8 2468               1021      LEA D0REG, A1
00003948  143C 0010               1022      MOVE.B #16,D2
0000394C  103C 000E               1023      MOVE.B #14, D0
00003950  4E4F                    1024      TRAP #15
00003952  2210                    1025      MOVE.L (A0),D1
00003954  103C 000F               1026      MOVE.B #15, D0
00003958  4E4F                    1027      TRAP #15
0000395A  103C 000D               1028      MOVE.B #13, D0
0000395E  43F8 243E               1029      LEA NL,A1
00003962  4E4F                    1030      TRAP #15
00003964                          1031  
00003964                          1032      *D1*
00003964  43F8 246D               1033      LEA D1REG, A1
00003968  143C 0010               1034      MOVE.B #16,D2
0000396C  103C 000E               1035      MOVE.B #14, D0 
00003970  4E4F                    1036      TRAP #15
00003972  2228 0004               1037      MOVE.L (4,A0),D1
00003976  103C 000F               1038      MOVE.B #15, D0
0000397A  4E4F                    1039      TRAP #15
0000397C  103C 000D               1040      MOVE.B #13, D0
00003980  43F8 243E               1041      LEA NL,A1
00003984  4E4F                    1042      TRAP #15
00003986                          1043  
00003986                          1044      
00003986                          1045      *D2*
00003986  43F8 2472               1046      LEA D2REG, A1
0000398A  143C 0010               1047      MOVE.B #16,D2
0000398E  103C 000E               1048      MOVE.B #14, D0 
00003992  4E4F                    1049      TRAP #15
00003994  2228 0008               1050      MOVE.L (8,A0),D1
00003998  103C 000F               1051      MOVE.B #15, D0
0000399C  4E4F                    1052      TRAP #15
0000399E  103C 000D               1053      MOVE.B #13, D0
000039A2  43F8 243E               1054      LEA NL,A1
000039A6  4E4F                    1055      TRAP #15
000039A8                          1056  
000039A8                          1057  
000039A8                          1058      *D3*
000039A8  43F8 2477               1059      LEA D3REG, A1
000039AC  143C 0010               1060      MOVE.B #16,D2
000039B0  103C 000E               1061      MOVE.B #14, D0 
000039B4  4E4F                    1062      TRAP #15
000039B6  2228 000C               1063      MOVE.L (12,A0),D1
000039BA  103C 000F               1064      MOVE.B #15, D0
000039BE  4E4F                    1065      TRAP #15
000039C0  103C 000D               1066      MOVE.B #13, D0
000039C4  43F8 243E               1067      LEA NL,A1
000039C8  4E4F                    1068      TRAP #15
000039CA                          1069      
000039CA                          1070      *D4*
000039CA  43F8 247C               1071      LEA D4REG, A1
000039CE  143C 0010               1072      MOVE.B #16,D2
000039D2  103C 000E               1073      MOVE.B #14, D0 
000039D6  4E4F                    1074      TRAP #15
000039D8  2228 0010               1075      MOVE.L (16,A0),D1
000039DC  103C 000F               1076      MOVE.B #15, D0
000039E0  4E4F                    1077      TRAP #15
000039E2  103C 000D               1078      MOVE.B #13, D0
000039E6  43F8 243E               1079      LEA NL,A1
000039EA  4E4F                    1080      TRAP #15
000039EC                          1081      
000039EC                          1082      *D5*
000039EC  43F8 2481               1083      LEA D5REG, A1
000039F0  143C 0010               1084      MOVE.B #16,D2
000039F4  103C 000E               1085      MOVE.B #14, D0 
000039F8  4E4F                    1086      TRAP #15
000039FA  2228 0014               1087      MOVE.L (20,A0),D1
000039FE  103C 000F               1088      MOVE.B #15, D0
00003A02  4E4F                    1089      TRAP #15
00003A04  103C 000D               1090      MOVE.B #13, D0
00003A08  43F8 243E               1091      LEA NL,A1
00003A0C  4E4F                    1092      TRAP #15
00003A0E                          1093      
00003A0E                          1094      *D6*
00003A0E  43F8 2486               1095      LEA D6REG, A1
00003A12  143C 0010               1096      MOVE.B #16,D2
00003A16  103C 000E               1097      MOVE.B #14, D0 
00003A1A  4E4F                    1098      TRAP #15
00003A1C  2228 0018               1099      MOVE.L (24,A0),D1
00003A20  103C 000F               1100      MOVE.B #15, D0
00003A24  4E4F                    1101      TRAP #15
00003A26  103C 000D               1102      MOVE.B #13, D0
00003A2A  43F8 243E               1103      LEA NL,A1
00003A2E  4E4F                    1104      TRAP #15
00003A30                          1105      
00003A30                          1106      *D7*
00003A30  43F8 248B               1107      LEA D7REG, A1
00003A34  143C 0010               1108      MOVE.B #16,D2
00003A38  103C 000E               1109      MOVE.B #14, D0 
00003A3C  4E4F                    1110      TRAP #15
00003A3E  2228 001C               1111      MOVE.L (28,A0),D1
00003A42  103C 000F               1112      MOVE.B #15, D0
00003A46  4E4F                    1113      TRAP #15
00003A48  103C 000D               1114      MOVE.B #13, D0
00003A4C  43F8 243E               1115      LEA NL,A1
00003A50  4E4F                    1116      TRAP #15
00003A52                          1117      
00003A52                          1118      *A0*
00003A52  43F8 243F               1119      LEA A0REG, A1
00003A56  143C 0010               1120      MOVE.B #16,D2
00003A5A  103C 000E               1121      MOVE.B #14, D0 
00003A5E  4E4F                    1122      TRAP #15
00003A60  2228 0020               1123      MOVE.L (32,A0),D1
00003A64  103C 000F               1124      MOVE.B #15, D0
00003A68  4E4F                    1125      TRAP #15
00003A6A  103C 000D               1126      MOVE.B #13, D0
00003A6E  43F8 243E               1127      LEA NL,A1
00003A72  4E4F                    1128      TRAP #15
00003A74                          1129      
00003A74                          1130      *A1*
00003A74  43F8 2444               1131      LEA A1REG, A1
00003A78  143C 0010               1132      MOVE.B #16,D2
00003A7C  103C 000E               1133      MOVE.B #14, D0 
00003A80  4E4F                    1134      TRAP #15
00003A82  2228 0024               1135      MOVE.L (36,A0),D1
00003A86  103C 000F               1136      MOVE.B #15, D0
00003A8A  4E4F                    1137      TRAP #15
00003A8C  103C 000D               1138      MOVE.B #13, D0
00003A90  43F8 243E               1139      LEA NL,A1
00003A94  4E4F                    1140      TRAP #15
00003A96                          1141      
00003A96                          1142      *A2*
00003A96  43F8 2448               1143      LEA A2REG, A1
00003A9A  143C 0010               1144      MOVE.B #16,D2
00003A9E  103C 000E               1145      MOVE.B #14, D0 
00003AA2  4E4F                    1146      TRAP #15
00003AA4  2228 0028               1147      MOVE.L (40,A0),D1
00003AA8  103C 000F               1148      MOVE.B #15, D0
00003AAC  4E4F                    1149      TRAP #15
00003AAE  103C 000D               1150      MOVE.B #13, D0
00003AB2  43F8 243E               1151      LEA NL,A1
00003AB6  4E4F                    1152      TRAP #15
00003AB8                          1153      
00003AB8                          1154      *A3*
00003AB8  43F8 244D               1155      LEA A3REG, A1
00003ABC  143C 0010               1156      MOVE.B #16,D2
00003AC0  103C 000E               1157      MOVE.B #14, D0 
00003AC4  4E4F                    1158      TRAP #15
00003AC6  2228 002C               1159      MOVE.L (44,A0),D1
00003ACA  103C 000F               1160      MOVE.B #15, D0
00003ACE  4E4F                    1161      TRAP #15
00003AD0  103C 000D               1162      MOVE.B #13, D0
00003AD4  43F8 243E               1163      LEA NL,A1
00003AD8  4E4F                    1164      TRAP #15
00003ADA                          1165      
00003ADA                          1166      *A4*
00003ADA  43F8 2452               1167      LEA A4REG, A1
00003ADE  143C 0010               1168      MOVE.B #16,D2
00003AE2  103C 000E               1169      MOVE.B #14, D0 
00003AE6  4E4F                    1170      TRAP #15
00003AE8  2228 0030               1171      MOVE.L (48,A0),D1
00003AEC  103C 000F               1172      MOVE.B #15, D0
00003AF0  4E4F                    1173      TRAP #15
00003AF2  103C 000D               1174      MOVE.B #13, D0
00003AF6  43F8 243E               1175      LEA NL,A1
00003AFA  4E4F                    1176      TRAP #15
00003AFC                          1177  
00003AFC                          1178      *A5*
00003AFC  43F8 2457               1179      LEA A5REG, A1
00003B00  143C 0010               1180      MOVE.B #16,D2
00003B04  103C 000E               1181      MOVE.B #14, D0
00003B08  4E4F                    1182      TRAP #15
00003B0A  2228 0034               1183      MOVE.L (52,A0),D1
00003B0E  103C 000F               1184      MOVE.B #15, D0
00003B12  4E4F                    1185      TRAP #15
00003B14  103C 000D               1186      MOVE.B #13, D0
00003B18  43F8 243E               1187      LEA NL,A1
00003B1C  4E4F                    1188      TRAP #15
00003B1E                          1189      
00003B1E                          1190      *A6*
00003B1E  43F8 245C               1191      LEA A6REG, A1
00003B22  143C 0010               1192      MOVE.B #16,D2
00003B26  103C 000E               1193      MOVE.B #14, D0 
00003B2A  4E4F                    1194      TRAP #15
00003B2C  2228 0038               1195      MOVE.L (56,A0),D1
00003B30  103C 000F               1196      MOVE.B #15, D0
00003B34  4E4F                    1197      TRAP #15
00003B36  103C 000D               1198      MOVE.B #13, D0
00003B3A  43F8 243E               1199      LEA NL,A1
00003B3E  4E4F                    1200      TRAP #15
00003B40                          1201  
00003B40                          1202      *A7*
00003B40  43F8 2460               1203      LEA A7REG, A1
00003B44  143C 0010               1204      MOVE.B #16,D2
00003B48  103C 000E               1205      MOVE.B #14, D0 
00003B4C  4E4F                    1206      TRAP #15
00003B4E  2228 003C               1207      MOVE.L (60,A0),D1
00003B52  103C 000F               1208      MOVE.B #15, D0
00003B56  4E4F                    1209      TRAP #15
00003B58  103C 000D               1210      MOVE.B #13, D0
00003B5C  43F8 243E               1211      LEA NL,A1
00003B60  4E4F                    1212      TRAP #15
00003B62                          1213  
00003B62                          1214      
00003B62                          1215      *PC*
00003B62  43F8 249B               1216      LEA PCREG, A1
00003B66  143C 0010               1217      MOVE.B #16,D2
00003B6A  103C 000E               1218      MOVE.B #14, D0 
00003B6E  4E4F                    1219      TRAP #15
00003B70  2238 258E               1220      MOVE.L PC_STORE,D1 ; get pc val
00003B74  103C 000F               1221      MOVE.B #15, D0
00003B78  4E4F                    1222      TRAP #15
00003B7A  103C 000D               1223      MOVE.B #13, D0
00003B7E  43F8 243E               1224      LEA NL,A1
00003B82  4E4F                    1225      TRAP #15
00003B84                          1226      
00003B84                          1227      *SR*
00003B84  43F8 2496               1228      LEA SRREG, A1
00003B88  143C 0010               1229      MOVE.B #16,D2
00003B8C  103C 000E               1230      MOVE.B #14, D0
00003B90  4E4F                    1231      TRAP #15
00003B92  4281                    1232      CLR.L D1
00003B94  3238 2594               1233      MOVE.W REG_STORE,D1
00003B98  103C 000F               1234      MOVE.B #15, D0
00003B9C  4E4F                    1235      TRAP #15
00003B9E  103C 000D               1236      MOVE.B #13, D0
00003BA2  43F8 243E               1237      LEA NL,A1
00003BA6  4E4F                    1238      TRAP #15
00003BA8                          1239  
00003BA8                          1240      
00003BA8                          1241      *USP*
00003BA8  40C6                    1242      MOVE.W SR,D6
00003BAA  0886 000D               1243      BCLR #13,D6     
00003BAE  46C6                    1244      MOVE.W D6,SR
00003BB0  43F8 2490               1245      LEA USPREG, A1
00003BB4  143C 0010               1246      MOVE.B #16,D2
00003BB8  103C 000E               1247      MOVE.B #14, D0 
00003BBC  4E4F                    1248      TRAP #15
00003BBE  220F                    1249      MOVE.L A7,D1
00003BC0  103C 000F               1250      MOVE.B #15, D0
00003BC4  4E4F                    1251      TRAP #15
00003BC6  103C 000D               1252      MOVE.B #13, D0
00003BCA  43F8 243E               1253      LEA NL,A1
00003BCE  4E4F                    1254      TRAP #15
00003BD0  4E41                    1255      TRAP #1 
00003BD2                          1256     
00003BD2                          1257  BSCH:
00003BD2  48E7 FFFE               1258      MOVEM.L A0-A6/D0-D7, -(SP)
00003BD6  2449                    1259      MOVE.L A1,A2    ; address1 in A0, address2 in A1, String in A5
00003BD8  95C8                    1260      SUB.L A0,A2     ; len of search space
00003BDA  B68A                    1261      CMP.L A2,D3     ; if smaller than string no match
00003BDC  6E00 001E               1262      BGT NO_MATCH_BSCH   ;d3 Hhas len
00003BE0  2449                    1263      MOVE.L A1,A2
00003BE2  95C3                    1264      SUB.L D3,A2
00003BE4                          1265  FOR_C_IN_SPACE:
00003BE4  2C48                    1266      MOVE.L A0,A6    ; address1
00003BE6  3003                    1267      MOVE.W D3,D0    ; len
00003BE8  6100 F95E               1268      BSR CHECK_MATCH
00003BEC  4A00                    1269      TST.B D0
00003BEE  6700 001C               1270      BEQ FOUND
00003BF2  5288                    1271      ADD.L #1,A0    ; c += 1
00003BF4  B1CA                    1272      CMP.L A2,A0
00003BF6  6E00 0004               1273      BGT NO_MATCH_BSCH    ;reached end, not found
00003BFA  60E8                    1274      BRA FOR_C_IN_SPACE
00003BFC                          1275      
00003BFC                          1276  NO_MATCH_BSCH:
00003BFC  43F8 255C               1277      LEA NO_STRING_MATCH,A1       
00003C00  103C 000D               1278      MOVE.B #13,D0
00003C04  4E4F                    1279      TRAP #15
00003C06  4CDF 7FFF               1280      MOVEM.L (SP)+,A0-A6/D0-D7
00003C0A  4E75                    1281      RTS
00003C0C                          1282  FOUND:
00003C0C  43F8 256E               1283      LEA STRING_MATCH,A1       ; print found text
00003C10  103C 000D               1284      MOVE.B #13,D0
00003C14  4E4F                    1285      TRAP #15
00003C16  43F8 2581               1286      LEA ADDRESS,A1  
00003C1A  103C 000E               1287      MOVE.B #14,D0   
00003C1E  4E4F                    1288      TRAP #15
00003C20  2208                    1289      MOVE.L A0,D1
00003C22  143C 0010               1290      MOVE.B #16,D2   
00003C26  103C 000F               1291      MOVE.B #15,D0   
00003C2A  4E4F                    1292      TRAP #15
00003C2C  43F8 258A               1293      LEA COLON,A1    
00003C30  103C 000E               1294      MOVE.B #14,D0
00003C34  4E4F                    1295      TRAP #15
00003C36  2248                    1296      MOVE.L A0,A1    
00003C38  103C 0000               1297      MOVE.B #0,D0
00003C3C  3203                    1298      MOVE.W D3,D1
00003C3E  4E4F                    1299      TRAP #15                  
00003C40  4CDF 7FFF               1300      MOVEM.L (SP)+,A0-A6/D0-D7
00003C44  4E75                    1301      RTS
00003C46                          1302  
00003C46                          1303        
00003C46                          1304      
00006000                          1305      ORG $6000       ; Go
00006000  700D                    1306      MOVE.L #13,D0
00006002  43F8 20B2               1307      LEA USERPROMPT,A1
00006006  4E4F                    1308      TRAP #15
00006008  6000 D03E               1309      BRA SHELL 
0000600C                          1310      
0000600C                          1311      *technically all these use go
00006010                          1312      ORG $6010
00006010= F000                    1313      DC.W $F000      ; Line F emulator
00006012  6000 D034               1314      BRA SHELL
00006016                          1315      
00006020                          1316      ORG $6020
00006020= A000                    1317      DC.W $A000      ; Line A emulator
00006022  6000 D024               1318      BRA SHELL
00006026                          1319      
00006030                          1320      ORG $6030       ; Illegal instruciton
00006030= 4AFA                    1321      DC.W $4AFA          
00006032  6000 D014               1322      BRA SHELL
00006036                          1323      
00006040                          1324      ORG $6040       ; divide by zero
00006040  700A                    1325      MOVE.L #10,D0  
00006042  7200                    1326      MOVE.L #0,D1
00006044  80C1                    1327      DIVU.W D1,D0
00006046  6000 D000               1328      BRA SHELL
0000604A                          1329  
00006050                          1330      ORG $6050
00006050  303C 0001               1331      MOVE.W #1,D0   ; check instruction
00006054  4241                    1332      CLR.W D1
00006056  4181                    1333      CHK.W D1,D0
00006058  6000 CFEE               1334      BRA SHELL
0000605C                          1335      
00006060                          1336      ORG $6060
00006060  027C 00FF               1337      ANDI.W #$00FF,SR    ;privelage error
00006064  007C 1000               1338      OR.W #$1000, SR     
00006068  6000 CFDE               1339      BRA SHELL
0000606C                          1340      
0000606C                          1341      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0REG               243F
A1REG               2444
A2REG               2448
A3REG               244D
A4REG               2452
A5REG               2457
A6REG               245C
A7REG               2460
ADDRESS             2581
ADDRESS_ER          24A0
ADDRESS_ERRORV      357A
ALL_HELP_PROMPTS    350A
BF                  38CC
BFCOMMAND           208C
BFHELP              34BA
BFHELPPROMPT        22EB
BF_ERR              32FC
BF_FUNC             32A0
BF_LOOP             38D0
BLOOP               375E
BMOV                38B6
BMOVCOMMAND         208F
BMOVHELP            34CE
BMOVHELPPROMPT      228F
BMOV_ERR            3244
BMOV_EXIT           38C6
BMOV_FUNC           31E8
BMOV_LOOP           38BC
BSCH                3BD2
BSCHCOMMAND         2094
BSCHHELP            34E2
BSCHHELPPROMPT      235F
BSCH_ERR            335E
BSCH_FUNC           3308
BTSTCOMMAND         2087
BTSTHELPPROMPT      2271
CHECK_ER            2503
CHECK_INSTRV        361C
CHECK_MATCH         3548
COLON               258A
COMMAND_PARSE       3688
CR                  D
CRCCOM              20A4
D0REG               2468
D1REG               246D
D2REG               2472
D3REG               2477
D4REG               247C
D5REG               2481
D6REG               2486
D7REG               248B
DESC                3922
DF                  393E
DFCOMMAND           209C
DFHELPPROMPT        2407
DF_FUNC             33A6
DIVIDE_ZEROV        35F8
DIVIDE_Z_ER         24F1
ECHOCOMMAND         20AD
ECHO_ERR            343A
ECHO_FUNC           340C
END_FOUND           3546
ERR                 345E
EXITCOMMAND         209F
EXITHELPPROMPT      2428
EXIT_FUNC           3446
FIND_END            3532
FONT                20A8
FONT_ERR            3400
FONT_FUNC           33D0
FOR_C_IN_SPACE      3BE4
FOR_C_IN_STRING     3554
FOR_PARSE           36A8
FOUND               3C0C
GO                  38DC
GOCOMMAND           2099
GOHELP              34F6
GOHELPPROMPT        23CD
GO_ADDRESS          254F
GO_ERR              339A
GO_FUNC             336A
HELPCOMMAND         2071
HEX_CHECK           36E2
ILLEGAL_ER          24B4
ILLEGAL_INSTRV      35B0
INIT                3040
INPUT               200C
LF                  A
LINEAV              3640
LINEA_ER            251B
LINEFV              3664
LINEF_ER            2535
MATCH               3564
MD                  370A
MDSP                36F6
MDSPCOMMAND         2076
MDSPHELP            34A6
MDSPHELPPROMPT      20CB
MDSP_2_ARGS         30B2
MDSP_ERR            30CC
MDSP_EX             30C0
MM                  3748
MMCOMMAND           2081
MMERR               38AC
MMHELP              346A
MMHELPPROMPT        21B5
MMLLOOP             383E
MMWLOOP             37CE
MM_B                3130
MM_BYTE             375C
MM_CHECK_SIZE       3108
MM_EXIT             38B0
MM_FUNC             30D8
MM_L                314C
MM_LONG             383C
MM_W                313E
MM_WORD             37CC
MSCOMMAND           2084
MSHELP              347E
MSHELPPROMPT        221D
MS_ERR              3294
MS_FUNC             3250
NL                  243E
NO_MATCH            356A
NO_MATCH_BSCH       3BFC
NO_STRING_MATCH     255C
NUM_CHECK           36D6
PARSE_DONE          36F0
PARSE_ERR           36EE
PCREG               249B
PC_STORE            258E
PC_VAL              33B8
PRIVALAGE_ER        24D3
PRIVALEGEV          35D4
REGNUM              2592
REG_STORE           2594
SHELL               3048
SHELL_PROMPT        2000
SHELL_RESET         3044
SORTA               31C8
SORTD               31B4
SORTW               390C
SORTWCOMMAND        207B
SORTWHELP           3492
SORTWHELPPROMPT     212A
SORTW_ERR           31DC
SORTW_EXIT          3938
SORTW_FOR_I         3912
SORTW_FOR_J         3914
SORTW_NEXT          3926
SRREG               2496
START               3000
STRING_MATCH        256E
SWAP                3930
SW_FUNC             315A
TRAPING_HOES        3572
USERPROMPT          20B2
USPREG              2490
