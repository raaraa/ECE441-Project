00003000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/30/2018 10:37:13 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Monitor Project
00000000                             3  * Written by : Raul Renteria
00000000                             4  * Date       :
00000000                             5  * Description: HELL on earth/Simplified version of TUTOR program
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =0000000D                  8  CR EQU $0D  ; Carrigage return
00000000  =0000000A                  9  LF EQU $0A  ; New Line
00002000                            10      ORG    $2000
00002000                            11      
00002000= 4D 4F 4E 49 54 4F ...     12  SHELL_PROMPT:  DC.B    'MONITOR441>',0
0000200C                            13  INPUT   DS.B 100         ;input buffer for commands
00002070= 00                        14          DC.B 0
00002071                            15          
00002071                            16  *Commands to compare input stings to*
00002071= 48 45 4C 50 00            17  HELPCOMMAND: DC.B 'HELP',0
00002076= 4D 44 53 50 00            18  MDSPCOMMAND DC.B 'MDSP',0
0000207B= 53 4F 52 54 57 00         19  SORTWCOMMAND DC.B 'SORTW',0
00002081= 4D 4D 00                  20  MMCOMMAND DC.B 'MM',0
00002084= 4D 53 00                  21  MSCOMMAND DC.B 'MS',0
00002087= 42 54 53 54 00            22  BTSTCOMMAND DC.B 'BTST',0
0000208C= 42 46 00                  23  BFCOMMAND DC.B 'BF',0
0000208F= 42 4D 4F 56 00            24  BMOVCOMMAND DC.B 'BMOV',0
00002094= 42 53 43 48 00            25  BSCHCOMMAND DC.B 'BSCH',0
00002099= 47 4F 00                  26  GOCOMMAND DC.B 'GO',0
0000209C= 44 46 00                  27  DFCOMMAND DC.B 'DF',0
0000209F= 45 58 49 54 00            28  EXITCOMMAND DC.B 'EXIT',0
000020A4= 43 52 43 00               29  CRCCOM DC.B 'CRC',0
000020A8= 46 4F 4E 54 00            30  FONT DC.B 'FONT',0
000020AD= 45 43 48 4F 00            31  ECHOCOMMAND DC.B 'ECHO',0
000020B2                            32      
000020B2                            33  **Help Display prompts**
000020B2= 44 6F 20 63 6F 6F ...     34  USERPROGRAM DC.B 'Do cool shit here: ',0
000020C6= 4D 44 53 50 3A 20 ...     35  MDSPHELPPROMPT DC.B 'MDSP: Outputs Address and Memory contents from <address1> to <address2>',CR,LF,'MDSP <address1> <address2> eg: MDSP $908 $90A<CR>',CR,LF,0
00002143= 53 4F 52 54 57 3A ...     36  SORTWHELPPROMPT DC.B 'SORTW: Sorts a block of memory from <address1> to <address2>. The order is specified by the following.',CR,LF,'A: Ascending order',CR,LF,'D: Descending order',CR,LF,'SORTW <address1> <address2> <order>',CR,LF,0
000021FA= 4D 4D 3A 20 44 69 ...     37  MMHELPPROMPT DC.B 'MM: Display memory and optionally enter new data. Can specify Byte, Word, or Long size.',CR,LF,'MM <size> <address>',CR,LF,0
00002269= 4D 53 3A 20 41 6C ...     38  MSHELPPROMPT DC.B 'MS: Alters memory by setting data into the specified address. Can take ASCII string or HEX',CR,LF,'MS <address> <string>',CR,LF,0
000022DD= 42 54 53 54 3A 20 ...     39  BTSTHELPPROMPT DC.B 'BTST: <address1> <address2>',CR,LF,0
000022FB= 42 4D 4F 56 3A 20 ...     40  BMOVHELPPROMPT DC.B 'BMOV: Moves bytes of memory from <address1> to <address2>',CR,LF,'BMOV <address1> <address2> <n>',CR,LF,0
00002357= 42 46 3A 20 46 69 ...     41  BFHELPPROMPT DC.B 'BF: Fills memory from <address1> to <address2> with the provieded data as input. <data> must be word sized  ',CR,LF,'BF <address1> <address2> <data>',CR,LF,0
000023E7= 42 53 43 48 3A 20 ...     42  BSCHHELPPROMPT DC.B 'BSCH: Searches for literal <string>  between <address1> and <address2>',CR,LF,'BSCH <address1> <address2> <string>',CR,LF,0
00002455= 47 4F 3A 20 42 65 ...     43  GOHELPPROMPT DC.B 'GO: Begin execution of program at address',CR,LF,'GO <address>',CR,LF,0
0000248F= 44 46 3A 20 44 69 ...     44  DFHELPPROMPT DC.B 'DF: Displays register contents',CR,LF,0 
000024B0= 46 4F 4E 54 3A 20 ...     45  FONTHELPROMPT DC.B 'FONT: Changes the color of the font.',CR,LF,'<color> is a 6 digit hex number specifing the RGB. 0xBBGGRR: eg: FONT <color>',CR,LF,0
00002526= 45 43 48 4F 3A 20 ...     46  ECHOHELPPROMPT DC.B 'ECHO: prints put what the user input',CR,LF,'ECHO <string>',CR,LF,0
0000255C= 45 58 49 54 3A 20 ...     47  EXITHELPPROMPT DC.B 'EXIT: Stops Program',CR,LF,0
00002572= 00                        48  NL: DC.B 0
00002573                            49      
00002573                            50  **Print out for registers**
00002573= 41 30 3A 20 00            51  A0REG: DC.B 'A0: ',0
00002578= 41 31 3A 00               52  A1REG: DC.B 'A1:',0
0000257C= 41 32 3A 20 00            53  A2REG: DC.B 'A2: ',0
00002581= 41 33 3A 20 00            54  A3REG: DC.B 'A3: ',0
00002586= 41 34 3A 20 00            55  A4REG: DC.B 'A4: ',0
0000258B= 41 35 3A 20 00            56  A5REG: DC.B 'A5: ',0
00002590= 41 36 3A 00               57  A6REG: DC.B 'A6:',0
00002594= 41 37 2F 53 53 50 ...     58  A7REG: DC.B 'A7/SSP:',0
0000259C= 44 30 3A 20 00            59  D0REG: DC.B 'D0: ',0
000025A1= 44 31 3A 20 00            60  D1REG: DC.B 'D1: ',0
000025A6= 44 32 3A 20 00            61  D2REG: DC.B 'D2: ',0
000025AB= 44 33 3A 20 00            62  D3REG: DC.B 'D3: ',0
000025B0= 44 34 3A 20 00            63  D4REG: DC.B 'D4: ',0
000025B5= 44 35 3A 20 00            64  D5REG: DC.B 'D5: ',0
000025BA= 44 36 3A 20 00            65  D6REG: DC.B 'D6: ',0
000025BF= 44 37 3A 20 00            66  D7REG: DC.B 'D7: ',0
000025C4= 55 53 50 3A 20 00         67  USPREG: DC.B 'USP: ',0
000025CA= 53 52 3A 20 00            68  SRREG: DC.B 'SR: ',0
000025CF= 50 43 3A 20 00            69  PCREG: DC.B 'PC: ',0
000025D4                            70  
000025D4                            71  **exception prompts**
000025D4                            72  ** GO $6010 - LINE F
000025D4                            73  ** GO $6020 - LINE A
000025D4                            74  ** GO $6030 - ILLEGAL INSTUCTION
000025D4                            75  ** GO $6040 - Divide by Zero
000025D4                            76  ** GO $6050 - Check
000025D4                            77  ** GO $6060 - Privalege
000025D4= 41 64 64 72 65 73 ...     78  ADDRESS_ER: DC.B 'Address Trap Error ',0
000025E8= 49 6C 6C 65 67 61 ...     79  ILLEGAL_ER: DC.B 'Illegal Instruction Trap Error',0
00002607= 50 72 69 76 65 6C ...     80  PRIVALAGE_ER: DC.B 'Privelage Violation Exception',0
00002625= 44 69 76 69 64 65 ...     81  DIVIDE_Z_ER: DC.B 'Divide by 0 error',0
00002637= 43 68 65 63 6B 20 ...     82  CHECK_ER: DC.B 'Check instruction error',0
0000264F= 4C 69 6E 65 20 41 ...     83  LINEA_ER: DC.B 'Line A Emulator exception',0
00002669= 4C 69 6E 65 20 46 ...     84  LINEF_ER: DC.B 'Line F Emulator exception',0 
00002683                            85  
00002683                            86  *Strings to print out
00002683= 47 4F 20 41 44 44 ...     87  GO_ADDRESS: DC.B 'GO ADDRESS: ',0
00002690= 44 69 64 6E 74 20 ...     88  NO_STRING_MATCH DC.B 'Didnt find string',0
000026A2= 46 6F 75 6E 64 20 ...     89  STRING_MATCH DC.B 'Found the String!!',0
000026B5= 41 44 44 52 45 53 ...     90  ADDRESS: DC.B 'ADDRESS ',0
000026BE= 20 3A 20 00               91  COLON: DC.B ' : ',0
000026C2                            92  
000026C2                            93  *Storage loction for PC, SSR, 
000026C2                            94  PC_STORE DS.L 1
000026C6                            95  REGNUM DS.B 1
000026C8                            96  REG_STORE DS.L 1
000026CC                            97    
000026CC                            98        
00003000                            99      ORG    $3000
00003000                           100  START:
00003000                           101  
00003000                           102      **exception vectors**
00003000  21FC 000035AC 000C       103      MOVE.L #ADDRESS_ERRORV,$C
00003008  21FC 000035E2 0010       104      MOVE.L #ILLEGAL_INSTRV,$10
00003010  21FC 0000362A 0014       105      MOVE.L #DIVIDE_ZEROV,$14
00003018  21FC 0000364E 0018       106      MOVE.L #CHECK_INSTRV,$18
00003020  21FC 00003606 0020       107      MOVE.L #PRIVALEGEV,$20
00003028  21FC 00003672 0028       108      MOVE.L #LINEAV,$28
00003030  21FC 00003696 002C       109      MOVE.L #LINEFV,$2C
00003038  21FC 000035A4 0084       110      MOVE.L #TRAPING_HOES,$84  
00003040                           111      
00003040                           112  INIT:
00003040  6000 0006                113      BRA SHELL
00003044                           114  SHELL_RESET:
00003044  4CDF 7FFF                115      MOVEM.L (SP)+, A0-A6/D0-D7
00003048                           116  SHELL:
00003048  48E7 FFFE                117      MOVEM.L A0-A6/D0-D7, -(SP)
0000304C  43F8 2000                118      LEA SHELL_PROMPT,A1       ; will print out MONITOR441>
00003050  103C 000E                119      MOVE.B #14,D0
00003054  4E4F                     120      TRAP #15
00003056  43F8 200C                121      LEA INPUT,A1
0000305A  103C 0002                122      MOVE.B #2,D0        ; parse cmd and read input
0000305E  4E4F                     123      TRAP #15
00003060  3C01                     124      MOVE.W D1,D6        ; keep length of string for comparisons
00003062  B27C 0000                125      CMP.W #0,D1         ; check if the input string is empty
00003066  67DC                     126      BEQ SHELL_RESET     ; if empty, restart prompt
00003068  4BF8 200C                127      LEA INPUT,A5        ; put into A5
0000306C  4DF8 2076                128      LEA MDSPCOMMAND,A6  ; load MDSP command into A6
00003070  303C 0004                129      MOVE.W #4,D0        ; since MDSP is 4 char long, put 4 into D0 for comp
00003074  6100 0504                130      BSR CHECK_MATCH      ; compare the two stirngs
00003078  4A40                     131      TST.W D0            ; check if D0 == 0
0000307A  6600 005C                132      BNE MM_FUNC         ; if false, there is no match, so branch to test next instruction
0000307E                           133      
0000307E                           134      **Code to execute MDSP if the test above is true.
0000307E  2A49                     135      MOVE.L A1,A5
00003080  5A4D                     136      ADD #5,A5           ; Skip to address1
00003082  2C4D                     137      MOVE.L A5,A6
00003084  6100 04DE                138      BSR FIND_END        ; find the end of address1
00003088  6100 0630                139      BSR COMMAND_PARSE         ; A5 has begining of address1 and A6 has end of this. parse this address.
0000308C  4A41                     140      TST D1              ; D0 will hold address1
0000308E  6600 003C                141      BNE MDSP_ERR        ; wring type of address
00003092  2400                     142      MOVE.L D0,D2
00003094  528E                     143      ADD.L #1,A6         ; go to address2
00003096  2A4E                     144      MOVE.L A6,A5         
00003098  6100 04CA                145      BSR FIND_END        ; find end of address2
0000309C  D3C6                     146      ADD.L D6,A1         ; increment A1 to end of command
0000309E  BDC9                     147      CMP.L A1,A6         ; compare contents of A1 to A6 to ensure address2 is correct
000030A0  6700 0010                148      BEQ MDSP_2_ARGS     ; two addresses were given
000030A4  2A42                     149      MOVE.L D2,A5        ; A5= address1, A6=address2
000030A6  2C42                     150      MOVE.L D2,A6
000030A8  DDFC 00000010            151      ADD.L #16,A6        ; add 16 to address1 since only 1 address was given
000030AE  6000 0010                152      BRA MDSP_EX
000030B2                           153      
000030B2                           154  MDSP_2_ARGS:             
000030B2  6100 0606                155      BSR COMMAND_PARSE         
000030B6  4A41                     156      TST D1
000030B8  6600 0012                157      BNE MDSP_ERR
000030BC  2A42                     158      MOVE.L D2,A5
000030BE  2C40                     159      MOVE.L D0,A6
000030C0                           160  MDSP_EX:
000030C0  6100 0666                161      BSR MDSP
000030C4  4CDF 7FFF                162      MOVEM.L (SP)+, A0-A6/D0-D7
000030C8  6000 FF7E                163      BRA SHELL
000030CC                           164      
000030CC                           165  MDSP_ERR:
000030CC  6100 03D8                166      BSR MDSPHELP      
000030D0  4CDF 7FFF                167      MOVEM.L (SP)+, A0-A6/D0-D7
000030D4  6000 FF72                168      BRA SHELL
000030D8                           169  
000030D8                           170  *Check for MM 
000030D8                           171  MM_FUNC:
000030D8  4DF8 2081                172      LEA MMCOMMAND,A6
000030DC  303C 0002                173      MOVE.W #2,D0    ; MM command size is 2
000030E0  6100 0498                174      BSR CHECK_MATCH ; check if input is MM
000030E4  4A40                     175      TST.W D0                   
000030E6  6600 0072                176      BNE SW_FUNC     ; Not MM? Go to SORTW
000030EA                           177      
000030EA                           178      **Code to execute MM
000030EA  5A8D                     179      ADD.L #5,A5     ; skip to size arg
000030EC  4DF8 200C                180      LEA INPUT,A6
000030F0  DDC6                     181      ADD.L D6,A6     ; PPOINT A6 to end of address
000030F2  6100 05C6                182      BSR COMMAND_PARSE
000030F6  4A41                     183      TST D1
000030F8  6700 000E                184      BEQ MM_CHECK_SIZE
000030FC  6100 036C                185      BSR MMHELP      
00003100  4CDF 7FFF                186      MOVEM.L (SP)+, A0-A6/D0-D7
00003104  6000 FF42                187      BRA SHELL
00003108                           188      
00003108                           189  MM_CHECK_SIZE:
00003108  558D                     190      SUB.L #2,A5     ; decrement A5 by two to go back to the size
0000310A  2040                     191      MOVE.L D0,A0    ; put address to modify in D0 into A0
0000310C  0C15 0042                192      CMP.B #'B',(A5) ; check if the parsed arguement is B.
00003110  6700 001E                193      BEQ MM_B
00003114  0C15 0057                194      CMP.B #'W',(A5)
00003118  6700 0024                195      BEQ MM_W
0000311C  0C15 004C                196      CMP.B #'L',(A5)
00003120  6700 002A                197      BEQ MM_L
00003124  6100 0344                198      BSR MMHELP       ; if it's not either one of the three. There's an error.
00003128  4CDF 7FFF                199      MOVEM.L (SP)+, A0-A6/D0-D7
0000312C  6000 FF1A                200      BRA SHELL
00003130                           201  MM_B:           
00003130  4287                     202      CLR.L D7
00003132  6100 0646                203      BSR MM
00003136  4CDF 7FFF                204      MOVEM.L (SP)+, A0-A6/D0-D7
0000313A  6000 FF0C                205      BRA SHELL
0000313E                           206  MM_W:                 
0000313E  7E01                     207      MOVE.L #1, D7
00003140  6100 0638                208      BSR MM
00003144  4CDF 7FFF                209      MOVEM.L (SP)+, A0-A6/D0-D7
00003148  6000 FEFE                210      BRA SHELL
0000314C                           211  MM_L:             
0000314C  7E02                     212      MOVE.L #2, D7
0000314E  6100 062A                213      BSR MM
00003152  4CDF 7FFF                214      MOVEM.L (SP)+, A0-A6/D0-D7
00003156  6000 FEF0                215      BRA SHELL 
0000315A                           216  
0000315A                           217  *Check for SORTW
0000315A                           218  SW_FUNC:
0000315A  4DF8 207B                219      LEA SORTWCOMMAND,A6 ; put sortw into A6     
0000315E  303C 0005                220      MOVE.W #5,D0
00003162  6100 0416                221      BSR CHECK_MATCH
00003166  4A40                     222      TST.W D0            
00003168  6600 007E                223      BNE BMOV_FUNC
0000316C                           224      
0000316C  508D                     225      ADD.L #8,A5         ; this is the start of address1     
0000316E  2C4D                     226      MOVE.L A5,A6
00003170  6100 03F2                227      BSR FIND_END        ; find end
00003174  6100 0544                228      BSR COMMAND_PARSE         ; get inputs 
00003178  4A41                     229      TST D1
0000317A  6600 0060                230      BNE SORTW_ERR       ; incorrect arguemnts 
0000317E  2C00                     231      MOVE.L D0,D6        ; put address1 in D6
00003180  528E                     232      ADD.L #1,A6
00003182  2A4E                     233      MOVE.L A6,A5
00003184  6100 03DE                234      BSR FIND_END        ; getting second address
00003188  6100 0530                235      BSR COMMAND_PARSE         
0000318C  4A41                     236      TST D1
0000318E  6600 004C                237      BNE SORTW_ERR       ; wrong arguments
00003192  4BF8 200C                238      LEA INPUT,A5
00003196  5C8D                     239      ADD.L #6,A5         ; get the letter. D or A
00003198  0C15 0041                240      CMP.B #'A',(A5)
0000319C  6700 002A                241      BEQ SORTA
000031A0  0C15 0044                242      CMP.B #'D',(A5)
000031A4  6700 000E                243      BEQ SORTD
000031A8  6100 02E8                244      BSR SORTWHELP        ; No letter, or incorrect letter. 
000031AC  4CDF 7FFF                245      MOVEM.L (SP)+, A0-A6/D0-D7
000031B0  6000 FE96                246      BRA SHELL
000031B4                           247      
000031B4                           248  * descending 
000031B4                           249  SORTD:
000031B4  2A46                     250      MOVE.L D6,A5
000031B6  2C40                     251      MOVE.L D0,A6
000031B8  103C 0001                252      MOVE.B #1,D0            
000031BC  6100 0780                253      BSR SORTW
000031C0  4CDF 7FFF                254      MOVEM.L (SP)+, A0-A6/D0-D7
000031C4  6000 FE82                255      BRA SHELL
000031C8                           256   *aascending  
000031C8                           257  SORTA:
000031C8  2A46                     258      MOVE.L D6,A5
000031CA  2C40                     259      MOVE.L D0,A6
000031CC  103C 0000                260      MOVE.B #0,D0
000031D0  6100 076C                261      BSR SORTW            
000031D4  4CDF 7FFF                262      MOVEM.L (SP)+, A0-A6/D0-D7
000031D8  6000 FE6E                263      BRA SHELL
000031DC                           264      
000031DC                           265  SORTW_ERR:
000031DC  6100 02B4                266      BSR SORTWHELP      ;PRINT HELP IF ERROR
000031E0  4CDF 7FFF                267      MOVEM.L (SP)+, A0-A6/D0-D7
000031E4  6000 FE62                268      BRA SHELL
000031E8                           269      
000031E8                           270      
000031E8                           271  BMOV_FUNC:
000031E8  4DF8 208F                272      LEA BMOVCOMMAND,A6  ;bmov into A6
000031EC  303C 0004                273      MOVE.W #4,D0
000031F0  6100 0388                274      BSR CHECK_MATCH
000031F4  4A40                     275      TST.W D0          
000031F6  6600 0058                276      BNE MS_FUNC         ; Not BMOV? go to MS
000031FA                           277      
000031FA                           278      
000031FA  5A8D                     279      ADD.L #5,A5         ; address1 in A5     
000031FC  2C4D                     280      MOVE.L A5,A6
000031FE  6100 0364                281      BSR FIND_END
00003202  6100 04B6                282      BSR COMMAND_PARSE
00003206  4A41                     283      TST D1
00003208  6600 003A                284      BNE BMOV_ERR
0000320C  2A00                     285      MOVE.L D0,D5        ; address1 goes in d5
0000320E  528E                     286      ADD.L #1,A6
00003210  2A4E                     287      MOVE.L A6,A5
00003212  6100 0350                288      BSR FIND_END        ; getting address2
00003216  6100 04A2                289      BSR COMMAND_PARSE         ; 
0000321A  2800                     290      MOVE.L D0,D4
0000321C  4A41                     291      TST D1
0000321E  6600 0024                292      BNE BMOV_ERR
00003222  528E                     293      ADD.L #1,A6
00003224  2A4E                     294      MOVE.L A6,A5
00003226  6100 033C                295      BSR FIND_END        ; getting number of bytes to move
0000322A  6100 048E                296      BSR COMMAND_PARSE         ; stored in D0
0000322E  4A41                     297      TST D1
00003230  6600 0012                298      BNE BMOV_ERR
00003234  2A45                     299      MOVE.L D5,A5
00003236  2C44                     300      MOVE.L D4,A6
00003238  6100 06AE                301      BSR BMOV            ; call BMOV with A5=address1, A6=address2, D0=count
0000323C  4CDF 7FFF                302      MOVEM.L (SP)+, A0-A6/D0-D7
00003240  6000 FE06                303      BRA SHELL
00003244                           304      
00003244                           305  BMOV_ERR:
00003244  6100 0288                306      BSR BMOVHELP
00003248  4CDF 7FFF                307      MOVEM.L (SP)+, A0-A6/D0-D7
0000324C  6000 FDFA                308      BRA SHELL 
00003250                           309  
00003250                           310      
00003250                           311      
00003250                           312  MS_FUNC:
00003250  4DF8 2084                313      LEA MSCOMMAND,A6    ; put MS into A6
00003254  303C 0002                314      MOVE.W #2,D0
00003258  6100 0320                315      BSR CHECK_MATCH
0000325C  4A40                     316      TST.W D0            
0000325E  6600 0040                317      BNE BF_FUNC         
00003262                           318      
00003262  568D                     319      ADD.L #3,A5         ; starting address    
00003264  2C4D                     320      MOVE.L A5,A6
00003266  6100 02FC                321      BSR FIND_END
0000326A  6100 044E                322      BSR COMMAND_PARSE
0000326E  4A41                     323      TST D1
00003270  6600 0022                324      BNE MS_ERR
00003274  2A00                     325      MOVE.L D0,D5        ; address1 goes in D5
00003276  528E                     326      ADD.L #1,A6         ; getting the data to store
00003278  2A4E                     327      MOVE.L A6,A5        
0000327A  4DF8 200C                328      LEA INPUT,A6
0000327E  DDC6                     329      ADDA.L D6,A6        
00003280  200E                     330      MOVE.L A6,D0
00003282  908D                     331      SUB.L  A5,D0        ; getting size of bytes to move for BMOV
00003284  5280                     332      ADDI.L #1,D0        
00003286  2C45                     333      MOVE.L D5,A6    
00003288  6100 065E                334      BSR BMOV            ; Call BMOV func for implementation 
0000328C  4CDF 7FFF                335      MOVEM.L (SP)+, A0-A6/D0-D7
00003290  6000 FDB6                336      BRA SHELL
00003294                           337      
00003294                           338  MS_ERR:
00003294  6100 01E8                339      BSR MSHELP
00003298  4CDF 7FFF                340      MOVEM.L (SP)+, A0-A6/D0-D7
0000329C  6000 FDAA                341      BRA SHELL    
000032A0                           342      
000032A0                           343      
000032A0                           344  BF_FUNC:
000032A0  4DF8 208C                345      LEA BFCOMMAND,A6        ; put BF into A6
000032A4  303C 0002                346      MOVE.W #2,D0
000032A8  6100 02D0                347      BSR CHECK_MATCH
000032AC  4A40                     348      TST.W D0
000032AE  6000 0058                349      BRA BSCH_FUNC
000032B2                           350      
000032B2                           351      *implement bf
000032B2  568D                     352      ADD.L #3,A5         ; getting address1   
000032B4  2C4D                     353      MOVE.L A5,A6
000032B6  6100 02AC                354      BSR FIND_END
000032BA  6100 03FE                355      BSR COMMAND_PARSE
000032BE  4A41                     356      TST D1
000032C0  6600 003A                357      BNE BF_ERR
000032C4  2A00                     358      MOVE.L D0,D5        ; D5 has address1
000032C6  528E                     359      ADD.L #1,A6
000032C8  2A4E                     360      MOVE.L A6,A5
000032CA  6100 0298                361      BSR FIND_END        ; getting address2
000032CE  6100 03EA                362      BSR COMMAND_PARSE         
000032D2  2800                     363      MOVE.L D0,D4        ; D4 has address2
000032D4  4A41                     364      TST D1
000032D6  6600 0024                365      BNE BF_ERR
000032DA  528E                     366      ADD.L #1,A6
000032DC  2A4E                     367      MOVE.L A6,A5        
000032DE  6100 0284                368      BSR FIND_END        ; getting data to fill blocks with
000032E2  6100 03D6                369      BSR COMMAND_PARSE        
000032E6  4A41                     370      TST D1
000032E8  6600 0012                371      BNE BF_ERR
000032EC  2A45                     372      MOVE.L D5,A5        ; address1
000032EE  2C44                     373      MOVE.L D4,A6        ; address2
000032F0  6100 060C                374      BSR BF
000032F4  4CDF 7FFF                375      MOVEM.L (SP)+, A0-A6/D0-D7
000032F8  6000 FD4E                376      BRA SHELL
000032FC                           377      
000032FC                           378  BF_ERR:
000032FC  6100 01BC                379      BSR BFHELP
00003300  4CDF 7FFF                380      MOVEM.L (SP)+, A0-A6/D0-D7
00003304  6000 FD42                381      BRA SHELL   
00003308                           382  
00003308                           383  BSCH_FUNC:
00003308  4DF8 2094                384      LEA BSCHCOMMAND,A6  ; PUT bsch IN a6
0000330C  303C 0004                385      MOVE.W #4,D0
00003310  6100 0268                386      BSR CHECK_MATCH
00003314  4A40                     387      TST.W D0            
00003316  6600 0052                388      BNE GO_FUNC
0000331A                           389      
0000331A                           390      
0000331A  5A8D                     391      ADD.L #5,A5         ;Start address    
0000331C  2C4D                     392      MOVE.L A5,A6
0000331E  6100 0244                393      BSR FIND_END
00003322  6100 0396                394      BSR COMMAND_PARSE
00003326  4A41                     395      TST D1
00003328  6600 0034                396      BNE BSCH_ERR
0000332C  2040                     397      MOVE.L D0,A0        
0000332E  528E                     398      ADD.L #1,A6
00003330  2A4E                     399      MOVE.L A6,A5
00003332  6100 0230                400      BSR FIND_END
00003336  6100 0382                401      BSR COMMAND_PARSE
0000333A  4A41                     402      TST D1
0000333C  6600 0020                403      BNE BSCH_ERR
00003340  2240                     404      MOVE.L D0,A1        ;second address
00003342  528E                     405      ADD.L #1,A6         ; getting stirng to find
00003344  2A4E                     406      MOVE.L A6,A5        
00003346  4DF8 200C                407      LEA INPUT,A6
0000334A  DDC6                     408      ADDA.L D6,A6        
0000334C  200E                     409      MOVE.L A6,D0
0000334E  908D                     410      SUB.L  A5,D0        
00003350  2600                     411      MOVE.L D0,D3        
00003352  6100 08B0                412      BSR BSCH
00003356  4CDF 7FFF                413      MOVEM.L (SP)+, A0-A6/D0-D7
0000335A  6000 FCEC                414      BRA SHELL
0000335E                           415  BSCH_ERR:
0000335E  6100 0182                416      BSR BSCHHELP
00003362  4CDF 7FFF                417      MOVEM.L (SP)+, A0-A6/D0-D7
00003366  6000 FCE0                418      BRA SHELL
0000336A                           419      
0000336A                           420  GO_FUNC:
0000336A  4DF8 2099                421      LEA GOCOMMAND,A6    ; put go in A6
0000336E  303C 0002                422      MOVE.W #2,D0
00003372  6100 0206                423      BSR CHECK_MATCH          
00003376  4A40                     424      TST.W D0
00003378  6600 002C                425      BNE DF_FUNC
0000337C                           426      
0000337C  568D                     427      ADD.L #3,A5         ; get start address     
0000337E  2C4D                     428      MOVE.L A5,A6
00003380  6100 01E2                429      BSR FIND_END
00003384  6100 0334                430      BSR COMMAND_PARSE
00003388  4A41                     431      TST D1
0000338A  6600 000E                432      BNE GO_ERR
0000338E  21C0 26C8                433      MOVE.L D0,REG_STORE   ; put starting address of program in memory
00003392  4CDF 7FFF                434      MOVEM.L (SP)+, A0-A6/D0-D7
00003396  6000 0576                435      BRA GO
0000339A                           436      
0000339A                           437  GO_ERR:
0000339A  4CDF 7FFF                438      MOVEM.L (SP)+, A0-A6/D0-D7
0000339E  6100 0156                439      BSR GOHELP
000033A2  6000 FCA4                440      BRA SHELL
000033A6                           441      
000033A6                           442  DF_FUNC:
000033A6  4DF8 209C                443      LEA DFCOMMAND,A6    ; putting DF ni A6
000033AA  303C 0002                444      MOVE.W #2,D0
000033AE  6100 01CA                445      BSR CHECK_MATCH
000033B2  4A40                     446      TST.W D0            
000033B4  6600 001A                447      BNE FONT_FUNC
000033B8                           448      
000033B8                           449  PC_VAL:
000033B8  21FC 000033B8 26C2       450      MOVE.L #PC_VAL,PC_STORE ; put PC in storage location to print out later
000033C0  40F8 26C8                451      MOVE.W SR,REG_STORE       ; get SR data 
000033C4  4CDF 7FFF                452      MOVEM.L (SP)+, A0-A6/D0-D7  
000033C8  6100 05A6                453      BSR DF
000033CC  6000 FC7A                454      BRA SHELL
000033D0                           455      
000033D0                           456  FONT_FUNC:
000033D0  4DF8 20A8                457      LEA FONT,A6
000033D4  303C 0004                458      MOVE.W #4,D0
000033D8  6100 01A0                459      BSR CHECK_MATCH          
000033DC  4A40                     460      TST.W D0
000033DE  6600 002C                461      BNE ECHO_FUNC
000033E2                           462      
000033E2  5A8D                     463      ADD.L #5,A5         ; address into A5     
000033E4  2C4D                     464      MOVE.L A5,A6
000033E6  6100 017C                465      BSR FIND_END
000033EA  6100 02CE                466      BSR COMMAND_PARSE
000033EE  4A41                     467      TST D1
000033F0  6600 000E                468      BNE FONT_ERR
000033F4  2200                     469      MOVE.L D0,D1    ;value to change font color stored in D1
000033F6  103C 0015                470      MOVE.B #21,D0
000033FA  4E4F                     471      TRAP #15        ;change font color
000033FC  6000 FC4A                472      BRA SHELL
00003400                           473      
00003400                           474  FONT_ERR:
00003400  4CDF 7FFF                475      MOVEM.L (SP)+, A0-A6/D0-D7
00003404  6100 0104                476      BSR FONTHELP
00003408  6000 FC3E                477      BRA SHELL
0000340C                           478      
0000340C                           479      
0000340C                           480  ECHO_FUNC:
0000340C  4DF8 20AD                481      LEA ECHOCOMMAND,A6
00003410  303C 0004                482      MOVE.W #4,D0
00003414  6100 0164                483      BSR CHECK_MATCH          
00003418  4A40                     484      TST.W D0
0000341A  6600 002A                485      BNE EXIT_FUNC
0000341E                           486      
0000341E  5A8D                     487      ADD.L #5,A5         ; address into A5     
00003420  2C4D                     488      MOVE.L A5,A6
00003422  6100 0140                489      BSR FIND_END
00003426  6100 0292                490      BSR COMMAND_PARSE
0000342A  324D                     491      MOVE.W A5,A1
0000342C  9DCD                     492      SUB.L A5,A6
0000342E  320E                     493      MOVE.W A6,D1
00003430  303C 000D                494      MOVE.W #13,D0
00003434  4E4F                     495      TRAP #15        ; print out text
00003436  6000 FC10                496      BRA SHELL
0000343A                           497      
0000343A                           498  ECHO_ERR:
0000343A  4CDF 7FFF                499      MOVEM.L (SP)+, A0-A6/D0-D7
0000343E  6100 00B6                500      BSR GOHELP
00003442  6000 FC04                501      BRA SHELL
00003446                           502      
00003446                           503      
00003446                           504  
00003446                           505  EXIT_FUNC:
00003446  4DF8 209F                506      LEA EXITCOMMAND,A6
0000344A  303C 0004                507      MOVE.W #4,D0
0000344E  6100 012A                508      BSR CHECK_MATCH
00003452  4A40                     509      TST.W D0           
00003454  6600 0008                510      BNE ERR 
00003458                           511      
00003458  303C 0009                512      MOVE.W #9,D0    ; 9 terminates the program
0000345C  4E4F                     513      TRAP #15   
0000345E                           514      
0000345E                           515  ERR:
0000345E  6100 00D2                516      BSR ALL_HELP_PROMPTS
00003462  4CDF 7FFF                517      MOVEM.L (SP)+, A0-A6/D0-D7
00003466  6000 FBE0                518      BRA SHELL
0000346A                           519  
0000346A                           520  MMHELP:
0000346A  48E7 8040                521      MOVEM.L D0/A1, -(SP)
0000346E  43F8 21FA                522      LEA MMHELPPROMPT, A1
00003472  103C 000D                523      MOVE.B #13,D0  
00003476  4E4F                     524      TRAP #15
00003478  4CDF 0201                525      MOVEM.L (SP)+, D0/A1
0000347C  4E75                     526      RTS
0000347E                           527      
0000347E                           528  MSHELP:
0000347E  48E7 8040                529      MOVEM.L D0/A1, -(SP)
00003482  43F8 2269                530      LEA MSHELPPROMPT, A1
00003486  103C 000D                531      MOVE.B #13,D0
0000348A  4E4F                     532      TRAP #15
0000348C  4CDF 0201                533      MOVEM.L (SP)+, D0/A1
00003490  4E75                     534      RTS
00003492                           535  
00003492                           536  SORTWHELP:
00003492  48E7 8040                537      MOVEM.L D0/A1, -(SP)
00003496  43F8 2143                538      LEA SORTWHELPPROMPT, A1
0000349A  103C 000D                539      MOVE.B #13,D0
0000349E  4E4F                     540      TRAP #15
000034A0  4CDF 0201                541      MOVEM.L (SP)+, D0/A1
000034A4  4E75                     542      RTS
000034A6                           543      
000034A6                           544  MDSPHELP:
000034A6  48E7 8040                545      MOVEM.L D0/A1, -(SP)
000034AA  43F8 20C6                546      LEA MDSPHELPPROMPT, A1
000034AE  103C 000D                547      MOVE.B #13,D0
000034B2  4E4F                     548      TRAP #15
000034B4  4CDF 0201                549      MOVEM.L (SP)+, D0/A1
000034B8  4E75                     550      RTS
000034BA                           551      
000034BA                           552  BFHELP:
000034BA  48E7 8040                553      MOVEM.L D0/A1, -(SP)
000034BE  43F8 2357                554      LEA BFHELPPROMPT, A1
000034C2  103C 000D                555      MOVE.B #13,D0
000034C6  4E4F                     556      TRAP #15
000034C8  4CDF 0201                557      MOVEM.L (SP)+, D0/A1
000034CC  4E75                     558      RTS
000034CE                           559  
000034CE                           560  BMOVHELP:
000034CE  48E7 8040                561      MOVEM.L D0/A1, -(SP)
000034D2  43F8 22FB                562      LEA BMOVHELPPROMPT, A1
000034D6  103C 000D                563      MOVE.B #13,D0
000034DA  4E4F                     564      TRAP #15
000034DC  4CDF 0201                565      MOVEM.L (SP)+, D0/A1
000034E0  4E75                     566      RTS
000034E2                           567      
000034E2                           568  BSCHHELP:
000034E2  48E7 8040                569      MOVEM.L D0/A1, -(SP)
000034E6  43F8 23E7                570      LEA BSCHHELPPROMPT, A1
000034EA  103C 000D                571      MOVE.B #13,D0
000034EE  4E4F                     572      TRAP #15
000034F0  4CDF 0201                573      MOVEM.L (SP)+, D0/A1
000034F4  4E75                     574      RTS
000034F6                           575  
000034F6                           576  GOHELP:
000034F6  48E7 8040                577      MOVEM.L D0/A1, -(SP)
000034FA  43F8 2455                578      LEA GOHELPPROMPT, A1
000034FE  103C 000D                579      MOVE.B #13,D0
00003502  4E4F                     580      TRAP #15
00003504  4CDF 0201                581      MOVEM.L (SP)+, D0/A1
00003508  4E75                     582      RTS
0000350A                           583      
0000350A                           584  FONTHELP:
0000350A  48E7 8040                585      MOVEM.L D0/A1, -(SP)
0000350E  43F8 24B0                586      LEA FONTHELPROMPT, A1
00003512  103C 000D                587      MOVE.B #13,D0
00003516  4E4F                     588      TRAP #15
00003518  4CDF 0201                589      MOVEM.L (SP)+, D0/A1
0000351C  4E75                     590      RTS
0000351E                           591      
0000351E                           592  ECHOHELP:
0000351E  48E7 8040                593      MOVEM.L D0/A1, -(SP)
00003522  43F8 2526                594      LEA ECHOHELPPROMPT, A1
00003526  103C 000D                595      MOVE.B #13,D0
0000352A  4E4F                     596      TRAP #15
0000352C  4CDF 0201                597      MOVEM.L (SP)+, D0/A1
00003530  4E75                     598      RTS
00003532                           599  
00003532                           600  
00003532                           601  ALL_HELP_PROMPTS:
00003532  6100 FF36                602      BSR MMHELP
00003536  6100 FF5A                603      BSR SORTWHELP
0000353A  6100 FF6A                604      BSR MDSPHELP
0000353E  6100 FF3E                605      BSR MSHELP
00003542  6100 FF76                606      BSR BFHELP
00003546  6186                     607      BSR BMOVHELP
00003548  6198                     608      BSR BSCHHELP
0000354A  61AA                     609      BSR GOHELP
0000354C  61BC                     610      BSR FONTHELP
0000354E  61CE                     611      BSR ECHOHELP
00003550  48E7 8040                612      MOVEM.L D0/A1, -(SP)
00003554  43F8 248F                613      LEA DFHELPPROMPT, A1
00003558  103C 000D                614      MOVE.B #13,D0
0000355C  4E4F                     615      TRAP #15
0000355E  4CDF 0201                616      MOVEM.L (SP)+, D0/A1
00003562  4E75                     617      RTS
00003564                           618      
00003564                           619  *Finds end of string. Either char is a 0 or it's empty COLON
00003564                           620  FIND_END:    
00003564  0C16 0000                621      CMP.B #0,(A6)   ; check if we are at end
00003568  6700 000E                622      BEQ END_FOUND
0000356C  0C16 0020                623      CMP.B #' ',(A6) ; check if we are at end
00003570  6700 0006                624      BEQ END_FOUND
00003574  528E                     625      ADDA.L #1,A6    ; keep searching 
00003576  60EC                     626      BRA FIND_END
00003578                           627      
00003578                           628  END_FOUND:
00003578  4E75                     629      RTS
0000357A                           630      
0000357A                           631   *compare strings
0000357A                           632  CHECK_MATCH:     
0000357A  48E7 0006                633      MOVEM.L A5/A6, -(SP) ;strings are in A5 and A6
0000357E  4A40                     634      TST D0          ; length of input string is in D0.
00003580  6700 001A                635      BEQ NO_MATCH     ; if string length is 0 they're not equal
00003584  5380                     636      SUB.L #1,D0
00003586                           637  FOR_C_IN_STRING:
00003586  BD0D                     638      CMP.B (A5)+,(A6)+   ; compare characters byte by byte
00003588  6600 0012                639      BNE NO_MATCH        ; byte not equal? string is not equal
0000358C  4A40                     640      TST.W D0            ; compared all the characters in the string?
0000358E  57C8 FFF6                641      DBEQ.W D0,FOR_C_IN_STRING    ;  DO AT MOST D0 COMPARISONS
00003592  6000 0002                642      BRA MATCH            ; finshed comparing and strings are equal.
00003596                           643      
00003596                           644  MATCH:
00003596  4CDF 6000                645      MOVEM.L (SP)+, A5/A6  ;D0 will = 0, signifying a match
0000359A  4E75                     646      RTS
0000359C                           647  NO_MATCH:
0000359C  7001                     648      MOVE.L #1,D0        ; return 1 to signify no match
0000359E  4CDF 6000                649      MOVEM.L (SP)+, A5/A6
000035A2  4E75                     650      RTS
000035A4                           651      
000035A4                           652  
000035A4                           653  TRAPING_HOES:
000035A4  5C8F                     654      ADD.L #6,SP        
000035A6  4CDF FFFF                655      MOVEM.L (A7)+,A0-A7/D0-D7
000035AA  4E75                     656      RTS
000035AC                           657      
000035AC                           658      
000035AC                           659  ADDRESS_ERRORV:
000035AC  48E7 E040                660      MOVEM.L A1/D0-D2, -(SP)
000035B0  700E                     661      MOVE.L #14,D0
000035B2  43F8 25D4                662      LEA ADDRESS_ER,A1  ;print ADDRESS:
000035B6  4E4F                     663      TRAP #15
000035B8                           664      
000035B8  143C 0010                665      MOVE.B #16,D2
000035BC  700D                     666      MOVE.L #13,D0
000035BE  43F8 2572                667      LEA NL,A1
000035C2  4E4F                     668      TRAP #15
000035C4  21EF 001A 26C2           669      MOVE.L (26,A7),PC_STORE
000035CA  31EF 0018 26C8           670      MOVE.W (24,A7),REG_STORE   ; get SR
000035D0  4CDF 0207                671      MOVEM.L (SP)+, A1/D0-D2
000035D4  6100 039A                672      BSR DF  ; Use Display registers to print out registers and content 
000035D8  DFFC 0000000E            673      ADD.L #14,SP     
000035DE  4EF8 3048                674      JMP SHELL
000035E2                           675  
000035E2                           676  ILLEGAL_INSTRV:
000035E2  48E7 8040                677      MOVEM.L A1/D0, -(SP)
000035E6  700D                     678      MOVE.L #13,D0
000035E8  43F8 25E8                679      LEA ILLEGAL_ER,A1   ; print iilegal instruction erorr
000035EC  4E4F                     680      TRAP #15
000035EE  4CDF 0201                681      MOVEM.L (SP)+, A1/D0
000035F2  31D7 26C8                682      MOVE.W (A7),REG_STORE   ; put sr in regstore
000035F6  21EF 0002 26C2           683      MOVE.L (2,A7),PC_STORE
000035FC  6100 0372                684      BSR DF          
00003600  5C8F                     685      ADD.L #6,SP     
00003602  4EF8 3048                686      JMP SHELL
00003606                           687      
00003606                           688  PRIVALEGEV:
00003606  48E7 8040                689      MOVEM.L A1/D0, -(SP)
0000360A  700D                     690      MOVE.L #13,D0
0000360C  43F8 2607                691      LEA PRIVALAGE_ER,A1
00003610  4E4F                     692      TRAP #15
00003612  4CDF 0201                693      MOVEM.L (SP)+, A1/D0
00003616  31D7 26C8                694      MOVE.W (A7),REG_STORE   
0000361A  21EF 0002 26C2           695      MOVE.L (2,A7),PC_STORE
00003620  6100 034E                696      BSR DF          
00003624  5C8F                     697      ADD.L #6,SP     
00003626  4EF8 3048                698      JMP SHELL
0000362A                           699  
0000362A                           700  DIVIDE_ZEROV:
0000362A  48E7 8040                701      MOVEM.L A1/D0, -(SP)
0000362E  700D                     702      MOVE.L #13,D0
00003630  43F8 2625                703      LEA DIVIDE_Z_ER,A1
00003634  4E4F                     704      TRAP #15
00003636  4CDF 0201                705      MOVEM.L (SP)+, A1/D0
0000363A  31D7 26C8                706      MOVE.W (A7),REG_STORE   
0000363E  21EF 0002 26C2           707      MOVE.L (2,A7),PC_STORE
00003644  6100 032A                708      BSR DF          
00003648  5C8F                     709      ADD.L #6,SP     
0000364A  4EF8 3048                710      JMP SHELL
0000364E                           711      
0000364E                           712  CHECK_INSTRV:
0000364E  48E7 8040                713      MOVEM.L A1/D0, -(SP)
00003652  700D                     714      MOVE.L #13,D0
00003654  43F8 2637                715      LEA CHECK_ER,A1
00003658  4E4F                     716      TRAP #15
0000365A  4CDF 0201                717      MOVEM.L (SP)+, A1/D0
0000365E  31D7 26C8                718      MOVE.W (A7),REG_STORE   
00003662  21EF 0002 26C2           719      MOVE.L (2,A7),PC_STORE
00003668  6100 0306                720      BSR DF          
0000366C  5C8F                     721      ADD.L #6,SP     
0000366E  4EF8 3048                722      JMP SHELL
00003672                           723    
00003672                           724  LINEAV:
00003672  48E7 8040                725      MOVEM.L A1/D0, -(SP)
00003676  700D                     726      MOVE.L #13,D0
00003678  43F8 264F                727      LEA LINEA_ER,A1
0000367C  4E4F                     728      TRAP #15
0000367E  4CDF 0201                729      MOVEM.L (SP)+, A1/D0
00003682  31D7 26C8                730      MOVE.W (A7),REG_STORE   
00003686  21EF 0002 26C2           731      MOVE.L (2,A7),PC_STORE
0000368C  6100 02E2                732      BSR DF          
00003690  5C8F                     733      ADD.L #6,SP     
00003692  4EF8 3048                734      JMP SHELL
00003696                           735      
00003696                           736  LINEFV:
00003696  48E7 8040                737      MOVEM.L A1/D0, -(SP)
0000369A  700D                     738      MOVE.L #13,D0
0000369C  43F8 2669                739      LEA LINEF_ER,A1
000036A0  4E4F                     740      TRAP #15
000036A2  4CDF 0201                741      MOVEM.L (SP)+, A1/D0
000036A6  31D7 26C8                742      MOVE.W (A7),REG_STORE   
000036AA  21EF 0002 26C2           743      MOVE.L (2,A7),PC_STORE
000036B0  6100 02BE                744      BSR DF          
000036B4  5C8F                     745      ADD.L #6,SP     
000036B6  4EF8 3048                746      JMP SHELL
000036BA                           747  
000036BA                           748      
000036BA                           749      
000036BA                           750  * Parses arguments for a valid command.
000036BA                           751  COMMAND_PARSE:            
000036BA  48E7 3F46                752      MOVEM.L A1/A5/A6/D2-D7, -(SP)  
000036BE  4280                     753      CLR.L D0
000036C0  4281                     754      CLR.L D1
000036C2  7400                     755      MOVE.L #0, D2   
000036C4  0C1D 0024                756      CMP.B #$24,(A5)+ ;checking for $
000036C8  6600 0056                757      BNE PARSE_ERR
000036CC  224E                     758      MOVE.L A6,A1
000036CE  93CD                     759      SUB.L A5,A1
000036D0  B3FC 00000008            760      CMP.L #8,A1
000036D6  6E00 0048                761      BGT PARSE_ERR
000036DA                           762      
000036DA                           763  FOR_PARSE:
000036DA  BCCD                     764      CMP A5,A6       ; check if eat ennd of command
000036DC  6F00 0044                765      BLE PARSE_DONE
000036E0  4283                     766      CLR.L D3        ; use D3 to check
000036E2  1626                     767      MOVE.B -(A6),D3
000036E4  B63C 0046                768      CMP.B #'F',D3   ; bigger than 16 Hex?
000036E8  6E00 0036                769      BGT PARSE_ERR
000036EC  B63C 0030                770      CMP.B #'0',D3   ; negative
000036F0  6D00 002E                771      BLT PARSE_ERR
000036F4  B63C 0039                772      CMP.B #'9',D3
000036F8  6F00 000E                773      BLE NUM_CHECK   ; WITHIN 0-9 OR A-F?
000036FC  B63C 0041                774      CMP.B #'A',D3
00003700  6C00 0012                775      BGE HEX_CHECK
00003704  6000 001A                776      BRA PARSE_ERR
00003708                           777      
00003708                           778  NUM_CHECK:
00003708  0403 0030                779      SUBI.B #$30,D3  
0000370C  E5AB                     780      LSL.L D2,D3
0000370E  8083                     781      OR.L D3,D0
00003710  5802                     782      ADD.B #4,D2    
00003712  60C6                     783      BRA FOR_PARSE
00003714                           784      
00003714                           785  HEX_CHECK:
00003714  0403 0037                786      SUBI.B #55,D3 
00003718  E5AB                     787      LSL.L D2,D3
0000371A  8083                     788      OR.L D3,D0
0000371C  5802                     789      ADD.B #4,D2     
0000371E  60BA                     790      BRA FOR_PARSE
00003720                           791    
00003720                           792  PARSE_ERR:
00003720  5201                     793      ADDI.B #1,D1    
00003722                           794  PARSE_DONE:
00003722  4CDF 62FC                795      MOVEM.L (SP)+, A1/A5/A6/D2-D7
00003726  4E75                     796      RTS
00003728                           797      
00003728                           798  MDSP:                    
00003728  48E7 FFFE                799      MOVEM.L A0-A6/D0-D7,-(SP)
0000372C  BDFC 00000000            800      CMP.L #0, A6
00003732  6600 0008                801      BNE MD
00003736  DDFC 00000010            802      ADD.L #16, A6   ; if A6=0 add 16 to get the end address.
0000373C                           803  MD:
0000373C  143C 0010                804      MOVE.B #16,D2   ; base of number to display for trap function
00003740  43F8 26B5                805      LEA ADDRESS,A1  ; ADDRESS prompt to print
00003744  103C 000E                806      MOVE.B #14,D0
00003748  4E4F                     807      TRAP #15        ;Display the NULL terminated string pointed to by (A1).
0000374A  220D                     808      MOVE.L A5,D1
0000374C  103C 000F                809      MOVE.B #15,D0   ;Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B. 
00003750  4E4F                     810      TRAP #15        
00003752  43F8 26BE                811      LEA COLON,A1    ; put a COLON
00003756  103C 000E                812      MOVE.B #14,D0
0000375A  4E4F                     813      TRAP #15        ; 
0000375C  4281                     814      CLR.L D1
0000375E  121D                     815      MOVE.B (A5)+,D1 ; move contents pointed to by A5 to D1 to display 
00003760  103C 000F                816      MOVE.B #15,D0
00003764  4E4F                     817      TRAP #15        ; display D1 contents (data)
00003766  43F8 2572                818      LEA NL,A1
0000376A  103C 000D                819      MOVE.B #13,D0
0000376E  4E4F                     820      TRAP #15        ; print empty space for new input
00003770  BCCD                     821      CMP A5,A6       ; are we at address2?
00003772  6CC8                     822      BGE MD          ; keep going if we're not
00003774  4CDF 7FFF                823      MOVEM.L (SP)+,A0-A6/D0-D7
00003778  4E75                     824      RTS
0000377A                           825  
0000377A                           826      
0000377A                           827  MM:        
0000377A  48E7 FFFE                828      MOVEM.L A0-A6/D0-D7,-(SP)
0000377E  BE7C 0001                829      CMP #1, D7
00003782  6700 007A                830      BEQ MM_WORD
00003786  BE7C 0002                831      CMP #2, D7
0000378A  6700 00E2                832      BEQ MM_LONG
0000378E                           833      
0000378E                           834  MM_BYTE:        
0000378E  5388                     835      SUBA.L #1, A0    
00003790                           836  BLOOP:    
00003790  143C 0010                837      MOVE.B #16,D2   
00003794  5248                     838      ADDA #1, A0     ; increment to the next Bbyte 
00003796  43F8 26B5                839      LEA ADDRESS,A1  
0000379A  103C 000E                840      MOVE.B #14,D0   ; address
0000379E  4E4F                     841      TRAP #15
000037A0  2208                     842      MOVE.L A0,D1
000037A2  103C 000F                843      MOVE.B #15,D0   
000037A6  4E4F                     844      TRAP #15
000037A8  43F8 26BE                845      LEA COLON,A1
000037AC  103C 000E                846      MOVE.B #14,D0
000037B0  4E4F                     847      TRAP #15
000037B2  4281                     848      CLR.L D1
000037B4  1210                     849      MOVE.B (A0),D1  ; moving data to D1
000037B6  103C 000F                850      MOVE.B #15,D0   ; printing data
000037BA  4E4F                     851      TRAP #15        
000037BC  43F8 26BE                852      LEA COLON,A1
000037C0  103C 000E                853      MOVE.B #14,D0   
000037C4  4E4F                     854      TRAP #15
000037C6  43F8 200C                855      LEA INPUT,A1
000037CA  103C 0002                856      MOVE.B #2,D0    ; waiting for user input
000037CE  4E4F                     857      TRAP #15
000037D0  B27C 0000                858      CMP.W #0,D1     ; if enter was hit, and not input. Restart
000037D4  67BA                     859      BEQ BLOOP
000037D6  0C11 002E                860      CMP.B #$2E,(A1)   ; if we get a period, finish.
000037DA  6700 0106                861      BEQ MM_EXIT
000037DE  B27C 0003                862      CMP.W #3,D1          
000037E2  6600 00FA                863      BNE MMERR       ; print an error if we get incorret number of charcters
000037E6  4BF8 200C                864      LEA INPUT,A5
000037EA  4DF8 200C                865      LEA INPUT,A6
000037EE  DCC1                     866      ADDA D1,A6
000037F0  6100 FEC8                867      BSR COMMAND_PARSE
000037F4  4A41                     868      TST D1
000037F6  6600 00E6                869      BNE MMERR       
000037FA  1080                     870      MOVE.B D0,(A0)  
000037FC  6092                     871      BRA BLOOP
000037FE                           872      
000037FE                           873  MM_WORD:           
000037FE  5588                     874      SUBA.L #2, A0    
00003800                           875  MMWLOOP:    
00003800  143C 0010                876      MOVE.B #16,D2   ; setting base number to print from
00003804  5448                     877      ADDA #2, A0     ; increment to the next wORD
00003806  43F8 26B5                878      LEA ADDRESS,A1  
0000380A  103C 000E                879      MOVE.B #14,D0   
0000380E  4E4F                     880      TRAP #15
00003810  2208                     881      MOVE.L A0,D1
00003812  103C 000F                882      MOVE.B #15,D0   
00003816  4E4F                     883      TRAP #15        ; print address
00003818  43F8 26BE                884      LEA COLON,A1    
0000381C  103C 000E                885      MOVE.B #14,D0
00003820  4E4F                     886      TRAP #15
00003822  4281                     887      CLR.L D1
00003824  3210                     888      MOVE.W (A0),D1  ; moving data pointed to by A1 to D1 for printing
00003826  103C 000F                889      MOVE.B #15,D0
0000382A  4E4F                     890      TRAP #15        ; print current data at this address
0000382C  43F8 26BE                891      LEA COLON,A1
00003830  103C 000E                892      MOVE.B #14,D0   
00003834  4E4F                     893      TRAP #15
00003836  43F8 200C                894      LEA INPUT,A1
0000383A  103C 0002                895      MOVE.B #2,D0    ; wait for input from user
0000383E  4E4F                     896      TRAP #15
00003840  B27C 0000                897      CMP.W #0,D1     ; if enter was hit, and not input. Restart
00003844  67BA                     898      BEQ MMWLOOP
00003846  0C11 002E                899      CMP.B #$2E,(A1)   ; if we get a period, finish
0000384A  6700 0096                900      BEQ MM_EXIT
0000384E  B27C 0005                901      CMP.W #5,D1       ; 4 character comparison   
00003852  6600 008A                902      BNE MMERR
00003856  4BF8 200C                903      LEA INPUT,A5
0000385A  4DF8 200C                904      LEA INPUT,A6
0000385E  DCC1                     905      ADDA D1,A6
00003860  6100 FE58                906      BSR COMMAND_PARSE
00003864  4A41                     907      TST D1
00003866  6600 0076                908      BNE MMERR      
0000386A  3080                     909      MOVE.W D0,(A0)  ; Move data
0000386C  6092                     910      BRA MMWLOOP
0000386E                           911  
0000386E                           912  MM_LONG:             ;BYTE SIZE MM
0000386E  5988                     913      SUBA.L #4, A0     ; SUBTRACT JUST THE FIRST TIME
00003870                           914  MMLLOOP:    
00003870  143C 0010                915      MOVE.B #16,D2   
00003874  5848                     916      ADDA #4, A0     
00003876  43F8 26B5                917      LEA ADDRESS,A1  
0000387A  103C 000E                918      MOVE.B #14,D0   
0000387E  4E4F                     919      TRAP #15
00003880  2208                     920      MOVE.L A0,D1
00003882  103C 000F                921      MOVE.B #15,D0   
00003886  4E4F                     922      TRAP #15
00003888  43F8 26BE                923      LEA COLON,A1    
0000388C  103C 000E                924      MOVE.B #14,D0
00003890  4E4F                     925      TRAP #15
00003892  4281                     926      CLR.L D1
00003894  2210                     927      MOVE.L (A0),D1  
00003896  103C 000F                928      MOVE.B #15,D0
0000389A  4E4F                     929      TRAP #15        
0000389C  43F8 26BE                930      LEA COLON,A1
000038A0  103C 000E                931      MOVE.B #14,D0   
000038A4  4E4F                     932      TRAP #15
000038A6  43F8 200C                933      LEA INPUT,A1
000038AA  103C 0002                934      MOVE.B #2,D0    
000038AE  4E4F                     935      TRAP #15
000038B0  B27C 0000                936      CMP.W #0,D1     
000038B4  67BA                     937      BEQ MMLLOOP
000038B6  0C11 002E                938      CMP.B #$2E,(A1)   
000038BA  6700 0026                939      BEQ MM_EXIT
000038BE  B27C 0009                940      CMP.W #9,D1         
000038C2  6600 001A                941      BNE MMERR
000038C6  4BF8 200C                942      LEA INPUT,A5
000038CA  4DF8 200C                943      LEA INPUT,A6
000038CE  DCC1                     944      ADDA D1,A6
000038D0  6100 FDE8                945      BSR COMMAND_PARSE
000038D4  4A41                     946      TST D1
000038D6  6600 0006                947      BNE MMERR       
000038DA  2080                     948      MOVE.L D0,(A0)  
000038DC  6092                     949      BRA MMLLOOP
000038DE                           950  
000038DE                           951  MMERR:
000038DE  6100 FB8A                952     BSR MMHELP
000038E2                           953  MM_EXIT:
000038E2  4CDF 7FFF                954     MOVEM.L (SP)+, A0-A6/D0-D7
000038E6  4E75                     955     RTS
000038E8                           956  
000038E8                           957  
000038E8                           958  BMOV:                      
000038E8  48E7 8006                959     MOVEM.L A5/A6/D0,-(SP)
000038EC  5380                     960     SUBI.L #1,D0        ; D0 has count of data to move
000038EE                           961  BMOV_LOOP:  
000038EE  1CDD                     962     MOVE.B (A5)+,(A6)+  ; move contents from location in A5 to A6
000038F0  57C8 FFFC                963     DBEQ D0,BMOV_LOOP
000038F4  6000 0002                964     BRA BMOV_EXIT
000038F8                           965           
000038F8                           966  BMOV_EXIT:         
000038F8  4CDF 6001                967     MOVEM.L (SP)+,A5/A6/D0
000038FC  4E75                     968     RTS   
000038FE                           969          
000038FE                           970  
000038FE                           971      
000038FE                           972  BF:                      
000038FE  48E7 0004                973     MOVEM.L A5,-(SP)
00003902                           974  BF_LOOP:  
00003902  3AC0                     975     MOVE.W D0,(A5)+  ; fill memory location with data in D0
00003904  BCCD                     976     CMP A5,A6        ; keep going until we hit address2
00003906  6EFA                     977     BGT BF_LOOP
00003908  4CDF 2000                978     MOVEM.L (SP)+,A5
0000390C  4E75                     979     RTS
0000390E                           980           
0000390E                           981  
0000390E                           982    
0000390E                           983             
0000390E                           984  GO:                     
0000390E  48E7 E040                985     MOVEM.L A1/D0-D2, -(SP) 
00003912  43F8 2683                986     LEA GO_ADDRESS,A1       ; print address
00003916  103C 000E                987     MOVE.B #14,D0
0000391A  4E4F                     988     TRAP #15
0000391C  103C 000F                989     MOVE.B #15,D0
00003920  2238 26C8                990     MOVE.L REG_STORE,D1
00003924  143C 0010                991     MOVE.B #16,D2      ;convert to ascii
00003928  4E4F                     992     TRAP #15
0000392A  43F8 2572                993     LEA NL,A1
0000392E  103C 000D                994     MOVE.B #13,D0
00003932  4E4F                     995     TRAP #15
00003934  4CDF 0207                996     MOVEM.L (SP)+, A1/D0-D2
00003938  2F38 26C8                997     MOVE.L REG_STORE, -(SP) 
0000393C  4E75                     998     RTS                ; be able to retunrn after
0000393E                           999            
0000393E                          1000  
0000393E                          1001  *sorting algorithm. DO holds value for ascending or descending         
0000393E                          1002  SORTW:
0000393E  48E7 4026               1003     MOVEM.L A2/A5-A6/D1, -(SP)
00003942  244D                    1004     MOVE.L A5,A2         ; address1
00003944                          1005     
00003944                          1006  ** for i in range(1,n):
00003944                          1007  **      for j in range():
00003944                          1008  SORTW_FOR_I:
00003944  2A4A                    1009     MOVE.L A2,A5
00003946                          1010  SORTW_FOR_J:
00003946  4A00                    1011     TST.B D0             ;check for order first
00003948  6700 000A               1012     BEQ DESC             
0000394C  BB4D                    1013     CMP.W (A5)+,(A5)+    ; start compare of elements
0000394E  6212                    1014     BHI.S SWAP           ; if the value is higher, branch to swap elements       
00003950  6000 0006               1015     BRA SORTW_NEXT
00003954                          1016  DESC:
00003954  BB4D                    1017     CMP.W (A5)+,(A5)+    ; Compare current and next elements
00003956  650A                    1018     BLO.S SWAP          
00003958                          1019  SORTW_NEXT:
00003958  558D                    1020     SUBQ.L #2,A5         
0000395A  BDCD                    1021     CMP.L A5,A6
0000395C  66E8                    1022     BNE SORTW_FOR_J            ; Did we reach end of string? keep going if no
0000395E  6000 000A               1023     BRA SORTW_EXIT
00003962                          1024  SWAP:
00003962  2225                    1025     MOVE.L -(A5),D1      ; get back to start of comaparison and put the two values in D1. eg. D1=11112222
00003964  4841                    1026     SWAP.W D1            ; swap the word val. D1=22221111
00003966  2A81                    1027     MOVE.L D1,(A5)       ; move the values back into memory
00003968  60DA                    1028     BRA SORTW_FOR_I      ; restart for loop after a swap
0000396A                          1029     
0000396A                          1030  SORTW_EXIT:  
0000396A  4CDF 6402               1031     MOVEM.L (SP)+, A2/A5-A6/D1
0000396E  4E75                    1032     RTS
00003970                          1033     
00003970                          1034     
00003970                          1035  DF: 
00003970                          1036                         
00003970  48E7 FFFF               1037      MOVEM.L A0-A7/D0-D7,-(A7)
00003974  204F                    1038      MOVE.L A7,A0
00003976                          1039      
00003976                          1040      *DO*
00003976  43F8 259C               1041      LEA D0REG, A1
0000397A  143C 0010               1042      MOVE.B #16,D2
0000397E  103C 000E               1043      MOVE.B #14, D0
00003982  4E4F                    1044      TRAP #15
00003984  2210                    1045      MOVE.L (A0),D1
00003986  103C 000F               1046      MOVE.B #15, D0
0000398A  4E4F                    1047      TRAP #15
0000398C  103C 000D               1048      MOVE.B #13, D0
00003990  43F8 2572               1049      LEA NL,A1
00003994  4E4F                    1050      TRAP #15
00003996                          1051  
00003996                          1052      *D1*
00003996  43F8 25A1               1053      LEA D1REG, A1
0000399A  143C 0010               1054      MOVE.B #16,D2
0000399E  103C 000E               1055      MOVE.B #14, D0 
000039A2  4E4F                    1056      TRAP #15
000039A4  2228 0004               1057      MOVE.L (4,A0),D1
000039A8  103C 000F               1058      MOVE.B #15, D0
000039AC  4E4F                    1059      TRAP #15
000039AE  103C 000D               1060      MOVE.B #13, D0
000039B2  43F8 2572               1061      LEA NL,A1
000039B6  4E4F                    1062      TRAP #15
000039B8                          1063  
000039B8                          1064      
000039B8                          1065      *D2*
000039B8  43F8 25A6               1066      LEA D2REG, A1
000039BC  143C 0010               1067      MOVE.B #16,D2
000039C0  103C 000E               1068      MOVE.B #14, D0 
000039C4  4E4F                    1069      TRAP #15
000039C6  2228 0008               1070      MOVE.L (8,A0),D1
000039CA  103C 000F               1071      MOVE.B #15, D0
000039CE  4E4F                    1072      TRAP #15
000039D0  103C 000D               1073      MOVE.B #13, D0
000039D4  43F8 2572               1074      LEA NL,A1
000039D8  4E4F                    1075      TRAP #15
000039DA                          1076  
000039DA                          1077  
000039DA                          1078      *D3*
000039DA  43F8 25AB               1079      LEA D3REG, A1
000039DE  143C 0010               1080      MOVE.B #16,D2
000039E2  103C 000E               1081      MOVE.B #14, D0 
000039E6  4E4F                    1082      TRAP #15
000039E8  2228 000C               1083      MOVE.L (12,A0),D1
000039EC  103C 000F               1084      MOVE.B #15, D0
000039F0  4E4F                    1085      TRAP #15
000039F2  103C 000D               1086      MOVE.B #13, D0
000039F6  43F8 2572               1087      LEA NL,A1
000039FA  4E4F                    1088      TRAP #15
000039FC                          1089      
000039FC                          1090      *D4*
000039FC  43F8 25B0               1091      LEA D4REG, A1
00003A00  143C 0010               1092      MOVE.B #16,D2
00003A04  103C 000E               1093      MOVE.B #14, D0 
00003A08  4E4F                    1094      TRAP #15
00003A0A  2228 0010               1095      MOVE.L (16,A0),D1
00003A0E  103C 000F               1096      MOVE.B #15, D0
00003A12  4E4F                    1097      TRAP #15
00003A14  103C 000D               1098      MOVE.B #13, D0
00003A18  43F8 2572               1099      LEA NL,A1
00003A1C  4E4F                    1100      TRAP #15
00003A1E                          1101      
00003A1E                          1102      *D5*
00003A1E  43F8 25B5               1103      LEA D5REG, A1
00003A22  143C 0010               1104      MOVE.B #16,D2
00003A26  103C 000E               1105      MOVE.B #14, D0 
00003A2A  4E4F                    1106      TRAP #15
00003A2C  2228 0014               1107      MOVE.L (20,A0),D1
00003A30  103C 000F               1108      MOVE.B #15, D0
00003A34  4E4F                    1109      TRAP #15
00003A36  103C 000D               1110      MOVE.B #13, D0
00003A3A  43F8 2572               1111      LEA NL,A1
00003A3E  4E4F                    1112      TRAP #15
00003A40                          1113      
00003A40                          1114      *D6*
00003A40  43F8 25BA               1115      LEA D6REG, A1
00003A44  143C 0010               1116      MOVE.B #16,D2
00003A48  103C 000E               1117      MOVE.B #14, D0 
00003A4C  4E4F                    1118      TRAP #15
00003A4E  2228 0018               1119      MOVE.L (24,A0),D1
00003A52  103C 000F               1120      MOVE.B #15, D0
00003A56  4E4F                    1121      TRAP #15
00003A58  103C 000D               1122      MOVE.B #13, D0
00003A5C  43F8 2572               1123      LEA NL,A1
00003A60  4E4F                    1124      TRAP #15
00003A62                          1125      
00003A62                          1126      *D7*
00003A62  43F8 25BF               1127      LEA D7REG, A1
00003A66  143C 0010               1128      MOVE.B #16,D2
00003A6A  103C 000E               1129      MOVE.B #14, D0 
00003A6E  4E4F                    1130      TRAP #15
00003A70  2228 001C               1131      MOVE.L (28,A0),D1
00003A74  103C 000F               1132      MOVE.B #15, D0
00003A78  4E4F                    1133      TRAP #15
00003A7A  103C 000D               1134      MOVE.B #13, D0
00003A7E  43F8 2572               1135      LEA NL,A1
00003A82  4E4F                    1136      TRAP #15
00003A84                          1137      
00003A84                          1138      *A0*
00003A84  43F8 2573               1139      LEA A0REG, A1
00003A88  143C 0010               1140      MOVE.B #16,D2
00003A8C  103C 000E               1141      MOVE.B #14, D0 
00003A90  4E4F                    1142      TRAP #15
00003A92  2228 0020               1143      MOVE.L (32,A0),D1
00003A96  103C 000F               1144      MOVE.B #15, D0
00003A9A  4E4F                    1145      TRAP #15
00003A9C  103C 000D               1146      MOVE.B #13, D0
00003AA0  43F8 2572               1147      LEA NL,A1
00003AA4  4E4F                    1148      TRAP #15
00003AA6                          1149      
00003AA6                          1150      *A1*
00003AA6  43F8 2578               1151      LEA A1REG, A1
00003AAA  143C 0010               1152      MOVE.B #16,D2
00003AAE  103C 000E               1153      MOVE.B #14, D0 
00003AB2  4E4F                    1154      TRAP #15
00003AB4  2228 0024               1155      MOVE.L (36,A0),D1
00003AB8  103C 000F               1156      MOVE.B #15, D0
00003ABC  4E4F                    1157      TRAP #15
00003ABE  103C 000D               1158      MOVE.B #13, D0
00003AC2  43F8 2572               1159      LEA NL,A1
00003AC6  4E4F                    1160      TRAP #15
00003AC8                          1161      
00003AC8                          1162      *A2*
00003AC8  43F8 257C               1163      LEA A2REG, A1
00003ACC  143C 0010               1164      MOVE.B #16,D2
00003AD0  103C 000E               1165      MOVE.B #14, D0 
00003AD4  4E4F                    1166      TRAP #15
00003AD6  2228 0028               1167      MOVE.L (40,A0),D1
00003ADA  103C 000F               1168      MOVE.B #15, D0
00003ADE  4E4F                    1169      TRAP #15
00003AE0  103C 000D               1170      MOVE.B #13, D0
00003AE4  43F8 2572               1171      LEA NL,A1
00003AE8  4E4F                    1172      TRAP #15
00003AEA                          1173      
00003AEA                          1174      *A3*
00003AEA  43F8 2581               1175      LEA A3REG, A1
00003AEE  143C 0010               1176      MOVE.B #16,D2
00003AF2  103C 000E               1177      MOVE.B #14, D0 
00003AF6  4E4F                    1178      TRAP #15
00003AF8  2228 002C               1179      MOVE.L (44,A0),D1
00003AFC  103C 000F               1180      MOVE.B #15, D0
00003B00  4E4F                    1181      TRAP #15
00003B02  103C 000D               1182      MOVE.B #13, D0
00003B06  43F8 2572               1183      LEA NL,A1
00003B0A  4E4F                    1184      TRAP #15
00003B0C                          1185      
00003B0C                          1186      *A4*
00003B0C  43F8 2586               1187      LEA A4REG, A1
00003B10  143C 0010               1188      MOVE.B #16,D2
00003B14  103C 000E               1189      MOVE.B #14, D0 
00003B18  4E4F                    1190      TRAP #15
00003B1A  2228 0030               1191      MOVE.L (48,A0),D1
00003B1E  103C 000F               1192      MOVE.B #15, D0
00003B22  4E4F                    1193      TRAP #15
00003B24  103C 000D               1194      MOVE.B #13, D0
00003B28  43F8 2572               1195      LEA NL,A1
00003B2C  4E4F                    1196      TRAP #15
00003B2E                          1197  
00003B2E                          1198      *A5*
00003B2E  43F8 258B               1199      LEA A5REG, A1
00003B32  143C 0010               1200      MOVE.B #16,D2
00003B36  103C 000E               1201      MOVE.B #14, D0
00003B3A  4E4F                    1202      TRAP #15
00003B3C  2228 0034               1203      MOVE.L (52,A0),D1
00003B40  103C 000F               1204      MOVE.B #15, D0
00003B44  4E4F                    1205      TRAP #15
00003B46  103C 000D               1206      MOVE.B #13, D0
00003B4A  43F8 2572               1207      LEA NL,A1
00003B4E  4E4F                    1208      TRAP #15
00003B50                          1209      
00003B50                          1210      *A6*
00003B50  43F8 2590               1211      LEA A6REG, A1
00003B54  143C 0010               1212      MOVE.B #16,D2
00003B58  103C 000E               1213      MOVE.B #14, D0 
00003B5C  4E4F                    1214      TRAP #15
00003B5E  2228 0038               1215      MOVE.L (56,A0),D1
00003B62  103C 000F               1216      MOVE.B #15, D0
00003B66  4E4F                    1217      TRAP #15
00003B68  103C 000D               1218      MOVE.B #13, D0
00003B6C  43F8 2572               1219      LEA NL,A1
00003B70  4E4F                    1220      TRAP #15
00003B72                          1221  
00003B72                          1222      *A7*
00003B72  43F8 2594               1223      LEA A7REG, A1
00003B76  143C 0010               1224      MOVE.B #16,D2
00003B7A  103C 000E               1225      MOVE.B #14, D0 
00003B7E  4E4F                    1226      TRAP #15
00003B80  2228 003C               1227      MOVE.L (60,A0),D1
00003B84  103C 000F               1228      MOVE.B #15, D0
00003B88  4E4F                    1229      TRAP #15
00003B8A  103C 000D               1230      MOVE.B #13, D0
00003B8E  43F8 2572               1231      LEA NL,A1
00003B92  4E4F                    1232      TRAP #15
00003B94                          1233  
00003B94                          1234      
00003B94                          1235      *PC*
00003B94  43F8 25CF               1236      LEA PCREG, A1
00003B98  143C 0010               1237      MOVE.B #16,D2
00003B9C  103C 000E               1238      MOVE.B #14, D0 
00003BA0  4E4F                    1239      TRAP #15
00003BA2  2238 26C2               1240      MOVE.L PC_STORE,D1 ; get pc val
00003BA6  103C 000F               1241      MOVE.B #15, D0
00003BAA  4E4F                    1242      TRAP #15
00003BAC  103C 000D               1243      MOVE.B #13, D0
00003BB0  43F8 2572               1244      LEA NL,A1
00003BB4  4E4F                    1245      TRAP #15
00003BB6                          1246      
00003BB6                          1247      *SR*
00003BB6  43F8 25CA               1248      LEA SRREG, A1
00003BBA  143C 0010               1249      MOVE.B #16,D2
00003BBE  103C 000E               1250      MOVE.B #14, D0
00003BC2  4E4F                    1251      TRAP #15
00003BC4  4281                    1252      CLR.L D1
00003BC6  3238 26C8               1253      MOVE.W REG_STORE,D1
00003BCA  103C 000F               1254      MOVE.B #15, D0
00003BCE  4E4F                    1255      TRAP #15
00003BD0  103C 000D               1256      MOVE.B #13, D0
00003BD4  43F8 2572               1257      LEA NL,A1
00003BD8  4E4F                    1258      TRAP #15
00003BDA                          1259  
00003BDA                          1260      
00003BDA                          1261      *USP*
00003BDA  40C6                    1262      MOVE.W SR,D6
00003BDC  0886 000D               1263      BCLR #13,D6     
00003BE0  46C6                    1264      MOVE.W D6,SR
00003BE2  43F8 25C4               1265      LEA USPREG, A1
00003BE6  143C 0010               1266      MOVE.B #16,D2
00003BEA  103C 000E               1267      MOVE.B #14, D0 
00003BEE  4E4F                    1268      TRAP #15
00003BF0  220F                    1269      MOVE.L A7,D1
00003BF2  103C 000F               1270      MOVE.B #15, D0
00003BF6  4E4F                    1271      TRAP #15
00003BF8  103C 000D               1272      MOVE.B #13, D0
00003BFC  43F8 2572               1273      LEA NL,A1
00003C00  4E4F                    1274      TRAP #15
00003C02  4E41                    1275      TRAP #1 
00003C04                          1276     
00003C04                          1277  BSCH:
00003C04  48E7 FFFE               1278      MOVEM.L A0-A6/D0-D7, -(SP)
00003C08  2449                    1279      MOVE.L A1,A2    ; address1 in A0, address2 in A1, String in A5
00003C0A  95C8                    1280      SUB.L A0,A2     ; len of search space
00003C0C  B68A                    1281      CMP.L A2,D3     ; if smaller than string no match
00003C0E  6E00 001E               1282      BGT NO_MATCH_BSCH   ;d3 Hhas len
00003C12  2449                    1283      MOVE.L A1,A2
00003C14  95C3                    1284      SUB.L D3,A2
00003C16                          1285  FOR_C_IN_SPACE:
00003C16  2C48                    1286      MOVE.L A0,A6    ; address1
00003C18  3003                    1287      MOVE.W D3,D0    ; len
00003C1A  6100 F95E               1288      BSR CHECK_MATCH
00003C1E  4A00                    1289      TST.B D0
00003C20  6700 001C               1290      BEQ FOUND
00003C24  5288                    1291      ADD.L #1,A0    ; c += 1
00003C26  B1CA                    1292      CMP.L A2,A0
00003C28  6E00 0004               1293      BGT NO_MATCH_BSCH    ;reached end, not found
00003C2C  60E8                    1294      BRA FOR_C_IN_SPACE
00003C2E                          1295      
00003C2E                          1296  NO_MATCH_BSCH:
00003C2E  43F8 2690               1297      LEA NO_STRING_MATCH,A1       
00003C32  103C 000D               1298      MOVE.B #13,D0
00003C36  4E4F                    1299      TRAP #15
00003C38  4CDF 7FFF               1300      MOVEM.L (SP)+,A0-A6/D0-D7
00003C3C  4E75                    1301      RTS
00003C3E                          1302  FOUND:
00003C3E  43F8 26A2               1303      LEA STRING_MATCH,A1       ; print found text
00003C42  103C 000D               1304      MOVE.B #13,D0
00003C46  4E4F                    1305      TRAP #15
00003C48  43F8 26B5               1306      LEA ADDRESS,A1  
00003C4C  103C 000E               1307      MOVE.B #14,D0   
00003C50  4E4F                    1308      TRAP #15
00003C52  2208                    1309      MOVE.L A0,D1
00003C54  143C 0010               1310      MOVE.B #16,D2   
00003C58  103C 000F               1311      MOVE.B #15,D0   
00003C5C  4E4F                    1312      TRAP #15
00003C5E  43F8 26BE               1313      LEA COLON,A1    
00003C62  103C 000E               1314      MOVE.B #14,D0
00003C66  4E4F                    1315      TRAP #15
00003C68  2248                    1316      MOVE.L A0,A1    
00003C6A  103C 0000               1317      MOVE.B #0,D0
00003C6E  3203                    1318      MOVE.W D3,D1
00003C70  4E4F                    1319      TRAP #15                  
00003C72  4CDF 7FFF               1320      MOVEM.L (SP)+,A0-A6/D0-D7
00003C76  4E75                    1321      RTS
00003C78                          1322  
00003C78                          1323        
00003C78                          1324      
00006000                          1325      ORG $6000       ; Go
00006000  700D                    1326      MOVE.L #13,D0
00006002  43F8 20B2               1327      LEA USERPROGRAM,A1
00006006  4E4F                    1328      TRAP #15
00006008  6000 D03E               1329      BRA SHELL 
0000600C                          1330      
0000600C                          1331      *technically all these use go
00006010                          1332      ORG $6010
00006010= F000                    1333      DC.W $F000      ; Line F emulator
00006012  6000 D034               1334      BRA SHELL
00006016                          1335      
00006020                          1336      ORG $6020
00006020= A000                    1337      DC.W $A000      ; Line A emulator
00006022  6000 D024               1338      BRA SHELL
00006026                          1339      
00006030                          1340      ORG $6030       ; Illegal instruciton
00006030= 4AFA                    1341      DC.W $4AFA          
00006032  6000 D014               1342      BRA SHELL
00006036                          1343      
00006040                          1344      ORG $6040       ; divide by zero
00006040  7001                    1345      MOVE.L #1,D0  
00006042  7200                    1346      MOVE.L #0,D1
00006044  80C1                    1347      DIVU.W D1,D0
00006046  6000 D000               1348      BRA SHELL
0000604A                          1349  
00006050                          1350      ORG $6050
00006050  303C 0001               1351      MOVE.W #1,D0   ; check instruction
00006054  4241                    1352      CLR.W D1
00006056  4181                    1353      CHK.W D1,D0
00006058  6000 CFEE               1354      BRA SHELL
0000605C                          1355      
00006060                          1356      ORG $6060
00006060  027C 00FF               1357      ANDI.W #$00FF,SR    ;privelage error
00006064  007C 1000               1358      OR.W #$1000, SR     
00006068  6000 CFDE               1359      BRA SHELL
0000606C                          1360      
0000606C                          1361      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0REG               2573
A1REG               2578
A2REG               257C
A3REG               2581
A4REG               2586
A5REG               258B
A6REG               2590
A7REG               2594
ADDRESS             26B5
ADDRESS_ER          25D4
ADDRESS_ERRORV      35AC
ALL_HELP_PROMPTS    3532
BF                  38FE
BFCOMMAND           208C
BFHELP              34BA
BFHELPPROMPT        2357
BF_ERR              32FC
BF_FUNC             32A0
BF_LOOP             3902
BLOOP               3790
BMOV                38E8
BMOVCOMMAND         208F
BMOVHELP            34CE
BMOVHELPPROMPT      22FB
BMOV_ERR            3244
BMOV_EXIT           38F8
BMOV_FUNC           31E8
BMOV_LOOP           38EE
BSCH                3C04
BSCHCOMMAND         2094
BSCHHELP            34E2
BSCHHELPPROMPT      23E7
BSCH_ERR            335E
BSCH_FUNC           3308
BTSTCOMMAND         2087
BTSTHELPPROMPT      22DD
CHECK_ER            2637
CHECK_INSTRV        364E
CHECK_MATCH         357A
COLON               26BE
COMMAND_PARSE       36BA
CR                  D
CRCCOM              20A4
D0REG               259C
D1REG               25A1
D2REG               25A6
D3REG               25AB
D4REG               25B0
D5REG               25B5
D6REG               25BA
D7REG               25BF
DESC                3954
DF                  3970
DFCOMMAND           209C
DFHELPPROMPT        248F
DF_FUNC             33A6
DIVIDE_ZEROV        362A
DIVIDE_Z_ER         2625
ECHOCOMMAND         20AD
ECHOHELP            351E
ECHOHELPPROMPT      2526
ECHO_ERR            343A
ECHO_FUNC           340C
END_FOUND           3578
ERR                 345E
EXITCOMMAND         209F
EXITHELPPROMPT      255C
EXIT_FUNC           3446
FIND_END            3564
FONT                20A8
FONTHELP            350A
FONTHELPROMPT       24B0
FONT_ERR            3400
FONT_FUNC           33D0
FOR_C_IN_SPACE      3C16
FOR_C_IN_STRING     3586
FOR_PARSE           36DA
FOUND               3C3E
GO                  390E
GOCOMMAND           2099
GOHELP              34F6
GOHELPPROMPT        2455
GO_ADDRESS          2683
GO_ERR              339A
GO_FUNC             336A
HELPCOMMAND         2071
HEX_CHECK           3714
ILLEGAL_ER          25E8
ILLEGAL_INSTRV      35E2
INIT                3040
INPUT               200C
LF                  A
LINEAV              3672
LINEA_ER            264F
LINEFV              3696
LINEF_ER            2669
MATCH               3596
MD                  373C
MDSP                3728
MDSPCOMMAND         2076
MDSPHELP            34A6
MDSPHELPPROMPT      20C6
MDSP_2_ARGS         30B2
MDSP_ERR            30CC
MDSP_EX             30C0
MM                  377A
MMCOMMAND           2081
MMERR               38DE
MMHELP              346A
MMHELPPROMPT        21FA
MMLLOOP             3870
MMWLOOP             3800
MM_B                3130
MM_BYTE             378E
MM_CHECK_SIZE       3108
MM_EXIT             38E2
MM_FUNC             30D8
MM_L                314C
MM_LONG             386E
MM_W                313E
MM_WORD             37FE
MSCOMMAND           2084
MSHELP              347E
MSHELPPROMPT        2269
MS_ERR              3294
MS_FUNC             3250
NL                  2572
NO_MATCH            359C
NO_MATCH_BSCH       3C2E
NO_STRING_MATCH     2690
NUM_CHECK           3708
PARSE_DONE          3722
PARSE_ERR           3720
PCREG               25CF
PC_STORE            26C2
PC_VAL              33B8
PRIVALAGE_ER        2607
PRIVALEGEV          3606
REGNUM              26C6
REG_STORE           26C8
SHELL               3048
SHELL_PROMPT        2000
SHELL_RESET         3044
SORTA               31C8
SORTD               31B4
SORTW               393E
SORTWCOMMAND        207B
SORTWHELP           3492
SORTWHELPPROMPT     2143
SORTW_ERR           31DC
SORTW_EXIT          396A
SORTW_FOR_I         3944
SORTW_FOR_J         3946
SORTW_NEXT          3958
SRREG               25CA
START               3000
STRING_MATCH        26A2
SWAP                3962
SW_FUNC             315A
TRAPING_HOES        35A4
USERPROGRAM         20B2
USPREG              25C4
