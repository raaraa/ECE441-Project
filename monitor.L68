00003000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/30/2018 8:54:23 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Monitor Project
00000000                             3  * Written by : Raul Renteria
00000000                             4  * Date       :
00000000                             5  * Description: HELL on earth/Simplified version of TUTOR program
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =0000000D                  8  CR EQU $0D  ; Carrigage return
00000000  =0000000A                  9  LF EQU $0A  ; New Line
00002000                            10      ORG    $2000
00002000                            11      
00002000= 4D 4F 4E 49 54 4F ...     12  SHELL_PROMPT:  DC.B    'MONITOR441>',0
0000200C                            13  INPUT   DS.B 100         ;input buffer for commands
00002070= 00                        14          DC.B 0
00002071                            15          
00002071                            16  *Commands to compare input stings to*
00002071= 48 45 4C 50 00            17  HELPCOMMAND: DC.B 'HELP',0
00002076= 4D 44 53 50 00            18  MDSPCOMMAND DC.B 'MDSP',0
0000207B= 53 4F 52 54 57 00         19  SORTWCOMMAND DC.B 'SORTW',0
00002081= 4D 4D 00                  20  MMCOMMAND DC.B 'MM',0
00002084= 4D 53 00                  21  MSCOMMAND DC.B 'MS',0
00002087= 42 54 53 54 00            22  BTSTCOMMAND DC.B 'BTST',0
0000208C= 42 46 00                  23  BFCOMMAND DC.B 'BF',0
0000208F= 42 4D 4F 56 00            24  BMOVCOMMAND DC.B 'BMOV',0
00002094= 42 53 43 48 00            25  BSCHCOMMAND DC.B 'BSCH',0
00002099= 47 4F 00                  26  GOCOMMAND DC.B 'GO',0
0000209C= 44 46 00                  27  DFCOMMAND DC.B 'DF',0
0000209F= 45 58 49 54 00            28  EXITCOMMAND DC.B 'EXIT',0
000020A4= 43 52 43 00               29  CRCCOM DC.B 'CRC',0
000020A8= 46 4F 4E 54 00            30  FONT DC.B 'FONT',0
000020AD= 45 43 48 4F 00            31  ECHOCOMMAND DC.B 'ECHO',0
000020B2                            32      
000020B2                            33  **Help Display prompts**
000020B2= 54 48 49 53 20 49 ...     34  USERPROMPT DC.B 'THIS IS THE USER PROGRAM',0
000020CB= 4D 44 53 50 3A 20 ...     35  MDSPHELPPROMPT DC.B 'MDSP: Outputs Address and Memory contents',CR,LF,'MDSP <address1> <address2> eg: MDSP $908 $90A<CR>',CR,LF,0
0000212A= 53 4F 52 54 57 3A ...     36  SORTWHELPPROMPT DC.B 'SORTW: Sorts a block of memory. Default: Descending Order.',CR,LF,'A: Ascending order',CR,LF,'D: Descending order',CR,LF,'SORTW <address1> <address2> <order>',CR,LF,0
000021B5= 4D 4D 3A 20 44 69 ...     37  MMHELPPROMPT DC.B 'MM: Displays and optionally modifies contents of memory at the specified address',CR,LF,'MM <size> <address>',CR,LF,0
0000221D= 4D 53 3A 20 53 74 ...     38  MSHELPPROMPT DC.B 'MS: Stores an ASCII string into memory starting at ADDRESS',CR,LF,'MS <ADDRESS> <STRING>',CR,LF,0
00002271= 42 54 53 54 3A 20 ...     39  BTSTHELPPROMPT DC.B 'BTST: <address1> <address2>',CR,LF,0
0000228F= 42 4D 4F 56 3A 20 ...     40  BMOVHELPPROMPT DC.B 'BMOV: Moves bytes of memory from <address1> to <address2>',CR,LF,'BMOV <address1> <address2> <n>',CR,LF,0
000022EB= 42 46 3A 20 46 69 ...     41  BFHELPPROMPT DC.B 'BF: Fills memory from first address to second address with zero padded word data',CR,LF,'BF <address1> <address2> <data>',CR,LF,0
0000235F= 42 53 43 48 3A 20 ...     42  BSCHHELPPROMPT DC.B 'BSCH: Searches for literal <string>  between <address1> and <address2>',CR,LF,'BSCH <address1> <address2> <string>',CR,LF,0
000023CD= 47 4F 3A 20 42 65 ...     43  GOHELPPROMPT DC.B 'GO: Begin execution of program at address',CR,LF,'GO <address>',CR,LF,0
00002407= 44 46 3A 20 44 69 ...     44  DFHELPPROMPT DC.B 'DF: Displays register contents',CR,LF,0 
00002428= 45 58 49 54 3A 20 ...     45  EXITHELPPROMPT DC.B 'EXIT: Stops Program',CR,LF,0
0000243E= 00                        46  NL: DC.B 0
0000243F                            47      
0000243F                            48  **Print out for registers**
0000243F= 41 30 3A 20 00            49  A0REG: DC.B 'A0: ',0
00002444= 41 31 3A 00               50  A1REG: DC.B 'A1:',0
00002448= 41 32 3A 20 00            51  A2REG: DC.B 'A2: ',0
0000244D= 41 33 3A 20 00            52  A3REG: DC.B 'A3: ',0
00002452= 41 34 3A 20 00            53  A4REG: DC.B 'A4: ',0
00002457= 41 35 3A 20 00            54  A5REG: DC.B 'A5: ',0
0000245C= 41 36 3A 00               55  A6REG: DC.B 'A6:',0
00002460= 41 37 2F 53 53 50 ...     56  A7REG: DC.B 'A7/SSP:',0
00002468= 44 30 3A 20 00            57  D0REG: DC.B 'D0: ',0
0000246D= 44 31 3A 20 00            58  D1REG: DC.B 'D1: ',0
00002472= 44 32 3A 20 00            59  D2REG: DC.B 'D2: ',0
00002477= 44 33 3A 20 00            60  D3REG: DC.B 'D3: ',0
0000247C= 44 34 3A 20 00            61  D4REG: DC.B 'D4: ',0
00002481= 44 35 3A 20 00            62  D5REG: DC.B 'D5: ',0
00002486= 44 36 3A 20 00            63  D6REG: DC.B 'D6: ',0
0000248B= 44 37 3A 20 00            64  D7REG: DC.B 'D7: ',0
00002490= 55 53 50 3A 20 00         65  USPREG: DC.B 'USP: ',0
00002496= 53 52 3A 20 00            66  SRREG: DC.B 'SR: ',0
0000249B= 50 43 3A 20 00            67  PCREG: DC.B 'PC: ',0
000024A0                            68  
000024A0                            69  **exception prompts**
000024A0                            70  ** GO $6010 - LINE F
000024A0                            71  ** GO $6020 - LINE A
000024A0                            72  ** GO $6030 - ILLEGAL INSTUCTION
000024A0                            73  ** GO $6040 - Divide by Zero
000024A0                            74  ** GO $6050 - Check
000024A0                            75  ** GO $6060 - Privalege
000024A0= 41 64 64 72 65 73 ...     76  ADDRESS_ER: DC.B 'Address Trap Error ',0
000024B4= 49 6C 6C 65 67 61 ...     77  ILLEGAL_ER: DC.B 'Illegal Instruction Trap Error',0
000024D3= 50 72 69 76 65 6C ...     78  PRIVALAGE_ER: DC.B 'Privelage Violation Exception',0
000024F1= 44 69 76 69 64 65 ...     79  DIVIDE_Z_ER: DC.B 'Divide by 0 error',0
00002503= 43 68 65 63 6B 20 ...     80  CHECK_ER: DC.B 'Check instruction error',0
0000251B= 4C 69 6E 65 20 41 ...     81  LINEA_ER: DC.B 'Line A Emulator exception',0
00002535= 4C 69 6E 65 20 46 ...     82  LINEF_ER: DC.B 'Line F Emulator exception',0 
0000254F                            83  
0000254F                            84  *Strings to print out
0000254F= 47 4F 20 41 44 44 ...     85  GO_ADDRESS: DC.B 'GO ADDRESS: ',0
0000255C= 44 69 64 6E 74 20 ...     86  NO_STRING_MATCH DC.B 'Didnt find string',0
0000256E= 46 6F 75 6E 64 20 ...     87  STRING_MATCH DC.B 'Found the String!!',0
00002581= 20 3A 20 00               88  COLON: DC.B ' : ',0
00002585= 41 44 44 52 45 53 ...     89  ADDRESS: DC.B 'ADDRESS ',0
0000258E                            90  PC_STORE DS.L 1
00002592                            91  REGNUM DS.B 1
00002594                            92  REG_STORE DS.L 1
00002598                            93    
00002598                            94        
00003000                            95      ORG    $3000
00003000                            96  START:
00003000                            97  
00003000                            98      **exception vectors**
00003000  21FC 0000348C 000C        99      MOVE.L #ADDRESS_ERRORV,$C
00003008  21FC 000034C2 0010       100      MOVE.L #ILLEGAL_INSTRV,$10
00003010  21FC 0000350A 0014       101      MOVE.L #DIVIDE_ZEROV,$14
00003018  21FC 0000352E 0018       102      MOVE.L #CHECK_INSTRV,$18
00003020  21FC 000034E6 0020       103      MOVE.L #PRIVALEGEV,$20
00003028  21FC 00003552 0028       104      MOVE.L #LINEAV,$28
00003030  21FC 00003576 002C       105      MOVE.L #LINEFV,$2C
00003038  21FC 00003484 0084       106      MOVE.L #TRAPING_HOES,$84  
00003040                           107      
00003040                           108  INIT:
00003040  6000 0006                109      BRA SHELL
00003044                           110  SHELL_RESET:
00003044  4CDF 7FFF                111      MOVEM.L (SP)+, A0-A6/D0-D7
00003048                           112  SHELL:
00003048  48E7 FFFE                113      MOVEM.L A0-A6/D0-D7, -(SP)
0000304C  43F8 2000                114      LEA SHELL_PROMPT,A1       ; will print out MONITOR441>
00003050  103C 000E                115      MOVE.B #14,D0
00003054  4E4F                     116      TRAP #15
00003056  43F8 200C                117      LEA INPUT,A1
0000305A  103C 0002                118      MOVE.B #2,D0        ; parse cmd and read input
0000305E  4E4F                     119      TRAP #15
00003060  3C01                     120      MOVE.W D1,D6        ; keep length of string for comparisons
00003062  B27C 0000                121      CMP.W #0,D1         ; check if the input string is empty
00003066  67DC                     122      BEQ SHELL_RESET     ; if empty, restart prompt
00003068  4BF8 200C                123      LEA INPUT,A5        ; put into A5
0000306C  4DF8 2076                124      LEA MDSPCOMMAND,A6  ; load MDSP command into A6
00003070  303C 0004                125      MOVE.W #4,D0        ; since MDSP is 4 char long, put 4 into D0 for comp
00003074  6100 03E4                126      BSR CHECK_MATCH      ; compare the two stirngs
00003078  4A40                     127      TST.W D0            ; check if D0 == 0
0000307A  6600 005C                128      BNE MM_FUNC         ; if false, there is no match, so branch to test next instruction
0000307E                           129      
0000307E                           130      **Code to execute MDSP if the test above is true.
0000307E  2A49                     131      MOVE.L A1,A5
00003080  5A4D                     132      ADD #5,A5           ; Skip to address1
00003082  2C4D                     133      MOVE.L A5,A6
00003084  6100 03BE                134      BSR FIND_END        ; find the end of address1
00003088  6100 0510                135      BSR COMMAND_PARSE         ; A5 has begining of address1 and A6 has end of this. parse this address.
0000308C  4A41                     136      TST D1              ; D0 will hold address1
0000308E  6600 003C                137      BNE MDSP_ERR        ; wring type of address
00003092  2400                     138      MOVE.L D0,D2
00003094  528E                     139      ADD.L #1,A6         ; go to address2
00003096  2A4E                     140      MOVE.L A6,A5         
00003098  6100 03AA                141      BSR FIND_END        ; find end of address2
0000309C  D3C6                     142      ADD.L D6,A1         ; increment A1 to end of command
0000309E  BDC9                     143      CMP.L A1,A6         ; compare contents of A1 to A6 to ensure address2 is correct
000030A0  6700 0010                144      BEQ MDSP_2_ARGS     ; two addresses were given
000030A4  2A42                     145      MOVE.L D2,A5        ; A5= address1, A6=address2
000030A6  2C42                     146      MOVE.L D2,A6
000030A8  DDFC 00000010            147      ADD.L #16,A6        ; add 16 to address1 since only 1 address was given
000030AE  6000 0010                148      BRA MDSP_EX
000030B2                           149      
000030B2                           150  MDSP_2_ARGS:             
000030B2  6100 04E6                151      BSR COMMAND_PARSE         
000030B6  4A41                     152      TST D1
000030B8  6600 0012                153      BNE MDSP_ERR
000030BC  2A42                     154      MOVE.L D2,A5
000030BE  2C40                     155      MOVE.L D0,A6
000030C0                           156  MDSP_EX:
000030C0  6100 0546                157      BSR MDSP
000030C4  4CDF 7FFF                158      MOVEM.L (SP)+, A0-A6/D0-D7
000030C8  6000 FF7E                159      BRA SHELL
000030CC                           160      
000030CC                           161  MDSP_ERR:
000030CC  6100 02EA                162      BSR MDSPHELP      
000030D0  4CDF 7FFF                163      MOVEM.L (SP)+, A0-A6/D0-D7
000030D4  6000 FF72                164      BRA SHELL
000030D8                           165  
000030D8                           166  *Check for MM 
000030D8                           167  MM_FUNC:
000030D8  4DF8 2081                168      LEA MMCOMMAND,A6
000030DC  303C 0002                169      MOVE.W #2,D0    ; MM command size is 2
000030E0  6100 0378                170      BSR CHECK_MATCH ; check if input is MM
000030E4  4A40                     171      TST.W D0                   
000030E6  6600 0072                172      BNE SW_FUNC     ; Not MM? Go to SORTW
000030EA                           173      
000030EA                           174      **Code to execute MM
000030EA  5A8D                     175      ADD.L #5,A5     ; skip to size arg
000030EC  4DF8 200C                176      LEA INPUT,A6
000030F0  DDC6                     177      ADD.L D6,A6     ; PPOINT A6 to end of address
000030F2  6100 04A6                178      BSR COMMAND_PARSE
000030F6  4A41                     179      TST D1
000030F8  6700 000E                180      BEQ MM_CHECK_SIZE
000030FC  6100 027E                181      BSR MMHELP      
00003100  4CDF 7FFF                182      MOVEM.L (SP)+, A0-A6/D0-D7
00003104  6000 FF42                183      BRA SHELL
00003108                           184      
00003108                           185  MM_CHECK_SIZE:
00003108  558D                     186      SUB.L #2,A5     ; decrement A5 by two to go back to the size
0000310A  2040                     187      MOVE.L D0,A0    ; put address to modify in D0 into A0
0000310C  0C15 0042                188      CMP.B #'B',(A5) ; check if the parsed arguement is B.
00003110  6700 001E                189      BEQ MM_B
00003114  0C15 0057                190      CMP.B #'W',(A5)
00003118  6700 0024                191      BEQ MM_W
0000311C  0C15 004C                192      CMP.B #'L',(A5)
00003120  6700 002A                193      BEQ MM_L
00003124  6100 0256                194      BSR MMHELP       ; if it's not either one of the three. There's an error.
00003128  4CDF 7FFF                195      MOVEM.L (SP)+, A0-A6/D0-D7
0000312C  6000 FF1A                196      BRA SHELL
00003130                           197  MM_B:           
00003130  4287                     198      CLR.L D7
00003132  6100 0526                199      BSR MM
00003136  4CDF 7FFF                200      MOVEM.L (SP)+, A0-A6/D0-D7
0000313A  6000 FF0C                201      BRA SHELL
0000313E                           202  MM_W:                 
0000313E  7E01                     203      MOVE.L #1, D7
00003140  6100 0518                204      BSR MM
00003144  4CDF 7FFF                205      MOVEM.L (SP)+, A0-A6/D0-D7
00003148  6000 FEFE                206      BRA SHELL
0000314C                           207  MM_L:             
0000314C  7E02                     208      MOVE.L #2, D7
0000314E  6100 050A                209      BSR MM
00003152  4CDF 7FFF                210      MOVEM.L (SP)+, A0-A6/D0-D7
00003156  6000 FEF0                211      BRA SHELL 
0000315A                           212  
0000315A                           213  *Check for SORTW
0000315A                           214  SW_FUNC:
0000315A  4DF8 207B                215      LEA SORTWCOMMAND,A6 ; put sortw into A6     
0000315E  303C 0005                216      MOVE.W #5,D0 
00003162                           217      
00003162                           218      
00003162                           219  MS_FUNC:
00003162  4DF8 2084                220      LEA MSCOMMAND,A6    ; put MS into A6
00003166  303C 0002                221      MOVE.W #2,D0
0000316A  6100 02EE                222      BSR CHECK_MATCH
0000316E  4A40                     223      TST.W D0            
00003170  6600 0040                224      BNE BF_FUNC         
00003174                           225      
00003174  568D                     226      ADD.L #3,A5         ; starting address    
00003176  2C4D                     227      MOVE.L A5,A6
00003178  6100 02CA                228      BSR FIND_END
0000317C  6100 041C                229      BSR COMMAND_PARSE
00003180  4A41                     230      TST D1
00003182  6600 0022                231      BNE MS_ERR
00003186  2A00                     232      MOVE.L D0,D5        ; address1 goes in D5
00003188  528E                     233      ADD.L #1,A6         ; getting the data to store
0000318A  2A4E                     234      MOVE.L A6,A5        
0000318C  4DF8 200C                235      LEA INPUT,A6
00003190  DDC6                     236      ADDA.L D6,A6        
00003192  200E                     237      MOVE.L A6,D0
00003194  908D                     238      SUB.L  A5,D0        ; getting size of bytes to move for BMOV
00003196  5280                     239      ADDI.L #1,D0        
00003198  2C45                     240      MOVE.L D5,A6    
0000319A  6100 062C                241      BSR BMOV            ; Call BMOV func for implementation 
0000319E  4CDF 7FFF                242      MOVEM.L (SP)+, A0-A6/D0-D7
000031A2  6000 FEA4                243      BRA SHELL
000031A6                           244      
000031A6                           245  MS_ERR:
000031A6  6100 01E8                246      BSR MSHELP
000031AA  4CDF 7FFF                247      MOVEM.L (SP)+, A0-A6/D0-D7
000031AE  6000 FE98                248      BRA SHELL    
000031B2                           249      
000031B2                           250      
000031B2                           251  BF_FUNC:
000031B2  4DF8 208C                252      LEA BFCOMMAND,A6        ; put BF into A6
000031B6  303C 0002                253      MOVE.W #2,D0
000031BA  6100 029E                254      BSR CHECK_MATCH
000031BE  4A40                     255      TST.W D0
000031C0  6000 0058                256      BRA BSCH_FUNC
000031C4                           257      
000031C4                           258      *implement bf
000031C4  568D                     259      ADD.L #3,A5         ; getting address1   
000031C6  2C4D                     260      MOVE.L A5,A6
000031C8  6100 027A                261      BSR FIND_END
000031CC  6100 03CC                262      BSR COMMAND_PARSE
000031D0  4A41                     263      TST D1
000031D2  6600 003A                264      BNE BF_ERR
000031D6  2A00                     265      MOVE.L D0,D5        ; D5 has address1
000031D8  528E                     266      ADD.L #1,A6
000031DA  2A4E                     267      MOVE.L A6,A5
000031DC  6100 0266                268      BSR FIND_END        ; getting address2
000031E0  6100 03B8                269      BSR COMMAND_PARSE         
000031E4  2800                     270      MOVE.L D0,D4        ; D4 has address2
000031E6  4A41                     271      TST D1
000031E8  6600 0024                272      BNE BF_ERR
000031EC  528E                     273      ADD.L #1,A6
000031EE  2A4E                     274      MOVE.L A6,A5        
000031F0  6100 0252                275      BSR FIND_END        ; getting data to fill blocks with
000031F4  6100 03A4                276      BSR COMMAND_PARSE        
000031F8  4A41                     277      TST D1
000031FA  6600 0012                278      BNE BF_ERR
000031FE  2A45                     279      MOVE.L D5,A5        ; address1
00003200  2C44                     280      MOVE.L D4,A6        ; address2
00003202  6100 05DA                281      BSR BF
00003206  4CDF 7FFF                282      MOVEM.L (SP)+, A0-A6/D0-D7
0000320A  6000 FE3C                283      BRA SHELL
0000320E                           284      
0000320E                           285  BF_ERR:
0000320E  6100 01BC                286      BSR BFHELP
00003212  4CDF 7FFF                287      MOVEM.L (SP)+, A0-A6/D0-D7
00003216  6000 FE30                288      BRA SHELL   
0000321A                           289  
0000321A                           290  BSCH_FUNC:
0000321A  4DF8 2094                291      LEA BSCHCOMMAND,A6  ; PUT bsch IN a6
0000321E  303C 0004                292      MOVE.W #4,D0
00003222  6100 0236                293      BSR CHECK_MATCH
00003226  4A40                     294      TST.W D0            
00003228  6600 0052                295      BNE GO_FUNC
0000322C                           296      
0000322C                           297      
0000322C  5A8D                     298      ADD.L #5,A5         ;Start address    
0000322E  2C4D                     299      MOVE.L A5,A6
00003230  6100 0212                300      BSR FIND_END
00003234  6100 0364                301      BSR COMMAND_PARSE
00003238  4A41                     302      TST D1
0000323A  6600 0034                303      BNE BSCH_ERR
0000323E  2040                     304      MOVE.L D0,A0        
00003240  528E                     305      ADD.L #1,A6
00003242  2A4E                     306      MOVE.L A6,A5
00003244  6100 01FE                307      BSR FIND_END
00003248  6100 0350                308      BSR COMMAND_PARSE
0000324C  4A41                     309      TST D1
0000324E  6600 0020                310      BNE BSCH_ERR
00003252  2240                     311      MOVE.L D0,A1        ;second address
00003254  528E                     312      ADD.L #1,A6         ; getting stirng to find
00003256  2A4E                     313      MOVE.L A6,A5        
00003258  4DF8 200C                314      LEA INPUT,A6
0000325C  DDC6                     315      ADDA.L D6,A6        
0000325E  200E                     316      MOVE.L A6,D0
00003260  908D                     317      SUB.L  A5,D0        
00003262  2600                     318      MOVE.L D0,D3        
00003264  6100 087E                319      BSR BSCH
00003268  4CDF 7FFF                320      MOVEM.L (SP)+, A0-A6/D0-D7
0000326C  6000 FDDA                321      BRA SHELL
00003270                           322  BSCH_ERR:
00003270  6100 0182                323      BSR BSCHHELP
00003274  4CDF 7FFF                324      MOVEM.L (SP)+, A0-A6/D0-D7
00003278  6000 FDCE                325      BRA SHELL
0000327C                           326      
0000327C                           327  GO_FUNC:
0000327C  4DF8 2099                328      LEA GOCOMMAND,A6    ; put go in A6
00003280  303C 0002                329      MOVE.W #2,D0
00003284  6100 01D4                330      BSR CHECK_MATCH          
00003288  4A40                     331      TST.W D0
0000328A  6600 002C                332      BNE DF_FUNC
0000328E                           333      
0000328E  568D                     334      ADD.L #3,A5         ; get start address     
00003290  2C4D                     335      MOVE.L A5,A6
00003292  6100 01B0                336      BSR FIND_END
00003296  6100 0302                337      BSR COMMAND_PARSE
0000329A  4A41                     338      TST D1
0000329C  6600 000E                339      BNE GO_ERR
000032A0  21C0 2594                340      MOVE.L D0,REG_STORE   ; put starting address of program in memory
000032A4  4CDF 7FFF                341      MOVEM.L (SP)+, A0-A6/D0-D7
000032A8  6000 0544                342      BRA GO
000032AC                           343      
000032AC                           344  GO_ERR:
000032AC  4CDF 7FFF                345      MOVEM.L (SP)+, A0-A6/D0-D7
000032B0  6100 0156                346      BSR GOHELP
000032B4  6000 FD92                347      BRA SHELL
000032B8                           348      
000032B8                           349  DF_FUNC:
000032B8  4DF8 209C                350      LEA DFCOMMAND,A6    ; putting DF ni A6
000032BC  303C 0002                351      MOVE.W #2,D0
000032C0  6100 0198                352      BSR CHECK_MATCH
000032C4  4A40                     353      TST.W D0            
000032C6  6600 001A                354      BNE FONT_FUNC
000032CA                           355      
000032CA                           356  PC_VAL:
000032CA  21FC 000032CA 258E       357      MOVE.L #PC_VAL,PC_STORE ; put PC in storage location to print out later
000032D2  40F8 2594                358      MOVE.W SR,REG_STORE       ; get SR data 
000032D6  4CDF 7FFF                359      MOVEM.L (SP)+, A0-A6/D0-D7  
000032DA  6100 0574                360      BSR DF
000032DE  6000 FD68                361      BRA SHELL
000032E2                           362      
000032E2                           363  FONT_FUNC:
000032E2  4DF8 20A8                364      LEA FONT,A6
000032E6  303C 0004                365      MOVE.W #4,D0
000032EA  6100 016E                366      BSR CHECK_MATCH          
000032EE  4A40                     367      TST.W D0
000032F0  6600 002C                368      BNE ECHO_FUNC
000032F4                           369      
000032F4  5A8D                     370      ADD.L #5,A5         ; address into A5     
000032F6  2C4D                     371      MOVE.L A5,A6
000032F8  6100 014A                372      BSR FIND_END
000032FC  6100 029C                373      BSR COMMAND_PARSE
00003300  4A41                     374      TST D1
00003302  6600 000E                375      BNE FONT_ERR
00003306  2200                     376      MOVE.L D0,D1    ;value to change font color stored in D1
00003308  103C 0015                377      MOVE.B #21,D0
0000330C  4E4F                     378      TRAP #15        ;change font color
0000330E  6000 FD38                379      BRA SHELL
00003312                           380      
00003312                           381  FONT_ERR:
00003312  4CDF 7FFF                382      MOVEM.L (SP)+, A0-A6/D0-D7
00003316  6100 00F0                383      BSR GOHELP
0000331A  6000 FD2C                384      BRA SHELL
0000331E                           385      
0000331E                           386      
0000331E                           387  ECHO_FUNC:
0000331E  4DF8 20AD                388      LEA ECHOCOMMAND,A6
00003322  303C 0004                389      MOVE.W #4,D0
00003326  6100 0132                390      BSR CHECK_MATCH          
0000332A  4A40                     391      TST.W D0
0000332C  6600 002A                392      BNE EXIT_FUNC
00003330                           393      
00003330  5A8D                     394      ADD.L #5,A5         ; address into A5     
00003332  2C4D                     395      MOVE.L A5,A6
00003334  6100 010E                396      BSR FIND_END
00003338  6100 0260                397      BSR COMMAND_PARSE
0000333C  324D                     398      MOVE.W A5,A1
0000333E  9DCD                     399      SUB.L A5,A6
00003340  320E                     400      MOVE.W A6,D1
00003342  303C 000D                401      MOVE.W #13,D0
00003346  4E4F                     402      TRAP #15        ; print out text
00003348  6000 FCFE                403      BRA SHELL
0000334C                           404      
0000334C                           405  ECHO_ERR:
0000334C  4CDF 7FFF                406      MOVEM.L (SP)+, A0-A6/D0-D7
00003350  6100 00B6                407      BSR GOHELP
00003354  6000 FCF2                408      BRA SHELL
00003358                           409      
00003358                           410      
00003358                           411  
00003358                           412  EXIT_FUNC:
00003358  4DF8 209F                413      LEA EXITCOMMAND,A6
0000335C  303C 0004                414      MOVE.W #4,D0
00003360  6100 00F8                415      BSR CHECK_MATCH
00003364  4A40                     416      TST.W D0           
00003366  6600 0008                417      BNE ERR 
0000336A                           418      
0000336A  303C 0009                419      MOVE.W #9,D0    ; 9 terminates the program
0000336E  4E4F                     420      TRAP #15   
00003370                           421      
00003370                           422  ERR:
00003370  6100 00AA                423      BSR ALL_HELP_PROMPTS
00003374  4CDF 7FFF                424      MOVEM.L (SP)+, A0-A6/D0-D7
00003378  6000 FCCE                425      BRA SHELL
0000337C                           426  
0000337C                           427  MMHELP:
0000337C  48E7 8040                428      MOVEM.L D0/A1, -(SP)
00003380  43F8 21B5                429      LEA MMHELPPROMPT, A1
00003384  103C 000D                430      MOVE.B #13,D0  
00003388  4E4F                     431      TRAP #15
0000338A  4CDF 0201                432      MOVEM.L (SP)+, D0/A1
0000338E  4E75                     433      RTS
00003390                           434      
00003390                           435  MSHELP:
00003390  48E7 8040                436      MOVEM.L D0/A1, -(SP)
00003394  43F8 221D                437      LEA MSHELPPROMPT, A1
00003398  103C 000D                438      MOVE.B #13,D0
0000339C  4E4F                     439      TRAP #15
0000339E  4CDF 0201                440      MOVEM.L (SP)+, D0/A1
000033A2  4E75                     441      RTS
000033A4                           442  
000033A4                           443  SORTWHELP:
000033A4  48E7 8040                444      MOVEM.L D0/A1, -(SP)
000033A8  43F8 212A                445      LEA SORTWHELPPROMPT, A1
000033AC  103C 000D                446      MOVE.B #13,D0
000033B0  4E4F                     447      TRAP #15
000033B2  4CDF 0201                448      MOVEM.L (SP)+, D0/A1
000033B6  4E75                     449      RTS
000033B8                           450      
000033B8                           451  MDSPHELP:
000033B8  48E7 8040                452      MOVEM.L D0/A1, -(SP)
000033BC  43F8 20CB                453      LEA MDSPHELPPROMPT, A1
000033C0  103C 000D                454      MOVE.B #13,D0
000033C4  4E4F                     455      TRAP #15
000033C6  4CDF 0201                456      MOVEM.L (SP)+, D0/A1
000033CA  4E75                     457      RTS
000033CC                           458      
000033CC                           459  BFHELP:
000033CC  48E7 8040                460      MOVEM.L D0/A1, -(SP)
000033D0  43F8 22EB                461      LEA BFHELPPROMPT, A1
000033D4  103C 000D                462      MOVE.B #13,D0
000033D8  4E4F                     463      TRAP #15
000033DA  4CDF 0201                464      MOVEM.L (SP)+, D0/A1
000033DE  4E75                     465      RTS
000033E0                           466  
000033E0                           467  BMOVHELP:
000033E0  48E7 8040                468      MOVEM.L D0/A1, -(SP)
000033E4  43F8 228F                469      LEA BMOVHELPPROMPT, A1
000033E8  103C 000D                470      MOVE.B #13,D0
000033EC  4E4F                     471      TRAP #15
000033EE  4CDF 0201                472      MOVEM.L (SP)+, D0/A1
000033F2  4E75                     473      RTS
000033F4                           474      
000033F4                           475  BSCHHELP:
000033F4  48E7 8040                476      MOVEM.L D0/A1, -(SP)
000033F8  43F8 235F                477      LEA BSCHHELPPROMPT, A1
000033FC  103C 000D                478      MOVE.B #13,D0
00003400  4E4F                     479      TRAP #15
00003402  4CDF 0201                480      MOVEM.L (SP)+, D0/A1
00003406  4E75                     481      RTS
00003408                           482  
00003408                           483  GOHELP:
00003408  48E7 8040                484      MOVEM.L D0/A1, -(SP)
0000340C  43F8 23CD                485      LEA GOHELPPROMPT, A1
00003410  103C 000D                486      MOVE.B #13,D0
00003414  4E4F                     487      TRAP #15
00003416  4CDF 0201                488      MOVEM.L (SP)+, D0/A1
0000341A  4E75                     489      RTS
0000341C                           490  
0000341C                           491  
0000341C                           492  ALL_HELP_PROMPTS:
0000341C  6100 FF5E                493      BSR MMHELP
00003420  6182                     494      BSR SORTWHELP
00003422  6194                     495      BSR MDSPHELP
00003424  6100 FF6A                496      BSR MSHELP
00003428  61A2                     497      BSR BFHELP
0000342A  61B4                     498      BSR BMOVHELP
0000342C  61C6                     499      BSR BSCHHELP
0000342E  61D8                     500      BSR GOHELP
00003430  48E7 8040                501      MOVEM.L D0/A1, -(SP)
00003434  43F8 2407                502      LEA DFHELPPROMPT, A1
00003438  103C 000D                503      MOVE.B #13,D0
0000343C  4E4F                     504      TRAP #15
0000343E  4CDF 0201                505      MOVEM.L (SP)+, D0/A1
00003442  4E75                     506      RTS
00003444                           507      
00003444                           508  *Finds end of string. Either char is a 0 or it's empty COLON
00003444                           509  FIND_END:    
00003444  0C16 0000                510      CMP.B #0,(A6)   ; check if we are at end
00003448  6700 000E                511      BEQ END_FOUND
0000344C  0C16 0020                512      CMP.B #' ',(A6) ; check if we are at end
00003450  6700 0006                513      BEQ END_FOUND
00003454  528E                     514      ADDA.L #1,A6    ; keep searching 
00003456  60EC                     515      BRA FIND_END
00003458                           516      
00003458                           517  END_FOUND:
00003458  4E75                     518      RTS
0000345A                           519      
0000345A                           520   *compare strings
0000345A                           521  CHECK_MATCH:     
0000345A  48E7 0006                522      MOVEM.L A5/A6, -(SP) ;strings are in A5 and A6
0000345E  4A40                     523      TST D0          ; length of input string is in D0.
00003460  6700 001A                524      BEQ NO_MATCH     ; if string length is 0 they're not equal
00003464  5380                     525      SUB.L #1,D0
00003466                           526  FOR_C_IN_STRING:
00003466  BD0D                     527      CMP.B (A5)+,(A6)+   ; compare characters byte by byte
00003468  6600 0012                528      BNE NO_MATCH        ; byte not equal? string is not equal
0000346C  4A40                     529      TST.W D0            ; compared all the characters in the string?
0000346E  57C8 FFF6                530      DBEQ.W D0,FOR_C_IN_STRING    ;  DO AT MOST D0 COMPARISONS
00003472  6000 0002                531      BRA MATCH            ; finshed comparing and strings are equal.
00003476                           532      
00003476                           533  MATCH:
00003476  4CDF 6000                534      MOVEM.L (SP)+, A5/A6  ;D0 will = 0, signifying a match
0000347A  4E75                     535      RTS
0000347C                           536  NO_MATCH:
0000347C  7001                     537      MOVE.L #1,D0        ; return 1 to signify no match
0000347E  4CDF 6000                538      MOVEM.L (SP)+, A5/A6
00003482  4E75                     539      RTS
00003484                           540      
00003484                           541  
00003484                           542  TRAPING_HOES:
00003484  5C8F                     543      ADD.L #6,SP        
00003486  4CDF FFFF                544      MOVEM.L (A7)+,A0-A7/D0-D7
0000348A  4E75                     545      RTS
0000348C                           546      
0000348C                           547      
0000348C                           548  ADDRESS_ERRORV:
0000348C  48E7 E040                549      MOVEM.L A1/D0-D2, -(SP)
00003490  700E                     550      MOVE.L #14,D0
00003492  43F8 24A0                551      LEA ADDRESS_ER,A1  ;print ADDRESS:
00003496  4E4F                     552      TRAP #15
00003498                           553      
00003498  143C 0010                554      MOVE.B #16,D2
0000349C  700D                     555      MOVE.L #13,D0
0000349E  43F8 243E                556      LEA NL,A1
000034A2  4E4F                     557      TRAP #15
000034A4  21EF 001A 258E           558      MOVE.L (26,A7),PC_STORE
000034AA  31EF 0018 2594           559      MOVE.W (24,A7),REG_STORE   ; get SR
000034B0  4CDF 0207                560      MOVEM.L (SP)+, A1/D0-D2
000034B4  6100 039A                561      BSR DF  ; Use Display registers to print out registers and content 
000034B8  DFFC 0000000E            562      ADD.L #14,SP     
000034BE  4EF8 3048                563      JMP SHELL
000034C2                           564  
000034C2                           565  ILLEGAL_INSTRV:
000034C2  48E7 8040                566      MOVEM.L A1/D0, -(SP)
000034C6  700D                     567      MOVE.L #13,D0
000034C8  43F8 24B4                568      LEA ILLEGAL_ER,A1   ; print iilegal instruction erorr
000034CC  4E4F                     569      TRAP #15
000034CE  4CDF 0201                570      MOVEM.L (SP)+, A1/D0
000034D2  31D7 2594                571      MOVE.W (A7),REG_STORE   ; put sr in regstore
000034D6  21EF 0002 258E           572      MOVE.L (2,A7),PC_STORE
000034DC  6100 0372                573      BSR DF          
000034E0  5C8F                     574      ADD.L #6,SP     
000034E2  4EF8 3048                575      JMP SHELL
000034E6                           576      
000034E6                           577  PRIVALEGEV:
000034E6  48E7 8040                578      MOVEM.L A1/D0, -(SP)
000034EA  700D                     579      MOVE.L #13,D0
000034EC  43F8 24D3                580      LEA PRIVALAGE_ER,A1
000034F0  4E4F                     581      TRAP #15
000034F2  4CDF 0201                582      MOVEM.L (SP)+, A1/D0
000034F6  31D7 2594                583      MOVE.W (A7),REG_STORE   
000034FA  21EF 0002 258E           584      MOVE.L (2,A7),PC_STORE
00003500  6100 034E                585      BSR DF          
00003504  5C8F                     586      ADD.L #6,SP     
00003506  4EF8 3048                587      JMP SHELL
0000350A                           588  
0000350A                           589  DIVIDE_ZEROV:
0000350A  48E7 8040                590      MOVEM.L A1/D0, -(SP)
0000350E  700D                     591      MOVE.L #13,D0
00003510  43F8 24F1                592      LEA DIVIDE_Z_ER,A1
00003514  4E4F                     593      TRAP #15
00003516  4CDF 0201                594      MOVEM.L (SP)+, A1/D0
0000351A  31D7 2594                595      MOVE.W (A7),REG_STORE   
0000351E  21EF 0002 258E           596      MOVE.L (2,A7),PC_STORE
00003524  6100 032A                597      BSR DF          
00003528  5C8F                     598      ADD.L #6,SP     
0000352A  4EF8 3048                599      JMP SHELL
0000352E                           600      
0000352E                           601  CHECK_INSTRV:
0000352E  48E7 8040                602      MOVEM.L A1/D0, -(SP)
00003532  700D                     603      MOVE.L #13,D0
00003534  43F8 2503                604      LEA CHECK_ER,A1
00003538  4E4F                     605      TRAP #15
0000353A  4CDF 0201                606      MOVEM.L (SP)+, A1/D0
0000353E  31D7 2594                607      MOVE.W (A7),REG_STORE   
00003542  21EF 0002 258E           608      MOVE.L (2,A7),PC_STORE
00003548  6100 0306                609      BSR DF          
0000354C  5C8F                     610      ADD.L #6,SP     
0000354E  4EF8 3048                611      JMP SHELL
00003552                           612    
00003552                           613  LINEAV:
00003552  48E7 8040                614      MOVEM.L A1/D0, -(SP)
00003556  700D                     615      MOVE.L #13,D0
00003558  43F8 251B                616      LEA LINEA_ER,A1
0000355C  4E4F                     617      TRAP #15
0000355E  4CDF 0201                618      MOVEM.L (SP)+, A1/D0
00003562  31D7 2594                619      MOVE.W (A7),REG_STORE   
00003566  21EF 0002 258E           620      MOVE.L (2,A7),PC_STORE
0000356C  6100 02E2                621      BSR DF          
00003570  5C8F                     622      ADD.L #6,SP     
00003572  4EF8 3048                623      JMP SHELL
00003576                           624      
00003576                           625  LINEFV:
00003576  48E7 8040                626      MOVEM.L A1/D0, -(SP)
0000357A  700D                     627      MOVE.L #13,D0
0000357C  43F8 2535                628      LEA LINEF_ER,A1
00003580  4E4F                     629      TRAP #15
00003582  4CDF 0201                630      MOVEM.L (SP)+, A1/D0
00003586  31D7 2594                631      MOVE.W (A7),REG_STORE   
0000358A  21EF 0002 258E           632      MOVE.L (2,A7),PC_STORE
00003590  6100 02BE                633      BSR DF          
00003594  5C8F                     634      ADD.L #6,SP     
00003596  4EF8 3048                635      JMP SHELL
0000359A                           636  
0000359A                           637      
0000359A                           638      
0000359A                           639  * Parses arguments for a valid command.
0000359A                           640  COMMAND_PARSE:            
0000359A  48E7 3F46                641      MOVEM.L A1/A5/A6/D2-D7, -(SP)  
0000359E  4280                     642      CLR.L D0
000035A0  4281                     643      CLR.L D1
000035A2  7400                     644      MOVE.L #0, D2   
000035A4  0C1D 0024                645      CMP.B #$24,(A5)+ ;checking for $
000035A8  6600 0056                646      BNE PARSE_ERR
000035AC  224E                     647      MOVE.L A6,A1
000035AE  93CD                     648      SUB.L A5,A1
000035B0  B3FC 00000008            649      CMP.L #8,A1
000035B6  6E00 0048                650      BGT PARSE_ERR
000035BA                           651      
000035BA                           652  FOR_PARSE:
000035BA  BCCD                     653      CMP A5,A6       ; check if eat ennd of command
000035BC  6F00 0044                654      BLE PARSE_DONE
000035C0  4283                     655      CLR.L D3        ; use D3 to check
000035C2  1626                     656      MOVE.B -(A6),D3
000035C4  B63C 0046                657      CMP.B #'F',D3   ; bigger than 16 Hex?
000035C8  6E00 0036                658      BGT PARSE_ERR
000035CC  B63C 0030                659      CMP.B #'0',D3   ; negative
000035D0  6D00 002E                660      BLT PARSE_ERR
000035D4  B63C 0039                661      CMP.B #'9',D3
000035D8  6F00 000E                662      BLE NUM_CHECK   ; WITHIN 0-9 OR A-F?
000035DC  B63C 0041                663      CMP.B #'A',D3
000035E0  6C00 0012                664      BGE HEX_CHECK
000035E4  6000 001A                665      BRA PARSE_ERR
000035E8                           666      
000035E8                           667  NUM_CHECK:
000035E8  0403 0030                668      SUBI.B #$30,D3  
000035EC  E5AB                     669      LSL.L D2,D3
000035EE  8083                     670      OR.L D3,D0
000035F0  5802                     671      ADD.B #4,D2    
000035F2  60C6                     672      BRA FOR_PARSE
000035F4                           673      
000035F4                           674  HEX_CHECK:
000035F4  0403 0037                675      SUBI.B #55,D3 
000035F8  E5AB                     676      LSL.L D2,D3
000035FA  8083                     677      OR.L D3,D0
000035FC  5802                     678      ADD.B #4,D2     
000035FE  60BA                     679      BRA FOR_PARSE
00003600                           680    
00003600                           681  PARSE_ERR:
00003600  5201                     682      ADDI.B #1,D1    
00003602                           683  PARSE_DONE:
00003602  4CDF 62FC                684      MOVEM.L (SP)+, A1/A5/A6/D2-D7
00003606  4E75                     685      RTS
00003608                           686      
00003608                           687  MDSP:                    
00003608  48E7 FFFE                688      MOVEM.L A0-A6/D0-D7,-(SP)
0000360C  BDFC 00000000            689      CMP.L #0, A6
00003612  6600 0008                690      BNE MD
00003616  DDFC 00000010            691      ADD.L #16, A6   ; if A6=0 add 16 to get the end address.
0000361C                           692  MD:
0000361C  143C 0010                693      MOVE.B #16,D2   ; base of number to display for trap function
00003620  43F8 2585                694      LEA ADDRESS,A1  ; ADDRESS prompt to print
00003624  103C 000E                695      MOVE.B #14,D0
00003628  4E4F                     696      TRAP #15        ;Display the NULL terminated string pointed to by (A1).
0000362A  220D                     697      MOVE.L A5,D1
0000362C  103C 000F                698      MOVE.B #15,D0   ;Display the unsigned number in D1.L converted to number base (2 through 36) contained in D2.B. 
00003630  4E4F                     699      TRAP #15        
00003632  43F8 2581                700      LEA COLON,A1    ; put a COLON
00003636  103C 000E                701      MOVE.B #14,D0
0000363A  4E4F                     702      TRAP #15        ; 
0000363C  4281                     703      CLR.L D1
0000363E  121D                     704      MOVE.B (A5)+,D1 ; move contents pointed to by A5 to D1 to display 
00003640  103C 000F                705      MOVE.B #15,D0
00003644  4E4F                     706      TRAP #15        ; display D1 contents (data)
00003646  43F8 243E                707      LEA NL,A1
0000364A  103C 000D                708      MOVE.B #13,D0
0000364E  4E4F                     709      TRAP #15        ; print empty space for new input
00003650  BCCD                     710      CMP A5,A6       ; are we at address2?
00003652  6CC8                     711      BGE MD          ; keep going if we're not
00003654  4CDF 7FFF                712      MOVEM.L (SP)+,A0-A6/D0-D7
00003658  4E75                     713      RTS
0000365A                           714  
0000365A                           715      
0000365A                           716  MM:        
0000365A  48E7 FFFE                717      MOVEM.L A0-A6/D0-D7,-(SP)
0000365E  BE7C 0001                718      CMP #1, D7
00003662  6700 007A                719      BEQ MM_WORD
00003666  BE7C 0002                720      CMP #2, D7
0000366A  6700 00E2                721      BEQ MM_LONG
0000366E                           722      
0000366E                           723  MM_BYTE:        
0000366E  5388                     724      SUBA.L #1, A0    
00003670                           725  BLOOP:    
00003670  143C 0010                726      MOVE.B #16,D2   
00003674  5248                     727      ADDA #1, A0     ; increment to the next Bbyte 
00003676  43F8 2585                728      LEA ADDRESS,A1  
0000367A  103C 000E                729      MOVE.B #14,D0   ; address
0000367E  4E4F                     730      TRAP #15
00003680  2208                     731      MOVE.L A0,D1
00003682  103C 000F                732      MOVE.B #15,D0   
00003686  4E4F                     733      TRAP #15
00003688  43F8 2581                734      LEA COLON,A1
0000368C  103C 000E                735      MOVE.B #14,D0
00003690  4E4F                     736      TRAP #15
00003692  4281                     737      CLR.L D1
00003694  1210                     738      MOVE.B (A0),D1  ; moving data to D1
00003696  103C 000F                739      MOVE.B #15,D0   ; printing data
0000369A  4E4F                     740      TRAP #15        
0000369C  43F8 2581                741      LEA COLON,A1
000036A0  103C 000E                742      MOVE.B #14,D0   
000036A4  4E4F                     743      TRAP #15
000036A6  43F8 200C                744      LEA INPUT,A1
000036AA  103C 0002                745      MOVE.B #2,D0    ; waiting for user input
000036AE  4E4F                     746      TRAP #15
000036B0  B27C 0000                747      CMP.W #0,D1     ; if enter was hit, and not input. Restart
000036B4  67BA                     748      BEQ BLOOP
000036B6  0C11 002E                749      CMP.B #$2E,(A1)   ; if we get a period, finish.
000036BA  6700 0106                750      BEQ MM_EXIT
000036BE  B27C 0003                751      CMP.W #3,D1          
000036C2  6600 00FA                752      BNE MMERR       ; print an error if we get incorret number of charcters
000036C6  4BF8 200C                753      LEA INPUT,A5
000036CA  4DF8 200C                754      LEA INPUT,A6
000036CE  DCC1                     755      ADDA D1,A6
000036D0  6100 FEC8                756      BSR COMMAND_PARSE
000036D4  4A41                     757      TST D1
000036D6  6600 00E6                758      BNE MMERR       
000036DA  1080                     759      MOVE.B D0,(A0)  
000036DC  6092                     760      BRA BLOOP
000036DE                           761      
000036DE                           762  MM_WORD:           
000036DE  5588                     763      SUBA.L #2, A0    
000036E0                           764  MMWLOOP:    
000036E0  143C 0010                765      MOVE.B #16,D2   ; setting base number to print from
000036E4  5448                     766      ADDA #2, A0     ; increment to the next wORD
000036E6  43F8 2585                767      LEA ADDRESS,A1  
000036EA  103C 000E                768      MOVE.B #14,D0   
000036EE  4E4F                     769      TRAP #15
000036F0  2208                     770      MOVE.L A0,D1
000036F2  103C 000F                771      MOVE.B #15,D0   
000036F6  4E4F                     772      TRAP #15        ; print address
000036F8  43F8 2581                773      LEA COLON,A1    
000036FC  103C 000E                774      MOVE.B #14,D0
00003700  4E4F                     775      TRAP #15
00003702  4281                     776      CLR.L D1
00003704  3210                     777      MOVE.W (A0),D1  ; moving data pointed to by A1 to D1 for printing
00003706  103C 000F                778      MOVE.B #15,D0
0000370A  4E4F                     779      TRAP #15        ; print current data at this address
0000370C  43F8 2581                780      LEA COLON,A1
00003710  103C 000E                781      MOVE.B #14,D0   
00003714  4E4F                     782      TRAP #15
00003716  43F8 200C                783      LEA INPUT,A1
0000371A  103C 0002                784      MOVE.B #2,D0    ; wait for input from user
0000371E  4E4F                     785      TRAP #15
00003720  B27C 0000                786      CMP.W #0,D1     ; if enter was hit, and not input. Restart
00003724  67BA                     787      BEQ MMWLOOP
00003726  0C11 002E                788      CMP.B #$2E,(A1)   ; if we get a period, finish
0000372A  6700 0096                789      BEQ MM_EXIT
0000372E  B27C 0005                790      CMP.W #5,D1       ; 4 character comparison   
00003732  6600 008A                791      BNE MMERR
00003736  4BF8 200C                792      LEA INPUT,A5
0000373A  4DF8 200C                793      LEA INPUT,A6
0000373E  DCC1                     794      ADDA D1,A6
00003740  6100 FE58                795      BSR COMMAND_PARSE
00003744  4A41                     796      TST D1
00003746  6600 0076                797      BNE MMERR      
0000374A  3080                     798      MOVE.W D0,(A0)  ; Move data
0000374C  6092                     799      BRA MMWLOOP
0000374E                           800  
0000374E                           801  MM_LONG:             ;BYTE SIZE MM
0000374E  5988                     802      SUBA.L #4, A0     ; SUBTRACT JUST THE FIRST TIME
00003750                           803  MMLLOOP:    
00003750  143C 0010                804      MOVE.B #16,D2   
00003754  5848                     805      ADDA #4, A0     
00003756  43F8 2585                806      LEA ADDRESS,A1  
0000375A  103C 000E                807      MOVE.B #14,D0   
0000375E  4E4F                     808      TRAP #15
00003760  2208                     809      MOVE.L A0,D1
00003762  103C 000F                810      MOVE.B #15,D0   
00003766  4E4F                     811      TRAP #15
00003768  43F8 2581                812      LEA COLON,A1    
0000376C  103C 000E                813      MOVE.B #14,D0
00003770  4E4F                     814      TRAP #15
00003772  4281                     815      CLR.L D1
00003774  2210                     816      MOVE.L (A0),D1  
00003776  103C 000F                817      MOVE.B #15,D0
0000377A  4E4F                     818      TRAP #15        
0000377C  43F8 2581                819      LEA COLON,A1
00003780  103C 000E                820      MOVE.B #14,D0   
00003784  4E4F                     821      TRAP #15
00003786  43F8 200C                822      LEA INPUT,A1
0000378A  103C 0002                823      MOVE.B #2,D0    
0000378E  4E4F                     824      TRAP #15
00003790  B27C 0000                825      CMP.W #0,D1     
00003794  67BA                     826      BEQ MMLLOOP
00003796  0C11 002E                827      CMP.B #$2E,(A1)   
0000379A  6700 0026                828      BEQ MM_EXIT
0000379E  B27C 0009                829      CMP.W #9,D1         
000037A2  6600 001A                830      BNE MMERR
000037A6  4BF8 200C                831      LEA INPUT,A5
000037AA  4DF8 200C                832      LEA INPUT,A6
000037AE  DCC1                     833      ADDA D1,A6
000037B0  6100 FDE8                834      BSR COMMAND_PARSE
000037B4  4A41                     835      TST D1
000037B6  6600 0006                836      BNE MMERR       
000037BA  2080                     837      MOVE.L D0,(A0)  
000037BC  6092                     838      BRA MMLLOOP
000037BE                           839  
000037BE                           840  MMERR:
000037BE  6100 FBBC                841     BSR MMHELP
000037C2                           842  MM_EXIT:
000037C2  4CDF 7FFF                843     MOVEM.L (SP)+, A0-A6/D0-D7
000037C6  4E75                     844     RTS
000037C8                           845  
000037C8                           846  
000037C8                           847  BMOV:                      
000037C8  48E7 8006                848     MOVEM.L A5/A6/D0,-(SP)
000037CC  5380                     849     SUBI.L #1,D0        ; D0 has count of data to move
000037CE                           850  BMOV_LOOP:  
000037CE  1CDD                     851     MOVE.B (A5)+,(A6)+  ; move contents from location in A5 to A6
000037D0  57C8 FFFC                852     DBEQ D0,BMOV_LOOP
000037D4  6000 0002                853     BRA BMOV_EXIT
000037D8                           854           
000037D8                           855  BMOV_EXIT:         
000037D8  4CDF 6001                856     MOVEM.L (SP)+,A5/A6/D0
000037DC  4E75                     857     RTS   
000037DE                           858          
000037DE                           859  
000037DE                           860      
000037DE                           861  BF:                      
000037DE  48E7 0004                862     MOVEM.L A5,-(SP)
000037E2                           863  BF_LOOP:  
000037E2  3AC0                     864     MOVE.W D0,(A5)+  ; fill memory location with data in D0
000037E4  BCCD                     865     CMP A5,A6        ; keep going until we hit address2
000037E6  6EFA                     866     BGT BF_LOOP
000037E8  4CDF 2000                867     MOVEM.L (SP)+,A5
000037EC  4E75                     868     RTS
000037EE                           869           
000037EE                           870  
000037EE                           871    
000037EE                           872             
000037EE                           873  GO:                     
000037EE  48E7 E040                874     MOVEM.L A1/D0-D2, -(SP) 
000037F2  43F8 254F                875     LEA GO_ADDRESS,A1       ; print address
000037F6  103C 000E                876     MOVE.B #14,D0
000037FA  4E4F                     877     TRAP #15
000037FC  103C 000F                878     MOVE.B #15,D0
00003800  2238 2594                879     MOVE.L REG_STORE,D1
00003804  143C 0010                880     MOVE.B #16,D2      ;convert to ascii
00003808  4E4F                     881     TRAP #15
0000380A  43F8 243E                882     LEA NL,A1
0000380E  103C 000D                883     MOVE.B #13,D0
00003812  4E4F                     884     TRAP #15
00003814  4CDF 0207                885     MOVEM.L (SP)+, A1/D0-D2
00003818  2F38 2594                886     MOVE.L REG_STORE, -(SP) 
0000381C  4E75                     887     RTS                ; be able to retunrn after
0000381E                           888            
0000381E                           889  
0000381E                           890  *sorting algorithm. DO holds value for ascending or descending         
0000381E                           891  SORTW:
0000381E  48E7 4026                892     MOVEM.L A2/A5-A6/D1, -(SP)
00003822  244D                     893     MOVE.L A5,A2         ; address1
00003824                           894     
00003824                           895  ** for i in range(1,n):
00003824                           896  **      for j in range():
00003824                           897  SORTW_FOR_I:
00003824  2A4A                     898     MOVE.L A2,A5
00003826                           899  SORTW_FOR_J:
00003826  4A00                     900     TST.B D0             ;check for order first
00003828  6700 000A                901     BEQ DESC             
0000382C  BB4D                     902     CMP.W (A5)+,(A5)+    ; start compare of elements
0000382E  6212                     903     BHI.S SWAP           ; if the value is higher, branch to swap elements       
00003830  6000 0006                904     BRA SORTW_NEXT
00003834                           905  DESC:
00003834  BB4D                     906     CMP.W (A5)+,(A5)+    ; Compare current and next elements
00003836  650A                     907     BLO.S SWAP          
00003838                           908  SORTW_NEXT:
00003838  558D                     909     SUBQ.L #2,A5         
0000383A  BDCD                     910     CMP.L A5,A6
0000383C  66E8                     911     BNE SORTW_FOR_J            ; Did we reach end of string? keep going if no
0000383E  6000 000A                912     BRA SORTW_EXIT
00003842                           913  SWAP:
00003842  2225                     914     MOVE.L -(A5),D1      ; get back to start of comaparison and put the two values in D1. eg. D1=11112222
00003844  4841                     915     SWAP.W D1            ; swap the word val. D1=22221111
00003846  2A81                     916     MOVE.L D1,(A5)       ; move the values back into memory
00003848  60DA                     917     BRA SORTW_FOR_I      ; restart for loop after a swap
0000384A                           918     
0000384A                           919  SORTW_EXIT:  
0000384A  4CDF 6402                920     MOVEM.L (SP)+, A2/A5-A6/D1
0000384E  4E75                     921     RTS
00003850                           922     
00003850                           923     
00003850                           924  DF: 
00003850                           925                         
00003850  48E7 FFFF                926      MOVEM.L A0-A7/D0-D7,-(A7)
00003854  204F                     927      MOVE.L A7,A0
00003856                           928      
00003856                           929      *DO*
00003856  43F8 2468                930      LEA D0REG, A1
0000385A  143C 0010                931      MOVE.B #16,D2
0000385E  103C 000E                932      MOVE.B #14, D0
00003862  4E4F                     933      TRAP #15
00003864  2210                     934      MOVE.L (A0),D1
00003866  103C 000F                935      MOVE.B #15, D0
0000386A  4E4F                     936      TRAP #15
0000386C  103C 000D                937      MOVE.B #13, D0
00003870  43F8 243E                938      LEA NL,A1
00003874  4E4F                     939      TRAP #15
00003876                           940  
00003876                           941      *D1*
00003876  43F8 246D                942      LEA D1REG, A1
0000387A  143C 0010                943      MOVE.B #16,D2
0000387E  103C 000E                944      MOVE.B #14, D0 
00003882  4E4F                     945      TRAP #15
00003884  2228 0004                946      MOVE.L (4,A0),D1
00003888  103C 000F                947      MOVE.B #15, D0
0000388C  4E4F                     948      TRAP #15
0000388E  103C 000D                949      MOVE.B #13, D0
00003892  43F8 243E                950      LEA NL,A1
00003896  4E4F                     951      TRAP #15
00003898                           952  
00003898                           953      
00003898                           954      *D2*
00003898  43F8 2472                955      LEA D2REG, A1
0000389C  143C 0010                956      MOVE.B #16,D2
000038A0  103C 000E                957      MOVE.B #14, D0 
000038A4  4E4F                     958      TRAP #15
000038A6  2228 0008                959      MOVE.L (8,A0),D1
000038AA  103C 000F                960      MOVE.B #15, D0
000038AE  4E4F                     961      TRAP #15
000038B0  103C 000D                962      MOVE.B #13, D0
000038B4  43F8 243E                963      LEA NL,A1
000038B8  4E4F                     964      TRAP #15
000038BA                           965  
000038BA                           966  
000038BA                           967      *D3*
000038BA  43F8 2477                968      LEA D3REG, A1
000038BE  143C 0010                969      MOVE.B #16,D2
000038C2  103C 000E                970      MOVE.B #14, D0 
000038C6  4E4F                     971      TRAP #15
000038C8  2228 000C                972      MOVE.L (12,A0),D1
000038CC  103C 000F                973      MOVE.B #15, D0
000038D0  4E4F                     974      TRAP #15
000038D2  103C 000D                975      MOVE.B #13, D0
000038D6  43F8 243E                976      LEA NL,A1
000038DA  4E4F                     977      TRAP #15
000038DC                           978      
000038DC                           979      *D4*
000038DC  43F8 247C                980      LEA D4REG, A1
000038E0  143C 0010                981      MOVE.B #16,D2
000038E4  103C 000E                982      MOVE.B #14, D0 
000038E8  4E4F                     983      TRAP #15
000038EA  2228 0010                984      MOVE.L (16,A0),D1
000038EE  103C 000F                985      MOVE.B #15, D0
000038F2  4E4F                     986      TRAP #15
000038F4  103C 000D                987      MOVE.B #13, D0
000038F8  43F8 243E                988      LEA NL,A1
000038FC  4E4F                     989      TRAP #15
000038FE                           990      
000038FE                           991      *D5*
000038FE  43F8 2481                992      LEA D5REG, A1
00003902  143C 0010                993      MOVE.B #16,D2
00003906  103C 000E                994      MOVE.B #14, D0 
0000390A  4E4F                     995      TRAP #15
0000390C  2228 0014                996      MOVE.L (20,A0),D1
00003910  103C 000F                997      MOVE.B #15, D0
00003914  4E4F                     998      TRAP #15
00003916  103C 000D                999      MOVE.B #13, D0
0000391A  43F8 243E               1000      LEA NL,A1
0000391E  4E4F                    1001      TRAP #15
00003920                          1002      
00003920                          1003      *D6*
00003920  43F8 2486               1004      LEA D6REG, A1
00003924  143C 0010               1005      MOVE.B #16,D2
00003928  103C 000E               1006      MOVE.B #14, D0 
0000392C  4E4F                    1007      TRAP #15
0000392E  2228 0018               1008      MOVE.L (24,A0),D1
00003932  103C 000F               1009      MOVE.B #15, D0
00003936  4E4F                    1010      TRAP #15
00003938  103C 000D               1011      MOVE.B #13, D0
0000393C  43F8 243E               1012      LEA NL,A1
00003940  4E4F                    1013      TRAP #15
00003942                          1014      
00003942                          1015      *D7*
00003942  43F8 248B               1016      LEA D7REG, A1
00003946  143C 0010               1017      MOVE.B #16,D2
0000394A  103C 000E               1018      MOVE.B #14, D0 
0000394E  4E4F                    1019      TRAP #15
00003950  2228 001C               1020      MOVE.L (28,A0),D1
00003954  103C 000F               1021      MOVE.B #15, D0
00003958  4E4F                    1022      TRAP #15
0000395A  103C 000D               1023      MOVE.B #13, D0
0000395E  43F8 243E               1024      LEA NL,A1
00003962  4E4F                    1025      TRAP #15
00003964                          1026      
00003964                          1027      *A0*
00003964  43F8 243F               1028      LEA A0REG, A1
00003968  143C 0010               1029      MOVE.B #16,D2
0000396C  103C 000E               1030      MOVE.B #14, D0 
00003970  4E4F                    1031      TRAP #15
00003972  2228 0020               1032      MOVE.L (32,A0),D1
00003976  103C 000F               1033      MOVE.B #15, D0
0000397A  4E4F                    1034      TRAP #15
0000397C  103C 000D               1035      MOVE.B #13, D0
00003980  43F8 243E               1036      LEA NL,A1
00003984  4E4F                    1037      TRAP #15
00003986                          1038      
00003986                          1039      *A1*
00003986  43F8 2444               1040      LEA A1REG, A1
0000398A  143C 0010               1041      MOVE.B #16,D2
0000398E  103C 000E               1042      MOVE.B #14, D0 
00003992  4E4F                    1043      TRAP #15
00003994  2228 0024               1044      MOVE.L (36,A0),D1
00003998  103C 000F               1045      MOVE.B #15, D0
0000399C  4E4F                    1046      TRAP #15
0000399E  103C 000D               1047      MOVE.B #13, D0
000039A2  43F8 243E               1048      LEA NL,A1
000039A6  4E4F                    1049      TRAP #15
000039A8                          1050      
000039A8                          1051      *A2*
000039A8  43F8 2448               1052      LEA A2REG, A1
000039AC  143C 0010               1053      MOVE.B #16,D2
000039B0  103C 000E               1054      MOVE.B #14, D0 
000039B4  4E4F                    1055      TRAP #15
000039B6  2228 0028               1056      MOVE.L (40,A0),D1
000039BA  103C 000F               1057      MOVE.B #15, D0
000039BE  4E4F                    1058      TRAP #15
000039C0  103C 000D               1059      MOVE.B #13, D0
000039C4  43F8 243E               1060      LEA NL,A1
000039C8  4E4F                    1061      TRAP #15
000039CA                          1062      
000039CA                          1063      *A3*
000039CA  43F8 244D               1064      LEA A3REG, A1
000039CE  143C 0010               1065      MOVE.B #16,D2
000039D2  103C 000E               1066      MOVE.B #14, D0 
000039D6  4E4F                    1067      TRAP #15
000039D8  2228 002C               1068      MOVE.L (44,A0),D1
000039DC  103C 000F               1069      MOVE.B #15, D0
000039E0  4E4F                    1070      TRAP #15
000039E2  103C 000D               1071      MOVE.B #13, D0
000039E6  43F8 243E               1072      LEA NL,A1
000039EA  4E4F                    1073      TRAP #15
000039EC                          1074      
000039EC                          1075      *A4*
000039EC  43F8 2452               1076      LEA A4REG, A1
000039F0  143C 0010               1077      MOVE.B #16,D2
000039F4  103C 000E               1078      MOVE.B #14, D0 
000039F8  4E4F                    1079      TRAP #15
000039FA  2228 0030               1080      MOVE.L (48,A0),D1
000039FE  103C 000F               1081      MOVE.B #15, D0
00003A02  4E4F                    1082      TRAP #15
00003A04  103C 000D               1083      MOVE.B #13, D0
00003A08  43F8 243E               1084      LEA NL,A1
00003A0C  4E4F                    1085      TRAP #15
00003A0E                          1086  
00003A0E                          1087      *A5*
00003A0E  43F8 2457               1088      LEA A5REG, A1
00003A12  143C 0010               1089      MOVE.B #16,D2
00003A16  103C 000E               1090      MOVE.B #14, D0
00003A1A  4E4F                    1091      TRAP #15
00003A1C  2228 0034               1092      MOVE.L (52,A0),D1
00003A20  103C 000F               1093      MOVE.B #15, D0
00003A24  4E4F                    1094      TRAP #15
00003A26  103C 000D               1095      MOVE.B #13, D0
00003A2A  43F8 243E               1096      LEA NL,A1
00003A2E  4E4F                    1097      TRAP #15
00003A30                          1098      
00003A30                          1099      *A6*
00003A30  43F8 245C               1100      LEA A6REG, A1
00003A34  143C 0010               1101      MOVE.B #16,D2
00003A38  103C 000E               1102      MOVE.B #14, D0 
00003A3C  4E4F                    1103      TRAP #15
00003A3E  2228 0038               1104      MOVE.L (56,A0),D1
00003A42  103C 000F               1105      MOVE.B #15, D0
00003A46  4E4F                    1106      TRAP #15
00003A48  103C 000D               1107      MOVE.B #13, D0
00003A4C  43F8 243E               1108      LEA NL,A1
00003A50  4E4F                    1109      TRAP #15
00003A52                          1110  
00003A52                          1111      *A7*
00003A52  43F8 2460               1112      LEA A7REG, A1
00003A56  143C 0010               1113      MOVE.B #16,D2
00003A5A  103C 000E               1114      MOVE.B #14, D0 
00003A5E  4E4F                    1115      TRAP #15
00003A60  2228 003C               1116      MOVE.L (60,A0),D1
00003A64  103C 000F               1117      MOVE.B #15, D0
00003A68  4E4F                    1118      TRAP #15
00003A6A  103C 000D               1119      MOVE.B #13, D0
00003A6E  43F8 243E               1120      LEA NL,A1
00003A72  4E4F                    1121      TRAP #15
00003A74                          1122  
00003A74                          1123      
00003A74                          1124      *PC*
00003A74  43F8 249B               1125      LEA PCREG, A1
00003A78  143C 0010               1126      MOVE.B #16,D2
00003A7C  103C 000E               1127      MOVE.B #14, D0 
00003A80  4E4F                    1128      TRAP #15
00003A82  2238 258E               1129      MOVE.L PC_STORE,D1 ; get pc val
00003A86  103C 000F               1130      MOVE.B #15, D0
00003A8A  4E4F                    1131      TRAP #15
00003A8C  103C 000D               1132      MOVE.B #13, D0
00003A90  43F8 243E               1133      LEA NL,A1
00003A94  4E4F                    1134      TRAP #15
00003A96                          1135      
00003A96                          1136      *SR*
00003A96  43F8 2496               1137      LEA SRREG, A1
00003A9A  143C 0010               1138      MOVE.B #16,D2
00003A9E  103C 000E               1139      MOVE.B #14, D0
00003AA2  4E4F                    1140      TRAP #15
00003AA4  4281                    1141      CLR.L D1
00003AA6  3238 2594               1142      MOVE.W REG_STORE,D1
00003AAA  103C 000F               1143      MOVE.B #15, D0
00003AAE  4E4F                    1144      TRAP #15
00003AB0  103C 000D               1145      MOVE.B #13, D0
00003AB4  43F8 243E               1146      LEA NL,A1
00003AB8  4E4F                    1147      TRAP #15
00003ABA                          1148  
00003ABA                          1149      
00003ABA                          1150      *USP*
00003ABA  40C6                    1151      MOVE.W SR,D6
00003ABC  0886 000D               1152      BCLR #13,D6     
00003AC0  46C6                    1153      MOVE.W D6,SR
00003AC2  43F8 2490               1154      LEA USPREG, A1
00003AC6  143C 0010               1155      MOVE.B #16,D2
00003ACA  103C 000E               1156      MOVE.B #14, D0 
00003ACE  4E4F                    1157      TRAP #15
00003AD0  220F                    1158      MOVE.L A7,D1
00003AD2  103C 000F               1159      MOVE.B #15, D0
00003AD6  4E4F                    1160      TRAP #15
00003AD8  103C 000D               1161      MOVE.B #13, D0
00003ADC  43F8 243E               1162      LEA NL,A1
00003AE0  4E4F                    1163      TRAP #15
00003AE2  4E41                    1164      TRAP #1 
00003AE4                          1165     
00003AE4                          1166  BSCH:
00003AE4  48E7 FFFE               1167      MOVEM.L A0-A6/D0-D7, -(SP)
00003AE8  2449                    1168      MOVE.L A1,A2    ; address1 in A0, address2 in A1, String in A5
00003AEA  95C8                    1169      SUB.L A0,A2     ; len of search space
00003AEC  B68A                    1170      CMP.L A2,D3     ; if smaller than string no match
00003AEE  6E00 001E               1171      BGT NO_MATCH_BSCH   ;d3 Hhas len
00003AF2  2449                    1172      MOVE.L A1,A2
00003AF4  95C3                    1173      SUB.L D3,A2
00003AF6                          1174  FOR_C_IN_SPACE:
00003AF6  2C48                    1175      MOVE.L A0,A6    ; address1
00003AF8  3003                    1176      MOVE.W D3,D0    ; len
00003AFA  6100 F95E               1177      BSR CHECK_MATCH
00003AFE  4A00                    1178      TST.B D0
00003B00  6700 001C               1179      BEQ FOUND
00003B04  5288                    1180      ADD.L #1,A0    ; c += 1
00003B06  B1CA                    1181      CMP.L A2,A0
00003B08  6E00 0004               1182      BGT NO_MATCH_BSCH    ;reached end, not found
00003B0C  60E8                    1183      BRA FOR_C_IN_SPACE
00003B0E                          1184      
00003B0E                          1185  NO_MATCH_BSCH:
00003B0E  43F8 255C               1186      LEA NO_STRING_MATCH,A1       
00003B12  103C 000D               1187      MOVE.B #13,D0
00003B16  4E4F                    1188      TRAP #15
00003B18  4CDF 7FFF               1189      MOVEM.L (SP)+,A0-A6/D0-D7
00003B1C  4E75                    1190      RTS
00003B1E                          1191  FOUND:
00003B1E  43F8 256E               1192      LEA STRING_MATCH,A1       ; print found text
00003B22  103C 000D               1193      MOVE.B #13,D0
00003B26  4E4F                    1194      TRAP #15
00003B28  43F8 2585               1195      LEA ADDRESS,A1  
00003B2C  103C 000E               1196      MOVE.B #14,D0   
00003B30  4E4F                    1197      TRAP #15
00003B32  2208                    1198      MOVE.L A0,D1
00003B34  143C 0010               1199      MOVE.B #16,D2   
00003B38  103C 000F               1200      MOVE.B #15,D0   
00003B3C  4E4F                    1201      TRAP #15
00003B3E  43F8 2581               1202      LEA COLON,A1    
00003B42  103C 000E               1203      MOVE.B #14,D0
00003B46  4E4F                    1204      TRAP #15
00003B48  2248                    1205      MOVE.L A0,A1    
00003B4A  103C 0000               1206      MOVE.B #0,D0
00003B4E  3203                    1207      MOVE.W D3,D1
00003B50  4E4F                    1208      TRAP #15                  
00003B52  4CDF 7FFF               1209      MOVEM.L (SP)+,A0-A6/D0-D7
00003B56  4E75                    1210      RTS
00003B58                          1211  
00003B58                          1212        
00003B58                          1213      
00006000                          1214      ORG $6000       ; Go
00006000  700D                    1215      MOVE.L #13,D0
00006002  43F8 20B2               1216      LEA USERPROMPT,A1
00006006  4E4F                    1217      TRAP #15
00006008  6000 D03E               1218      BRA SHELL 
0000600C                          1219      
0000600C                          1220      *technically all these use go
00006010                          1221      ORG $6010
00006010= F000                    1222      DC.W $F000      ; Line F emulator
00006012  6000 D034               1223      BRA SHELL
00006016                          1224      
00006020                          1225      ORG $6020
00006020= A000                    1226      DC.W $A000      ; Line A emulator
00006022  6000 D024               1227      BRA SHELL
00006026                          1228      
00006030                          1229      ORG $6030       ; Illegal instruciton
00006030= 4AFA                    1230      DC.W $4AFA          
00006032  6000 D014               1231      BRA SHELL
00006036                          1232      
00006040                          1233      ORG $6040       ; divide by zero
00006040  700A                    1234      MOVE.L #10,D0  
00006042  7200                    1235      MOVE.L #0,D1
00006044  80C1                    1236      DIVU.W D1,D0
00006046  6000 D000               1237      BRA SHELL
0000604A                          1238  
00006050                          1239      ORG $6050
00006050  303C 0001               1240      MOVE.W #1,D0   ; check instruction
00006054  4241                    1241      CLR.W D1
00006056  4181                    1242      CHK.W D1,D0
00006058  6000 CFEE               1243      BRA SHELL
0000605C                          1244      
00006060                          1245      ORG $6060
00006060  027C 00FF               1246      ANDI.W #$00FF,SR    ;privelage error
00006064  007C 1000               1247      OR.W #$1000, SR     
00006068  6000 CFDE               1248      BRA SHELL
0000606C                          1249      
0000606C                          1250      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0REG               243F
A1REG               2444
A2REG               2448
A3REG               244D
A4REG               2452
A5REG               2457
A6REG               245C
A7REG               2460
ADDRESS             2585
ADDRESS_ER          24A0
ADDRESS_ERRORV      348C
ALL_HELP_PROMPTS    341C
BF                  37DE
BFCOMMAND           208C
BFHELP              33CC
BFHELPPROMPT        22EB
BF_ERR              320E
BF_FUNC             31B2
BF_LOOP             37E2
BLOOP               3670
BMOV                37C8
BMOVCOMMAND         208F
BMOVHELP            33E0
BMOVHELPPROMPT      228F
BMOV_EXIT           37D8
BMOV_LOOP           37CE
BSCH                3AE4
BSCHCOMMAND         2094
BSCHHELP            33F4
BSCHHELPPROMPT      235F
BSCH_ERR            3270
BSCH_FUNC           321A
BTSTCOMMAND         2087
BTSTHELPPROMPT      2271
CHECK_ER            2503
CHECK_INSTRV        352E
CHECK_MATCH         345A
COLON               2581
COMMAND_PARSE       359A
CR                  D
CRCCOM              20A4
D0REG               2468
D1REG               246D
D2REG               2472
D3REG               2477
D4REG               247C
D5REG               2481
D6REG               2486
D7REG               248B
DESC                3834
DF                  3850
DFCOMMAND           209C
DFHELPPROMPT        2407
DF_FUNC             32B8
DIVIDE_ZEROV        350A
DIVIDE_Z_ER         24F1
ECHOCOMMAND         20AD
ECHO_ERR            334C
ECHO_FUNC           331E
END_FOUND           3458
ERR                 3370
EXITCOMMAND         209F
EXITHELPPROMPT      2428
EXIT_FUNC           3358
FIND_END            3444
FONT                20A8
FONT_ERR            3312
FONT_FUNC           32E2
FOR_C_IN_SPACE      3AF6
FOR_C_IN_STRING     3466
FOR_PARSE           35BA
FOUND               3B1E
GO                  37EE
GOCOMMAND           2099
GOHELP              3408
GOHELPPROMPT        23CD
GO_ADDRESS          254F
GO_ERR              32AC
GO_FUNC             327C
HELPCOMMAND         2071
HEX_CHECK           35F4
ILLEGAL_ER          24B4
ILLEGAL_INSTRV      34C2
INIT                3040
INPUT               200C
LF                  A
LINEAV              3552
LINEA_ER            251B
LINEFV              3576
LINEF_ER            2535
MATCH               3476
MD                  361C
MDSP                3608
MDSPCOMMAND         2076
MDSPHELP            33B8
MDSPHELPPROMPT      20CB
MDSP_2_ARGS         30B2
MDSP_ERR            30CC
MDSP_EX             30C0
MM                  365A
MMCOMMAND           2081
MMERR               37BE
MMHELP              337C
MMHELPPROMPT        21B5
MMLLOOP             3750
MMWLOOP             36E0
MM_B                3130
MM_BYTE             366E
MM_CHECK_SIZE       3108
MM_EXIT             37C2
MM_FUNC             30D8
MM_L                314C
MM_LONG             374E
MM_W                313E
MM_WORD             36DE
MSCOMMAND           2084
MSHELP              3390
MSHELPPROMPT        221D
MS_ERR              31A6
MS_FUNC             3162
NL                  243E
NO_MATCH            347C
NO_MATCH_BSCH       3B0E
NO_STRING_MATCH     255C
NUM_CHECK           35E8
PARSE_DONE          3602
PARSE_ERR           3600
PCREG               249B
PC_STORE            258E
PC_VAL              32CA
PRIVALAGE_ER        24D3
PRIVALEGEV          34E6
REGNUM              2592
REG_STORE           2594
SHELL               3048
SHELL_PROMPT        2000
SHELL_RESET         3044
SORTW               381E
SORTWCOMMAND        207B
SORTWHELP           33A4
SORTWHELPPROMPT     212A
SORTW_EXIT          384A
SORTW_FOR_I         3824
SORTW_FOR_J         3826
SORTW_NEXT          3838
SRREG               2496
START               3000
STRING_MATCH        256E
SWAP                3842
SW_FUNC             315A
TRAPING_HOES        3484
USERPROMPT          20B2
USPREG              2490
